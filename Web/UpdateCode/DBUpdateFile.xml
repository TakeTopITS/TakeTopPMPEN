<DataBaseUpgradeFiles>
  <DataBaseUpgradeFile>
    <ID>3295</ID>
    <SQLText>Select * From T_JNUnit</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3296</ID>
    <SQLText>
			-- FUNCTION: public.Func_tg_ImplePlan_Insert()

			-- DROP FUNCTION public."Func_tg_ImplePlan_Insert"();

			CREATE OR REPLACE FUNCTION public."Func_tg_ImplePlan_Insert"()
			RETURNS trigger
			LANGUAGE 'plpgsql'
			COST 100
			VOLATILE NOT LEAKPROOF
			AS $BODY$
			declare charCreatorCode char(20);
			declare charPlanOperatorCode char(20);
			declare charPlanOperatorName char(20);
			declare charBelongDepartCode char(20);
			declare charBelongDepartName varchar(40);
			declare charLeaderCode char(20);
			declare charLeaderName char(20);

			begin
			select rtrim(COALESCE(new.OperatorCode,'')),rtrim(COALESCE(new.OperatorName,'')),rtrim(COALESCE(new.BelongDepartCode,''))
			,rtrim(COALESCE(new.BelongDepartName,'')),rtrim(COALESCE(new.LeaderCode,'')),rtrim(COALESCE(new.leader,''))
			into charPlanOperatorCode,charPlanOperatorName,charBelongDepartCode ,charBelongDepartName,charLeaderCode,charLeaderName;

			--更新归属部门代码和名称
			if  length(charLeaderCode) &gt; 0  then

			select DepartCode,DepartName into charBelongDepartCode,charBelongDepartName From T_ProjectMember  Where UserCode = charLeaderCode;
			Update T_ImplePlan Set BelongDepartCode = charBelongDepartCode,BelongDepartName = charBelongDepartName Where ID = new.ID;

			End if;

			--增加小时，纠正日期
			update T_ImplePlan Set end_date = timeadd('hour',23, end_date) Where ID = new.ID and date_part('hour',end_date) = 0;

			--改变基准时间段和单位的值
			update T_ImplePlan Set BaseLine_Start_Date = new.Start_Date,BaseLine_End_Date = new.End_Date Where ID = new.ID;
			update T_ImplePlan Set Duration = F_WorkDay(new.Start_Date,new.End_Date)+1,Duration_Unit='d' Where ID = new.ID;

			if(new.ProjectID = 0 or new.ProjectID = null)
			then

			Select cast(substring(ltrim(rtrim(cast(new.PID as char(50)))) from 0  for char_length(ltrim(rtrim(cast(new.PID as char(50)))))-1) as int) into new.ProjectID;
			Select cast(substring(ltrim(rtrim(cast(new.PID as char(50)))) from char_length(ltrim(rtrim(cast (new.PID as char(50)))))-1 for 2) as int) into new.VerID;

			-- 		  --增加小时，纠正日期
			-- 		  update T_ImplePlan Set end_date = timeadd('hour',23, end_date) Where ID = new.ID and date_part('hour',end_date) = 0;

			-- 		  --改变基准时间段和单位的值
			-- 		  update T_ImplePlan Set BaseLine_Start_Date = new.Start_Date,BaseLine_End_Date = new.End_Date Where ID = new.ID;
			-- 		  update T_ImplePlan Set Duration = F_WorkDay(new.Start_Date,new.End_Date)+1,Duration_Unit='d' Where ID = new.ID;

			Update T_ImplePlan Set ProjectID = new.ProjectID Where ID = new.ID;
			Update T_ImplePlan Set VerID = new.VerID   Where ID = new.ID;

			Select CreatorCode into charCreatorCode From T_ProjectPlanVersion Where ProjectID = new.ProjectID and VerID = new.VerID;

			Update T_ImplePlan Set UpdateManCode = charCreatorCode  Where ID = new.ID;
			Update T_ImplePlan Set CreatorCode = charCreatorCode  Where ID = new.ID;

			Update T_ImplePlan Set Type = '计划'  Where ID = new.ID;
			Update T_ImplePlan Set Status = '计划'  Where ID = new.ID;
			Update T_ImplePlan Set PriorID = 0 Where Id = new.ID;
			Update T_ImplePlan Set FromPlanID = new.ID Where ID = new.ID;

			if(charPlanOperatorCode = null Or charPlanOperatorCode = '')
			then

			Select PMCode,PMName into charPlanOperatorCode , charPlanOperatorName From T_Project Where ProjectID = new.ProjectID;
			Update T_ImplePlan Set OperatorCode = charPlanOperatorCode,OperatorName =charPlanOperatorName Where ID = new.ID;

			end if;

			end if;

			return new;
			end
			$BODY$;

			ALTER FUNCTION public."Func_tg_ImplePlan_Insert"()
			OWNER TO postgres;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3297</ID>
    <SQLText>
			-- FUNCTION: public.Func_tg_ImplePlan_Insert()

			-- DROP FUNCTION public."Func_tg_ImplePlan_Insert"();

			CREATE OR REPLACE FUNCTION public."Func_tg_ImplePlan_Insert"()
			RETURNS trigger
			LANGUAGE 'plpgsql'
			COST 100
			VOLATILE NOT LEAKPROOF
			AS $BODY$
			declare charCreatorCode char(20);
			declare charPlanOperatorCode char(20);
			declare charPlanOperatorName char(20);
			declare charBelongDepartCode char(20);
			declare charBelongDepartName varchar(40);
			declare charLeaderCode char(20);
			declare charLeaderName char(20);

			begin
			select rtrim(COALESCE(new.OperatorCode,'')),rtrim(COALESCE(new.OperatorName,'')),rtrim(COALESCE(new.BelongDepartCode,''))
			,rtrim(COALESCE(new.BelongDepartName,'')),rtrim(COALESCE(new.LeaderCode,'')),rtrim(COALESCE(new.leader,''))
			into charPlanOperatorCode,charPlanOperatorName,charBelongDepartCode ,charBelongDepartName,charLeaderCode,charLeaderName;

			--更新归属部门代码和名称
			if  length(charLeaderCode) &gt; 0  then

			select DepartCode,DepartName into charBelongDepartCode,charBelongDepartName From T_ProjectMember  Where UserCode = charLeaderCode;
			Update T_ImplePlan Set BelongDepartCode = charBelongDepartCode,BelongDepartName = charBelongDepartName Where ID = new.ID;

			End if;

			--增加小时，纠正日期
			update T_ImplePlan Set end_date = timeadd('hour',23, end_date) Where ID = new.ID and date_part('hour',end_date) = 0;

			--改变基准时间段和单位的值
			update T_ImplePlan Set BaseLine_Start_Date = new.Start_Date,BaseLine_End_Date = new.End_Date Where ID = new.ID;
			update T_ImplePlan Set Duration = F_WorkDay(new.Start_Date,new.End_Date)+1,Duration_Unit='d' Where ID = new.ID;

			if(new.ProjectID = 0 or new.ProjectID = null)
			then

			Select cast(substring(ltrim(rtrim(cast(new.PID as char(50)))) from 0  for char_length(ltrim(rtrim(cast(new.PID as char(50)))))-1) as int) into new.ProjectID;
			Select cast(substring(ltrim(rtrim(cast(new.PID as char(50)))) from char_length(ltrim(rtrim(cast (new.PID as char(50)))))-1 for 2) as int) into new.VerID;

			-- 		  --增加小时，纠正日期
			-- 		  update T_ImplePlan Set end_date = timeadd('hour',23, end_date) Where ID = new.ID and date_part('hour',end_date) = 0;

			-- 		  --改变基准时间段和单位的值
			-- 		  update T_ImplePlan Set BaseLine_Start_Date = new.Start_Date,BaseLine_End_Date = new.End_Date Where ID = new.ID;
			-- 		  update T_ImplePlan Set Duration = F_WorkDay(new.Start_Date,new.End_Date)+1,Duration_Unit='d' Where ID = new.ID;

			Update T_ImplePlan Set ProjectID = new.ProjectID Where ID = new.ID;
			Update T_ImplePlan Set VerID = new.VerID   Where ID = new.ID;

			Select CreatorCode into charCreatorCode From T_ProjectPlanVersion Where ProjectID = new.ProjectID and VerID = new.VerID;

			Update T_ImplePlan Set UpdateManCode = charCreatorCode  Where ID = new.ID;
			Update T_ImplePlan Set CreatorCode = charCreatorCode  Where ID = new.ID;

			Update T_ImplePlan Set Type = '计划'  Where ID = new.ID;
			Update T_ImplePlan Set Status = '计划'  Where ID = new.ID;
			Update T_ImplePlan Set PriorID = 0 Where Id = new.ID;
			Update T_ImplePlan Set FromPlanID = new.ID Where ID = new.ID;

			if(charPlanOperatorCode = null Or charPlanOperatorCode = '')
			then

			Select PMCode,PMName into charPlanOperatorCode , charPlanOperatorName From T_Project Where ProjectID = new.ProjectID;
			Update T_ImplePlan Set OperatorCode = charPlanOperatorCode,OperatorName =charPlanOperatorName Where ID = new.ID;

			end if;

			end if;

			return new;
			end
			$BODY$;

			ALTER FUNCTION public."Func_tg_ImplePlan_Insert"()
			OWNER TO postgres;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3298</ID>
    <SQLText>alter table t_taskstatus alter  COLUMN  status  type character(10);</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3299</ID>
    <SQLText>Alter Table t_schedule Add Column color character(20)</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3300</ID>
    <SQLText>Update t_schedule Set color = 'green'</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3301</ID>
    <SQLText>Alter Table t_schedule Add Column "column" character(100)</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3302</ID>
    <SQLText>Update t_schedule Set "column" = ''</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3303</ID>
    <SQLText>
			ALTER TABLE t_schedule RENAME begintime TO "start";
			ALTER TABLE t_schedule RENAME endtime TO "end";
			ALTER TABLE t_schedule RENAME plantitle TO "name";
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3304</ID>
    <SQLText>ALTER TABLE t_schedule RENAME plandetail TO "detail";</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3305</ID>
    <SQLText>ALTER TABLE t_schedule RENAME plandate TO "scheduledate";</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3306</ID>
    <SQLText>ALTER TABLE t_schedule  ALTER COLUMN id SET data TYPE char(100) USING id::char(100);</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3307</ID>
    <SQLText>ALTER TABLE t_schedule RENAME scheduledate TO createdate</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3308</ID>
    <SQLText>
			Update t_promodulelevel set isdeleted = 'YES' where modulename in ('成员日程','查看所有成员日程');
			Update t_promodulelevelforpage set isdeleted = 'YES' where modulename in ('工作日程');
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3309</ID>
    <SQLText>
			--更改商品盘点视图，适合集团版----------------
			CREATE OR REPLACE View V_GoodsCheckReport
			as
			Select OwnerCode,GoodsCode,GoodsName,Type,ModelNumber,Spec,SN,UnitName, Sum(Number) As TotalNumber,Sum(Price*Number) As TotalAmount
			From T_Goods Group By OwnerCode, GoodsCode,Goodsname,Type,ModelNumber,Spec,SN,UnitName
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3310</ID>
    <SQLText>
			truncate table t_report;
			truncate table t_reporttemplate;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3311</ID>
    <SQLText>
			CREATE OR REPLACE PROCEDURE public.pro_deleteuserauthorizationbysupermodule(
			)
			LANGUAGE 'plpgsql'
			AS $BODY$
			begin
			delete from t_promodule where rtrim(modulename)||rtrim(moduletype)||rtrim(usertype)  in (select rtrim(modulename)|| rtrim(moduletype) || rtrim(usertype) from t_promodulelevel where visible = 'no' or isdeleted = 'yes');
			delete from t_departrelatedmodule where rtrim(modulename) || rtrim(moduletype) || rtrim(usertype) in (select rtrim(modulename) || rtrim(moduletype) || rtrim(usertype) from t_promodulelevel where visible = 'no' or isdeleted = 'yes');
			end
			$BODY$;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3312</ID>
    <SQLText>Delete from t_promodulelevelforpage where modulename = '工作日程'</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3313</ID>
    <SQLText>update t_promodulelevel set pagename = 'TTMakeDefect.aspx' where modulename = '记录缺陷'</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3314</ID>
    <SQLText>update t_promodulelevel set pagename = trim(pagename)</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3315</ID>
    <SQLText>
			update t_promodulelevel set modulename = '记录需求',homemodulename= '记录需求' where modulename = '建立和分派需求';
			update t_promodule set modulename = '记录需求' where modulename = '建立和分派需求';
			update t_promodulelevelforpage set modulename = '记录需求',homemodulename = '记录需求' where modulename = '建立和分派需求';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3316</ID>
    <SQLText>
			Insert Into T_ProModuleLevelForPage(ModuleName,HomeModuleName,IconURL,SortNumber,PageName,UserType,ParentModule,Visible,LangCode,IsDeleted)
			Values('计划完成进度','计划完成进度','css/Images/output.png',5,'TTProjectPlanScheduleReport.aspx?ProjectID=','INNER','项目报表列表','YES','zh-CN','NO')
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3317</ID>
    <SQLText>alter table "t_projectstatus" alter  COLUMN  status  type  character(10) ;</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3318</ID>
    <SQLText>
			alter table "t_wlstatus" alter COLUMN status type character(10) ;
			alter table "t_planstatus" alter COLUMN status type character(10) ;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3319</ID>
    <SQLText>
			alter table "t_reqstatus" alter COLUMN status type character(10) ;
			alter table "t_defectstatus" alter COLUMN status type character(10) ;
			alter table "t_teststatus" alter COLUMN status type character(10) ;
			alter table "t_otherstatus" alter COLUMN status type character(10) ;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3320</ID>
    <SQLText>
			-- FUNCTION: public.Func_tg_ImplePlan_Update()

			-- DROP FUNCTION public."Func_tg_ImplePlan_Update"();

			CREATE OR REPLACE FUNCTION public."Func_tg_ImplePlan_Update"()
			RETURNS trigger
			LANGUAGE 'plpgsql'
			COST 100
			VOLATILE NOT LEAKPROOF
			AS $BODY$
			declare chrPMCode varchar(20);
			declare chrPMName varchar(20);

			declare charBelongDepartCode char(20);
			declare charBelongDepartName varchar(40);

			declare charLeaderCode char(20);

			declare chrPlanVerType varchar(20);
			declare chrLeaderCode varchar(20);
			declare chrLeaderName varchar(20);
			declare chrProjectType char(20);
			declare chrImpactByDetail char(10);
			declare intWholePlanPercent_Done int;
			declare intParentIDGantt  int;

			begin

			--插入原来的数据作为日志
			Insert Into T_ImplePlan_UpdateLog(ID,ProjectID,WorkID,Name,Start_Date,End_Date,Resource
			,Budget
			,MakeDate
			,Status
			,ParentID
			,PriorID
			,Type
			,VerID
			,DefaultSchedule
			,DefaultCost
			,BackupID
			,LockStatus
			,UpdateManCode
			,UpdateTime
			,FromProjectID
			,FromProjectPlanVerID
			,CreatorCode
			,Percent_Done
			,priority
			,BaseLine_Start_Date
			,BaseLine_End_Date
			,Duration
			,Duration_Unit
			,Other_Field
			,Index
			,pid
			,Parent_ID
			,FromPlanID
			,OperatorCode
			,OperatorName
			,SortNumber
			,leader
			,remark
			,baseline_percent_done
			,taskcolor
			,LeaderCode
			,WorkHour
			,ActualHour
			,Expense
			,CreateLogTime
			,RequireNumber
			,FinishedNumber
			,UnitName
			,Price
			,BelongDepartCode
			,BelongDepartName) values(old.ID
			,old.ProjectID
			,old.WorkID
			,old.Name
			,old.Start_Date
			,old.End_Date
			,old.Resource
			,old.Budget
			,old.MakeDate
			,old.Status
			,old.ParentID
			,old.PriorID
			,old.Type
			,old.VerID
			,old.DefaultSchedule
			,old.DefaultCost
			,old.BackupID
			,old.LockStatus
			,old.UpdateManCode
			,old.UpdateTime
			,old.FromProjectID
			,old.FromProjectPlanVerID
			,old.CreatorCode
			,old.Percent_Done
			,old.priority
			,old.BaseLine_Start_Date
			,old.BaseLine_End_Date
			,old.Duration
			,old.Duration_Unit
			,old.Other_Field
			,old.Index
			,old.pid
			,old.Parent_ID
			,old.FromPlanID
			,old.OperatorCode
			,old.OperatorName
			,old.SortNumber
			,old.leader
			,old.remark
			,old.baseline_percent_done
			,old.taskcolor
			,old.LeaderCode
			,old.WorkHour
			,old.ActualHour
			,old.Expense
			,now()
			,old.RequireNumber
			,old.FinishedNumber
			,old.UnitName
			,old.Price
			,old.BelongDepartCode
			,old.BelongDepartName);

			select rtrim(COALESCE(new.BelongDepartCode,'')),rtrim(COALESCE(new.BelongDepartName,'')) into charBelongDepartCode,charBelongDepartName;

			Select Type into chrPlanVerType From T_ProjectPlanVersion Where ProjectID = new.ProjectID and VerID = new.VerID;

			Select Percent_Done into intWholePlanPercent_Done From T_ImplePlan Where ProjectID = new.ProjectID and VerID = new.VerID and Parent_ID = 0;

			select PMCode,PMName into chrPMCode,chrPMName From T_Project Where ProjectID = new.ProjectID;

			--更新归属部门代码和名称
			if new.leadercode != old.leadercode then

			-- 	    delete from t_sqlrunlog;
			--  	    insert into t_sqlrunlog(logcontent,createtime) values(new.leader|| '--' || old.leader,now());

			select new.leadercode into  charLeaderCode ;

			select DepartCode,DepartName into charBelongDepartCode,charBelongDepartName From T_ProjectMember  Where UserCode = charLeaderCode;
			Update T_ImplePlan Set BelongDepartCode = charBelongDepartCode,BelongDepartName = charBelongDepartName Where ID = new.ID ;

			End if;

			--依活动版计划进度更改项目总进度
			if new.percent_done!=old.percent_done then
			Select ProjectType into chrProjectType From T_Project Where ProjectID = new.ProjectID;
			Select ProgressByDetailImpact into chrImpactByDetail From T_ProjectType Where Type = chrProjectType;

			if chrImpactByDetail = 'YES' and new.parent_id = 0 and chrPlanVerType = '在用' then
			Update T_Project Set FinishPercent = intWholePlanPercent_Done Where ProjectID = new.ProjectID;
			End if;
			End if;

			--更改此计划转的任务的开始时间和结束时间
			if new.Start_Date!=old.Start_Date or new.End_Date !=old.End_Date then

			Update T_ProjectTask Set BeginDate = new.Start_Date,EndDate = new.End_Date Where PlanID = new.ID ;

			Update T_TaskAssignRecord Set BeginDate = new.Start_Date,EndDate = new.End_Date
			Where TaskID In (Select TaskID From T_ProjectTask Where PlanID = new.ID  and PriorID = 0);

			End if;

			return new;
			end
			$BODY$;

			ALTER FUNCTION public."Func_tg_ImplePlan_Update"()
			OWNER TO postgres;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3321</ID>
    <SQLText>
			-- FUNCTION: public.Func_tg_ImplePlan_Delete()

			-- DROP FUNCTION public."Func_tg_ImplePlan_Delete"();

			CREATE OR REPLACE FUNCTION public."Func_tg_ImplePlan_Delete"()
			RETURNS trigger
			LANGUAGE 'plpgsql'
			COST 100
			VOLATILE NOT LEAKPROOF
			AS $BODY$
			begin
			Delete From T_ImplePlan Where ID in (Select ChildPlanID From F_GetAllChildPlanID(old.ID));

			return old;
			end
			$BODY$;

			ALTER FUNCTION public."Func_tg_ImplePlan_Delete"()
			OWNER TO postgres;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3322</ID>
    <SQLText>
			-- FUNCTION: public.Func_tg_ImplePlan_Insert()

			-- DROP FUNCTION public."Func_tg_ImplePlan_Insert"();

			CREATE OR REPLACE FUNCTION public."Func_tg_ImplePlan_Insert"()
			RETURNS trigger
			LANGUAGE 'plpgsql'
			COST 100
			VOLATILE NOT LEAKPROOF
			AS $BODY$
			declare charCreatorCode char(20);
			declare charPlanOperatorCode char(20);
			declare charPlanOperatorName char(20);
			declare charBelongDepartCode char(20);
			declare charBelongDepartName varchar(40);
			declare charLeaderCode char(20);
			declare charLeaderName char(20);

			begin
			select rtrim(COALESCE(new.OperatorCode,'')),rtrim(COALESCE(new.OperatorName,'')),rtrim(COALESCE(new.BelongDepartCode,''))
			,rtrim(COALESCE(new.BelongDepartName,'')),rtrim(COALESCE(new.LeaderCode,'')),rtrim(COALESCE(new.leader,''))
			into charPlanOperatorCode,charPlanOperatorName,charBelongDepartCode ,charBelongDepartName,charLeaderCode,charLeaderName;

			--更新归属部门代码和名称
			if  length(charLeaderCode) &gt; 0  then

			select DepartCode,DepartName into charBelongDepartCode,charBelongDepartName From T_ProjectMember  Where UserCode = charLeaderCode;
			Update T_ImplePlan Set BelongDepartCode = charBelongDepartCode,BelongDepartName = charBelongDepartName Where ID = new.ID;

			End if;

			--增加小时，纠正日期
			update T_ImplePlan Set end_date = timeadd('hour',23, end_date) Where ID = new.ID and date_part('hour',end_date) = 0;

			--改变基准时间段和单位的值
			update T_ImplePlan Set BaseLine_Start_Date = new.Start_Date,BaseLine_End_Date = new.End_Date Where ID = new.ID;
			update T_ImplePlan Set Duration = F_WorkDay(new.Start_Date,new.End_Date)+1,Duration_Unit='d' Where ID = new.ID;

			if(new.ProjectID = 0 or new.ProjectID = null)
			then

			Select cast(substring(ltrim(rtrim(cast(new.PID as char(50)))) from 0  for char_length(ltrim(rtrim(cast(new.PID as char(50)))))-1) as int) into new.ProjectID;
			Select cast(substring(ltrim(rtrim(cast(new.PID as char(50)))) from char_length(ltrim(rtrim(cast (new.PID as char(50)))))-1 for 2) as int) into new.VerID;

			-- 		  --增加小时，纠正日期
			-- 		  update T_ImplePlan Set end_date = timeadd('hour',23, end_date) Where ID = new.ID and date_part('hour',end_date) = 0;

			-- 		  --改变基准时间段和单位的值
			-- 		  update T_ImplePlan Set BaseLine_Start_Date = new.Start_Date,BaseLine_End_Date = new.End_Date Where ID = new.ID;
			-- 		  update T_ImplePlan Set Duration = F_WorkDay(new.Start_Date,new.End_Date)+1,Duration_Unit='d' Where ID = new.ID;

			Update T_ImplePlan Set ProjectID = new.ProjectID Where ID = new.ID;
			Update T_ImplePlan Set VerID = new.VerID   Where ID = new.ID;

			Select CreatorCode into charCreatorCode From T_ProjectPlanVersion Where ProjectID = new.ProjectID and VerID = new.VerID;

			Update T_ImplePlan Set UpdateManCode = charCreatorCode  Where ID = new.ID;
			Update T_ImplePlan Set CreatorCode = charCreatorCode  Where ID = new.ID;

			Update T_ImplePlan Set Type = '计划'  Where ID = new.ID;
			Update T_ImplePlan Set Status = '计划'  Where ID = new.ID;
			Update T_ImplePlan Set PriorID = 0 Where Id = new.ID;
			Update T_ImplePlan Set FromPlanID = new.ID Where ID = new.ID;

			if(charPlanOperatorCode = null Or charPlanOperatorCode = '')
			then

			Select PMCode,PMName into charPlanOperatorCode , charPlanOperatorName From T_Project Where ProjectID = new.ProjectID;
			Update T_ImplePlan Set OperatorCode = charPlanOperatorCode,OperatorName =charPlanOperatorName Where ID = new.ID;

			end if;

			end if;

			return new;
			end
			$BODY$;

			ALTER FUNCTION public."Func_tg_ImplePlan_Insert"()
			OWNER TO postgres;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3323</ID>
    <SQLText>update t_promodulelevel set pagename = 'TTUpLoadDoc.aspx' where pagename = 'TTUpLoadDoc.aspx';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3324</ID>
    <SQLText>update t_promodulelevel set pagename = 'TTUpLoadDoc.aspx' where pagename = 'TTUploadDoc.aspx';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3325</ID>
    <SQLText>
			Insert Into T_ProModuleLevelForPage(ModuleName,HomeModuleName,IconURL,SortNumber,PageName,UserType,ParentModule,Visible,LangCode,IsDeleted)
			Values('--&gt;资金预算','--&gt;资金预算','',5,'TTMakeProjectBudget.aspx?ProjectID=','INNER','主管项目第一行','YES','zh-CN','NO');

			Insert Into T_ProModuleLevelForPage(ModuleName,HomeModuleName,IconURL,SortNumber,PageName,UserType,ParentModule,Visible,LangCode,IsDeleted)
			Values('--&gt;物资预算','--&gt;物资预算','',5,'TTProjectRelatedItem.aspx?ProjectID=','INNER','主管项目第一行','YES','zh-CN','NO');
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3326</ID>
    <SQLText>
			Insert Into T_ProModuleLevelForPage(ModuleName,HomeModuleName,IconURL,SortNumber,PageName,UserType,ParentModule,Visible,LangCode,IsDeleted)
			Values('关联流程模板','关联流程模板','',12,'TTAttachWorkFlowTemplate.aspx?RelatedType=ProjectPlan&amp;RelatedID=','INNER','项目计划菜单','YES','zh-CN','NO');
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3327</ID>
    <SQLText>
			Update t_promodulelevel set pagename = 'TTTenderList.aspx' where pagename = 'TTTenderList_HYYQ.aspx';
			Update t_promodulelevel set pagename = 'TTTenderFinanceList.aspx' where pagename = 'TTTenderFinanceList_HYYQ.aspx'
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3328</ID>
    <SQLText>Update T_ProModuleLevelForPage Set ModuleName = '项目收益',HomeModuleName = '项目收益' Where ModuleName = '合同收入与费用'</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3329</ID>
    <SQLText>
			Update T_ProModuleLevel Set ModuleName = '项目收益',HomeModuleName = '项目收益' Where ModuleName = '项目收入与费用';
			Update T_ProModule Set ModuleName = '项目收益' Where ModuleName = '项目收入与费用';

			Update T_ProModuleLevel Set ModuleName = '项目收益报告',HomeModuleName = '项目收益报告' Where ModuleName = '项目收益';
			Update T_ProModule Set ModuleName = '项目收益报告' Where ModuleName = '项目收益';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3330</ID>
    <SQLText>select setval('T_WorkFlowTStep_stepid_seq',(select max(stepid) from T_WorkFlowTStep))</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3331</ID>
    <SQLText>
			Insert Into T_ProModuleLevelForPage(ModuleName,HomeModuleName,IconURL,SortNumber,PageName,UserType,ParentModule,Visible,LangCode,IsDeleted)
			Values('计划拼接','计划拼接','',13,'TTProjectPlanJoint.aspx?PlanID=','INNER','项目计划菜单','YES','zh-CN','NO');
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3332</ID>
    <SQLText>
			Update T_ProModuleLevelForPage Set IconURL = 'css/Images/note.png' where ModuleName = '计划备注';
			Update T_ProModuleLevelForPage Set IconURL = 'css/Images/doc.png' where ModuleName = '计划文档'
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3333</ID>
    <SQLText>
			CREATE View V_GoodsMainPlanBusinessObjectMaterialData
			AS
			Select PlanVerID,PlanMRPVerID, 'SaleOrder' as RelatedType, (Select SOID From T_GoodsSaleRecord Where ID = SourceRecordID) as RelatedID,ItemCode,ItemName,ModelNumber,Specification,Brand,RequireNumber,0 as CheckOutNumber,0 as CheckInNumber,0 AS ReturnNumber,Unit From T_ItemMainPlanRelatedItemPurchasePlan Where SourceType = 'GoodsSORecord'
			Union
			Select PlanVerID,PlanMRPVerID,'SaleOrder' as RelatedType, (Select SOID From T_GoodsSaleRecord Where ID = SourceRecordID) as RelatedID,ItemCode,ItemName,ModelNumber,Specification,Brand,RequireNumber,0 as CheckOutNumber,0 as CheckInNumber,0 AS ReturnNumber,Unit From T_ItemMainPlanRelatedItemProductPlan Where SourceType = 'GoodsSORecord'
			Union

			Select PlanVerID,PlanMRPVerID,'Project' as RelatedType, (Select ProjectID From T_ProjectRelatedItem Where ID = SourceRecordID) as RelatedID,ItemCode,ItemName,ModelNumber,Specification,Brand,RequireNumber,0 as CheckOutNumber,0 as CheckInNumber,0 AS ReturnNumber,Unit From T_ItemMainPlanRelatedItemPurchasePlan Where SourceType = 'GoodsPJRecord'
			Union
			Select PlanVerID,PlanMRPVerID,'Project' as RelatedType, (Select ProjectID From T_ProjectRelatedItem Where ID = SourceRecordID) as RelatedID,ItemCode,ItemName,ModelNumber,Specification,Brand,RequireNumber,0 as CheckOutNumber,0 as CheckInNumber,0 AS ReturnNumber,Unit From T_ItemMainPlanRelatedItemProductPlan Where SourceType = 'GoodsPJRecord'
			Union

			Select PlanVerID,PlanMRPVerID,'Other' as RelatedType, 0 as RelatedID,ItemCode,ItemName,ModelNumber,Specification,Brand,RequireNumber,0 as CheckOutNumber,0 as CheckInNumber,0 AS ReturnNumber,Unit From T_ItemMainPlanRelatedItemPurchasePlan Where SourceType &lt;&gt; 'GoodsSORecord' and SourceType &lt;&gt; 'Project'
			Union
			Select PlanVerID,PlanMRPVerID,'Other' as RelatedType, 0 as RelatedID,ItemCode,ItemName,ModelNumber,Specification,Brand,RequireNumber,0 as CheckOutNumber,0 as CheckInNumber,0 AS ReturnNumber,Unit From T_ItemMainPlanRelatedItemProductPlan Where SourceType &lt;&gt; 'GoodsSORecord' and SourceType &lt;&gt; 'Project'
			Union

			Select 0,0, B.RelatedType,B.RelatedID, A.GoodsCode As ItemCode,A.GoodsName as ItemName,A.ModelNumber, A.Spec as Specification,A.manufacturer as Brand, 0 as RequireNumber,0 as CheckOutNumber,A.Number as CheckInNumber,0 as ReturnNumber,A.UnitName as Unit  From  T_GoodsCheckInOrderDetail A,T_GoodsCheckInOrder B
			Where A.CheckInID = B.CheckInID
			Union
			Select 0,0,B.RelatedType,B.RelatedID, A.GoodsCode,A.GoodsName,A.ModelNumber ,A.Spec,A.manufacturer as Brand,0,A.Number,0,0,A.UnitName From T_GoodsShipmentDetail A,T_GoodsShipmentOrder B
			Where A.ShipmentNO = B.ShipmentNO
			Union
			Select 0,0,B.RelatedType,B.RelatedID, A.GoodsCode,A.GoodsName,A.ModelNumber , A.Spec,A.manufacturer as Brand,0,0,0,A.Number,A.UnitName From T_GoodsCheckInOrderDetail A,T_GoodsCheckInOrder B,T_GoodsReturnDetail C
			Where A.CheckInID = B.CheckInID  AND A.SourceID = C.ID
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3334</ID>
    <SQLText>
			CREATE View V_GoodsMainPlanBusinessObjectMaterialDataReport
			as
			Select PlanVerID,PlanMRPVerID, RelatedType,RelatedID,ItemCode,ItemName,ModelNumber,Specification,Brand,Unit,sum(RequireNumber) as TotalRequireNumber,sum(CheckOutNumber) as TotalCheckOutNumber,Sum(CheckInNumber) as TotalCheckInNumber, Sum(ReturnNumber) as TotalReturnNumber
			,(sum(CheckOutNumber) - SUM(RequireNumber)) as  MoreThanCheckOutNumber,(SUM(RequireNumber) - Sum(CheckInNumber)) as LessThanCheckInNumber
			From V_GoodsMainPlanBusinessObjectMaterialData
			Group By PlanVerID,PlanMRPVerID,RelatedType,RelatedID,ItemCode,ItemName,ModelNumber,Specification,Brand,UNit
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3335</ID>
    <SQLText>
			CREATE View V_GoodsMainPlanBusinessObjectMaterialDataSummaryReport
			as
			Select PlanVerID,PlanMRPVerID, RelatedType,RelatedID,ItemCode,ItemName,ModelNumber,Specification,Brand,Unit, TotalRequireNumber,TotalCheckOutNumber, COALESCE (CASE WHEN MoreThanCheckOutNumber &lt; 0 then 0 END,0) AS MoreThanCheckOutNumber ,LessThanCheckInNumber, TotalReturnNumber,TotalCheckInNumber
			From V_GoodsMainPlanBusinessObjectMaterialDataReport
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3336</ID>
    <SQLText>
			drop view v_goodsmainplanmaterialdatareport;
			drop view V_GoodsMainPlanMaterialData;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3337</ID>
    <SQLText>
			Create OR Replace View V_GoodsMainPlanMaterialData
			AS

			Select PlanVerID,PlanMRPVerID,ItemCode,ItemName,ModelNumber,Specification,Brand,RequireNumber,0 as CheckOutNumber,0 as CheckInNumber,0 AS ReturnNumber,Unit From T_ItemMainPlanRelatedItemPurchasePlan
			Union
			Select PlanVerID,PlanMRPVerID,ItemCode,ItemName,ModelNumber,Specification,Brand,RequireNumber,0 as CheckOutNumber,0 as CheckInNumber,0 AS ReturnNumber,Unit From T_ItemMainPlanRelatedItemProductPlan
			Union

			Select B.RelatedID,0,A.GoodsCode,A.GoodsName,A.ModelNumber, A.Spec AS Specification,A.manufacturer as Brand,0,0,A.Number as CheckInNumber,0,A.UnitName  From  T_GoodsCheckInOrderDetail A, T_GoodsCheckInOrder B
			Where A.CheckInID = B.CheckInID  AND B.RelatedType = 'MRPPlan'
			Union
			Select B.RelatedID,0,A.GoodsCode,A.GoodsName,A.ModelNumber , A.Spec AS Specification,A.manufacturer as Brand,0,A.Number,0,0,A.UnitName From T_GoodsShipmentDetail A,T_GoodsShipmentOrder B
			Where A.ShipmentNO = B.ShipmentNO  AND B.RelatedType ='MRPPlan'

			Union
			Select B.RelatedID,0,A.GoodsCode,A.GoodsName,A.ModelNumber , A.Spec,A.manufacturer as Brand,0,0,A.Number,A.Number,A.UnitName From T_GoodsCheckInOrderDetail A,T_GoodsCheckInOrder B,T_GoodsReturnDetail C
			Where A.CheckInID = B.CheckInID and A.SourceID = C.ID  AND B.RelatedType ='MRPPlan'
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3338</ID>
    <SQLText>
			Create View V_GoodsMainPlanMaterialDataReport
			as
			Select PlanVerID,PlanMRPVerID,ItemCode,ItemName,ModelNumber,Specification,Brand,Unit,sum(RequireNumber) as TotalRequireNumber,sum(CheckOutNumber) as TotalCheckOutNumber,Sum(CheckInNumber) as TotalCheckInNumber, Sum(ReturnNumber) as TotalReturnNumber
			,(sum(CheckOutNumber) - SUM(RequireNumber)) as  MoreThanCheckOutNumber,(SUM(RequireNumber) - Sum(CheckInNumber)) as LessThanCheckInNumber
			From V_GoodsMainPlanMaterialData
			Group By PlanVerID,PlanMRPVerID,ItemCode,ItemName,ModelNumber,Specification,Brand,UNit
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3339</ID>
    <SQLText>
			Create View V_GoodsMainPlanMaterialDataSummaryReport
			as
			Select PlanVerID,PlanMRPVerID,ItemCode,ItemName,ModelNumber,Specification,Brand,Unit, TotalRequireNumber,TotalCheckOutNumber, CASE WHEN MoreThanCheckOutNumber &lt; 0 then 0 END AS MoreThanCheckOutNumber ,LessThanCheckInNumber, TotalReturnNumber,TotalCheckInNumber
			From V_GoodsMainPlanMaterialDataReport
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3340</ID>
    <SQLText>
			Alter Table t_itemmainplanmrpversion Add RelatedProjectID int default 0;
			Alter Table t_itemmainplanmrpversion Add RelatedProjectPlanVerID int default 0;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3341</ID>
    <SQLText>update t_itemmainplanmrpversion set  RelatedProjectID = 0,RelatedProjectPlanVerID = 0;</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3342</ID>
    <SQLText>Update T_ProModuleLevel Set IconURL = 'ImagesSkin/liuchengguanliAPP.png' where ModuleName = '发起申请' and ModuleType = 'APP'</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3343</ID>
    <SQLText>Delete from T_ProjectRelatedItem Where id = 1147</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3344</ID>
    <SQLText>
			Alter Table public.t_tender_hyyq add PMCode character varying(20) COLLATE pg_catalog."default";
			Alter Table public.t_tender_hyyq add PMName character varying(20) COLLATE pg_catalog."default";

			Alter Table public.t_tender_hyyq add TechnicalDirectorCode character varying(20) COLLATE pg_catalog."default";
			Alter Table public.t_tender_hyyq add TechnicalDirectorName character varying(20) COLLATE pg_catalog."default";

			Alter Table public.t_tender_hyyq add PrincipalCode character varying(20) COLLATE pg_catalog."default";
			Alter Table public.t_tender_hyyq add PrincipalName character varying(20) COLLATE pg_catalog."default";

			Alter Table public.t_tender_hyyq add InternalAndExternal character varying(10) COLLATE pg_catalog."default";

			Alter Table public.t_tender_hyyq add BiddingPrice numeric(18,2) DEFAULT 0;
			Alter Table public.t_tender_hyyq add ControlPrice numeric(18,2) DEFAULT 0;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3345</ID>
    <SQLText>
			Update public.t_tender_hyyq set PMCode = '';
			Update public.t_tender_hyyq set PMName = '';
			Update public.t_tender_hyyq set TechnicalDirectorCode = '';
			Update public.t_tender_hyyq set TechnicalDirectorName = '';

			Update public.t_tender_hyyq set PrincipalCode = '';
			Update public.t_tender_hyyq set PrincipalName = '';
			Update public.t_tender_hyyq set InternalAndExternal = '';


			Update public.t_tender_hyyq set BiddingPrice = 0;
			Update public.t_tender_hyyq set ControlPrice = 0;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3346</ID>
    <SQLText>

			CREATE TABLE public.t_tender_content
			(
			tendercontent character varying(200) COLLATE pg_catalog."default",

			CONSTRAINT t_tender_content_pkey PRIMARY KEY (tendercontent)
			)
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3347</ID>
    <SQLText>alter table t_tender_hyyq alter COLUMN receivemargintime type character varying;</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3348</ID>
    <SQLText>
			CREATE TABLE t_tenderexpense ( expenseid bigserial NOT NULL, tenderid bigint,expensename character varying(200) COLLATE pg_catalog."default", expenseamount numeric(18,2), remarks text COLLATE pg_catalog."default", expensedate character varying(200) COLLATE pg_catalog."default", CONSTRAINT t_tenderexpense_pkey PRIMARY KEY (expenseid) )

		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3349</ID>
    <SQLText>
			CREATE OR REPLACE VIEW public.v_projectmembertaskdetailreport
			AS
			SELECT COALESCE(f.departcode, ''::bpchar) AS departcode,
			COALESCE(f.departname, ''::character varying) AS departname,
			COALESCE(e.usercode, ''::bpchar) AS usercode,
			COALESCE(e.username, ''::bpchar) AS username,
			CASE b.projectid
			WHEN 1 THEN NULL::bigint
			ELSE b.projectid
			END AS projectid,
			COALESCE(b.projectcode, ''::character varying) AS projectcode,
			COALESCE(b.projectname, ''::bpchar) AS projectname,
			COALESCE(cast(c.id as text), ''::text) AS planid,
			COALESCE(c.name, ''::character varying) AS planname,
			a.taskid,
			a.task AS taskname,
			c.start_date AS planbegintime,
			c.end_date AS planendtime,
			a.begindate AS taskbegindate,
			d.operationtime AS taskfirstoperatetime,
			a.enddate AS taskenddate,
			d.operationtime AS tasklastestoperatetime,
			a.status,
			f_getsumtasklog(a.taskid) AS tasklog,
			a.manhour,
			a.type AS tasktype
			FROM t_projecttask a
			LEFT JOIN t_project b ON a.projectid = b.projectid
			LEFT JOIN t_impleplan c ON a.planid = c.id AND (c.verid IN ( SELECT t_projectplanversion.verid
			FROM t_projectplanversion
			WHERE t_projectplanversion.type = '在用'::bpchar))
			LEFT JOIN t_taskassignrecord d ON a.taskid = d.taskid AND (d.id IN ( SELECT min(t_taskassignrecord.id) AS min
			FROM t_taskassignrecord
			GROUP BY t_taskassignrecord.taskid))
			LEFT JOIN t_projectmember e ON d.operatorcode = e.usercode
			LEFT JOIN t_department f ON e.departcode = f.departcode
			LEFT JOIN t_taskassignrecord g ON a.taskid = g.taskid AND (g.id IN ( SELECT min(t_taskassignrecord.id) AS min
			FROM t_taskassignrecord
			GROUP BY t_taskassignrecord.taskid))
			WHERE (a.planid IN ( SELECT t_impleplan.id AS planid
			FROM t_impleplan)) AND (a.projectid IN ( SELECT t_project.projectid
			FROM t_project));
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3350</ID>
    <SQLText>
			select setval('t_goods_id_seq',(select max(id) from t_goods));
			select setval('t_goodsadjustrecord_id_seq',(select max(id) from t_goodsadjustrecord));
			select setval('t_goodsapplication_aaid_seq',(select max(aaid) from t_goodsapplication));
			select setval('t_goodsapplicationdetail_id_seq',(select max(id) from t_goodsapplicationdetail));
			select setval('t_goodsborroworder_borrowno_seq',(select max(borrowno) from t_goodsborroworder));
			select setval('t_goodsborroworderdetail_id_seq',(select max(id) from t_goodsborroworderdetail));
			select setval('t_goodscheckinorder_checkinid_seq',(select max(checkinid) from t_goodscheckinorder));
			select setval('t_goodscheckinorderdetail_id_seq',(select max(id) from t_goodscheckinorderdetail));
			select setval('t_goodscheckoutnoticeorder_cooid_seq',(select max(cooid) from t_goodscheckoutnoticeorder));
			select setval('t_goodscheckoutnoticeorderdetail_id_seq',(select max(id) from t_goodscheckoutnoticeorderdetail));
			select setval('t_goodsdeliveryorder_doid_seq',(select max(doid) from t_goodsdeliveryorder));
			select setval('t_goodsdeliveryorderdetail_id_seq',(select max(id) from t_goodsdeliveryorderdetail));
			select setval('t_goodsmtrecord_id_seq',(select max(id) from t_goodsmtrecord));
			select setval('t_goodsproductionorder_pdid_seq',(select max(pdid) from t_goodsproductionorder));
			select setval('t_goodsproductionorderdetail_id_seq',(select max(id) from t_goodsproductionorderdetail));
			select setval('t_goodspurchaseorder_poid_seq',(select max(poid) from t_goodspurchaseorder));
			select setval('t_goodspurrecord_id_seq',(select max(id) from t_goodspurrecord));
			select setval('t_goodsreturndetail_id_seq',(select max(id) from t_goodsreturndetail));
			select setval('t_goodsreturnorder_roid_seq',(select max(roid) from t_goodsreturnorder));
			select setval('t_goodssaleorder_soid_seq',(select max(soid) from t_goodssaleorder));
			select setval('t_goodssalequotationorder_qoid_seq',(select max(qoid) from t_goodssalequotationorder));
			select setval('t_goodssalequotationorderdetail_id_seq',(select max(id) from t_goodssalequotationorderdetail));
			select setval('t_goodssalerecord_id_seq',(select max(id) from t_goodssalerecord));
			select setval('t_goodsscrape_id_seq',(select max(id) from t_goodsscrape));
			select setval('t_goodsshipmentdetail_id_seq',(select max(id) from t_goodsshipmentdetail));
			select setval('t_goodsshipmentorder_shipmentno_seq',(select max(shipmentno) from t_goodsshipmentorder));
			select setval('t_goodssupplyorder_suid_seq',(select max(suid) from t_goodssupplyorder));
			select setval('t_goodssupplyorderdetail_id_seq',(select max(id) from t_goodssupplyorderdetail));
			select setval('t_goodsuserrecord_id_seq',(select max(id) from t_goodsuserrecord));
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3351</ID>
    <SQLText>
			select setval('t_asset_id_seq',(select max(id) from t_asset));
			select setval('t_assetadjustrecord_id_seq',(select max(id) from t_assetadjustrecord));
			select setval('t_assetapplication_aaid_seq',(select max(aaid) from t_assetapplication));
			select setval('t_assetapplicationdetail_id_seq',(select max(id) from t_assetapplicationdetail));

			select setval('t_assetcheckinorder_checkinid_seq',(select max(checkinid) from t_assetcheckinorder));
			select setval('t_assetcheckinorderdetail_id_seq',(select max(id) from t_assetcheckinorderdetail));

			select setval('t_assetmtrecord_id_seq',(select max(id) from t_assetmtrecord));

			select setval('t_assetpurchaseorder_poid_seq',(select max(poid) from t_assetpurchaseorder));
			select setval('t_assetpurrecord_id_seq',(select max(id) from t_assetpurrecord));
			select setval('t_assetreturndetail_id_seq',(select max(id) from t_assetreturndetail));
			select setval('t_assetreturnorder_roid_seq',(select max(roid) from t_assetreturnorder));

			select setval('t_assetscrape_id_seq',(select max(id) from t_assetscrape));
			select setval('t_assetshipmentdetail_id_seq',(select max(id) from t_assetshipmentdetail));
			select setval('t_assetshipmentorder_shipmentno_seq',(select max(shipmentno) from t_assetshipmentorder));

			select setval('t_assetuserrecord_id_seq',(select max(id) from t_assetuserrecord));
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3352</ID>
    <SQLText>
			Alter Table t_constract Add ProvisionalAmount numeric default 0;
			Alter Table t_constract Add SafeCivilizedFee numeric default 0;
			Alter Table t_constract Add PartAConnectWay character varying(100) Default '';
			Alter Table t_constract Add PartBConnectWay character varying(100) Default '';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3353</ID>
    <SQLText>Update t_constract set ProvisionalAmount = 0,SafeCivilizedFee = 0,PartAConnectWay = '',PartBConnectWay = '';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3354</ID>
    <SQLText>
			CREATE TABLE public.T_ConstractPartC
			(
			partcid bigserial NOT NULL,
			constractid bigint NOT NULL,
			partcname character varying(200) COLLATE pg_catalog."default",
			contactname character varying(20) COLLATE pg_catalog."default",
			contactway character varying(100) COLLATE pg_catalog."default",
			CONSTRAINT T_ConstractPartC_pkey PRIMARY KEY (partcid)
			)
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3355</ID>
    <SQLText>
			CREATE TABLE public.t_ContractBasisDocument
			(
			docid bigint NOT NULL DEFAULT nextval('t_document_docid_seq'::regclass),
			constractcode character varying(50) COLLATE pg_catalog."default",
			doctype character(100) COLLATE pg_catalog."default",
			docname character varying(200) COLLATE pg_catalog."default",
			address character varying(500) COLLATE pg_catalog."default",
			uploadmancode character(20) COLLATE pg_catalog."default",
			uploadmanname character(20) COLLATE pg_catalog."default",
			uploadtime timestamp without time zone,

			CONSTRAINT t_ContractBasisDocument_pkey PRIMARY KEY (docid)
			)
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3356</ID>
    <SQLText>Update T_Constract Set MainContent = ''  Where Length(MainContent) &gt; 100</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3357</ID>
    <SQLText>
			Update  t_goodsapplication set status = '处理中' Where Status = '审批中';
			Update  t_goodsborroworder set status = '处理中' Where Status = '审批中';

			Update  t_goodscheckoutnoticeorder set status = '处理中' Where Status = '审批中';

			Update  t_goodsdeliveryorder set status = '处理中' Where Status = '审批中';
			Update  t_goodsproductionorder set status = '处理中' Where Status = '审批中';
			Update  t_goodspurchaseorder set status = '处理中' Where Status = '审批中';
			Update  t_goodsreturnorder set status = '处理中' Where Status = '审批中';

			Update  t_goodssaleorder set status = '处理中' Where Status = '审批中';
			Update  t_goodssalequotationorder set status = '处理中' Where Status = '审批中';
			Update  t_goodspurchaseorder set status = '处理中' Where Status = '审批中';


			Update  t_goodssupplyorder set status = '处理中' Where Status = '审批中';

			Update  t_assetapplication set status = '处理中' Where Status = '审批中';

			Update  t_assetpurchaseorder set status = '处理中' Where Status = '审批中';

			Update  t_assetapplication set status = '处理中' Where Status = '审批中';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3358</ID>
    <SQLText>
			Update T_WorkFlow Set Status = '处理中' Where Status = '活动';
			Update T_WorkFlowBackup Set Status = '处理中' Where Status = '活动';

			Update t_workflowstep Set Status = '处理中' Where Status = '活动';
			Update t_workflowstepbackup Set Status = '处理中' Where Status = '活动';

			Update t_workflowstepdetail Set Status = '处理中' Where Status = '活动';
			Update t_workflowstepdetailbackup Set Status = '处理中' Where Status = '活动';

			Update t_wlstatus Set Status = '处理中' Where Status = '活动';

			Update t_projectstatus Set Status = '处理中' Where Status ='活动';
			Update t_reqstatus Set Status = '处理中' Where Status = '活动';

			Update t_taskstatus Set Status = '处理中' Where Status = '活动';

			Update t_planstatus Set Status = '处理中' Where Status ='活动';
			Update t_otherstatus Set Status = '处理中' Where Status = '活动';
			Update t_teststatus Set Status = '处理中' Where Status = '活动';

			Update t_planstatus Set Status = '处理中' Where Status = '活动';
			Update t_otherstatus Set Status = '处理中' Where Status = '活动';
			Update t_teststatus Set Status = '处理中' Where Status = '活动';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3359</ID>
    <SQLText>
			Update t_wlstatus Set HomeName = '处理中' Where HomeName in ('活动','进行中');

			Update t_projectstatus Set HomeName = '处理中' Where HomeName in ('活动','进行中');
			Update t_reqstatus Set HomeName = '处理中' Where HomeName in ('活动','进行中');

			Update t_taskstatus Set HomeName = '处理中' Where HomeName in ('活动','进行中');

			Update t_planstatus Set HomeName = '处理中' Where HomeName in ('活动','进行中');
			Update t_otherstatus Set HomeName = '处理中' Where HomeName in ('活动','进行中');
			Update t_teststatus Set HomeName = '处理中' Where HomeName in ('活动','进行中');

			Update t_planstatus Set HomeName = '处理中' Where HomeName in ('活动','进行中');
			Update t_otherstatus Set HomeName = '处理中' Where HomeName in ('活动','进行中');
			Update t_teststatus Set HomeName = '处理中' Where HomeName in ('活动','进行中');
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3360</ID>
    <SQLText>
			Update t_project Set Status = '处理中' Where Status = '活动';
			Update t_requirement Set Status = '处理中' Where Status = '活动';
			Update t_defectment Set Status = '处理中' Where Status ='活动';
			Update t_projecttask Set Status = '处理中' Where Status = '活动';
			Update t_impleplan Set Status = '处理中' Where Status = '活动';
			Update t_plan Set Status = '处理中' Where Status = '活动';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3361</ID>
    <SQLText>
			CREATE OR REPLACE FUNCTION public."Func_TG_InsertWLStepByStatus"()
			RETURNS trigger
			LANGUAGE 'plpgsql'
			COST 100
			VOLATILE NOT LEAKPROOF
			AS $BODY$
			declare intCount bigint;
			declare chrNewStatus char(10);

			begin

			--if(old.Status &lt;&gt; new.Status)

			IF  (TG_OP='UPDATE') THEN

			if NEW.Status &lt;&gt; Old.Status then

			select rtrim(ltrim(Status)) into chrNewStatus from T_WorkFlow  Where WLID = NEW.WLID ;

			select Count(*) into intCount From T_WorkFlowStep Where WLID = new.WLID ;

			if( intCount = 0 and chrNewStatus = '处理中') then
			insert into T_WorkFlowStep(WLID,SortNumber,StepName,LimitedOperator,LimitedTime,DepartRelated,Status)
			select new.WLID,SortNumber,StepName,LimitedOperator,LimitedTime,DepartRelated, '新建'
			from T_WorkFlowTStep where TemName = new.TemName and SortNumber = 1 ;


			Update T_WorkFlowStep set Status = '处理中',ActiveTime = now() where SortNumber = 1 and WLID = new.WLID;

			end if;

			end if;

			END IF;
			return new;

			end
			$BODY$;

			ALTER FUNCTION public."Func_TG_InsertWLStepByStatus"()
			OWNER TO postgres;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3362</ID>
    <SQLText>
			CREATE OR REPLACE FUNCTION public."Func_TG_InsertWLStepDetail"()
			RETURNS trigger
			LANGUAGE 'plpgsql'
			COST 100
			VOLATILE NOT LEAKPROOF
			AS $BODY$
			declare intStepID bigint;
			declare intSortNumber bigint;
			declare intWLID bigint;
			declare chrTemName varchar(50);
			declare chrCreatorCode varchar(20);
			declare chrCreatorName varchar(20);
			declare chrCreatorDepartCode varchar(20);
			declare chrDepartRelated char(10);
			declare intDepartRelatedLevelNumber bigint;
			declare chrPartTimeReview char(10);
			declare chrSMSSend varchar(1000);
			declare chrMailSend varchar(1000);
			declare chrOperatorSelect char(10);
			declare chrPriorOperatorSelect char(10);
			declare chrIsSelect char(10);
			declare chrProjectRelated char(10);
			declare intProjectID bigint;

			declare chrRelatedType char(20);
			declare intRelatedID bigint;

			declare chrSelfReview char(10);

			declare chrAdminEMail varchar(200);
			declare intFolderID bigint;

			Begin

			select  EMail into chrAdminEMail From T_ProjectMember Where UserCode = 'ADMIN';
			select FolderID into intFolderID From T_MailFolder Where OwnerCode = 'ADMIN' and KeyWord = 'Waiting';

			select StepID,SortNumber,WLID,rtrim(DepartRelated) into intStepID,intSortNumber,intWLID,chrDepartRelated  from T_WorkFlowStep Where StepID = new.StepID;

			select CreatorCode,CreatorName,RelatedType,RelatedID into chrCreatorCode,chrCreatorName,chrRelatedType,intRelatedID from T_WorkFlow where WLID = new.WLID;

			select rtrim(DepartCode) into chrCreatorDepartCode  from T_ProjectMember where UserCode = chrCreatorCode;

			select TemName into chrTemName from T_WorkFlow where WLID = intWLID;

			--select @chrSMSSend = rtrim(ltrim(ReceiveSMS)) from T_WorkFlow where WLID = @intWLID

			select rtrim(SelfReview) into chrSelfReview from T_WorkFlowTStep where SortNumber = intSortNumber and TemName = chrTemName;
			select rtrim(OperatorSelect) into chrOperatorSelect  from T_WorkFlowTStep where SortNumber = @intSortNumber and TemName = chrTemName;
			select rtrim(IsPriorStepSelect) into chrPriorOperatorSelect from T_WorkFlowTStep where SortNumber = intSortNumber and TemName = chrTemName;

			select rtrim(PartTimeReview) into chrPartTimeReview  from T_WorkFlowTStep where SortNumber = intSortNumber and TemName = chrTemName;
			select rtrim(ProjectRelated) into chrProjectRelated from T_WorkFlowTStep where SortNumber = intSortNumber and TemName = chrTemName;
			select DepartRelatedLevelNumber into intDepartRelatedLevelNumber  from T_WorkFlowTStep where SortNumber = intSortNumber and TemName = chrTemName;

			select rtrim(SendSMS) into chrSMSSend  from T_WorkFlowTStep where SortNumber = intSortNumber and TemName = chrTemName;
			select rtrim(SendEMail) into chrMailSend  from T_WorkFlowTStep where SortNumber = intSortNumber and TemName = chrTemName;
			select '"ADMIN"' || '&amp;amp;amp;lt;' || chrMailSend || '&amp;amp;amp;gt;' into chrMailSend;

			----------以下中文短语和语句都不能改，信息发送时要进行其它语言的替换，以实现多语言功能，改了就可能替换不了---------

			--如果此步骤项目相关，则取得相关的项目号-------------------------------------------
			if(chrProjectRelated = 'YES')  Then

			if(chrRelatedType = '项目')   Then

			select   intRelatedID into intProjectID ;

			End If;

			if(chrRelatedType = '需求')   Then

			Select ProjectID into intProjectID  From T_RelatedReq Where ReqID = intRelatedID;

			End If;

			if(chrRelatedType = '缺陷')   Then

			Select ProjectID into intProjectID  From T_RelatedDefect Where DefectID = intRelatedID;

			End If;

			if(chrRelatedType = '计划')  Then

			Select iProjectID into intProjectID From T_ImplePlan Where ID = intRelatedID;

			End If;

			if(chrRelatedType = '任务')   Then

			Select ProjectID into intProjectID From T_ProjectTask Where TaskID = intRelatedID;

			End If;

			if(chrRelatedType = '风险')  Then

			Select ProjectID into intProjectID From T_ProjectRisk Where ID = intRelatedID;

			End If;

			End If;

			--如果申请者或前步审批者自选下一步审批者
			If(chrOperatorSelect = 'YES' or chrPriorOperatorSelect = 'YES')
			Then
			select  'NO' into chrIsSelect ;

			Else

			select  'YES' into chrIsSelect ;

			End If;

			if(chrSelfReview = 'YES')
			Then

			insert into T_WorkFlowStepDetail(StepID,WLID,OperatorCode,OperatorName,Actor,WorkDetail,FinishedTime,Requisite,FieldList,AllowFullEdit,EditFieldList,CanNotNullFieldList,SignPictureField,IsOperator,ManHour,Expense,Status)
			select intStepID,intWLID,chrCreatorCode,chrCreatorName,'主办者','发起人自审',1,'YES',A.FieldList,A.AllowFullEdit,A.EditFieldList,A.CanNotNullFieldList,A.SignPictureField, chrIsSelect,0,0,'处理中'
			from T_WorkFlowTStepOperator A,T_WorkFlowTStep B
			where A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber;

			raise notice '1';

			If(chrSMSSend = 'YES' )
			Then

			insert into Sms_Send(UserCode,Mobile,Msg,UserRTXCode)
			SELECT chrCreatorCode,MobilePhone,'通知：你好，你有工作，内容：自审 ，请及时登录管理平台打开工作流模块进行处理，此信息来自：系统管理员！',coalesce(UserRTXCode,'')
			from T_ProjectMember
			where UserCode = chrCreatorCode;
			End If;

			If(chrMailSend = 'YES' )
			Then
			insert into T_Mail(Title,Body,FromAddress,ToAddress,CCAddress,HTMLFormat,SenderDate,contain,AttachmentFlag,ReaderFlag,FolderID,UserCode)
			select '审批通知','通知：你好，你有工作，内容：自审，请及时登录管理平台打开工作流模块进行处理，此信息来自：系统管理员！',
			chrAdminEMail,EMail,'',1,getdate(),100,0,0,intFolderID,'ADMIN'
			from T_ProjectMember
			where UserCode = chrCreatorCode;
			End If;

			Else

			If(chrDepartRelated = 'NO' )
			Then

			if(chrProjectRelated = 'NO')
			Then
			insert into T_WorkFlowStepDetail(StepID,WLID,OperatorCode,OperatorName,Actor,WorkDetail,FinishedTime,Requisite,FieldList,AllowFullEdit,EditFieldList,CanNotNullFieldList,SignPictureField, IsOperator,ManHour,Expense,Status)
			select intStepID,intWLID,C.UserCode,C.UserName,A.Actor,A.WorkDetail,A.LimitedTime,A.Requisite,A.FieldList,A.AllowFullEdit,A.EditFieldList,A.CanNotNullFieldList,A.SignPictureField,chrIsSelect,0,0,'处理中'
			from T_ActorGroupDetail C,T_WorkFlowTStepOperator A,T_WorkFlowTStep B
			where C.GroupName = A.ActorGroup and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber;

			raise notice '2';

			If(chrSMSSend = 'YES' and chrOperatorSelect = 'NO')
			Then
			insert into Sms_Send(UserCode,Mobile,Msg,UserRTXCode)
			SELECT D.UserCode, D.MobilePhone,'通知：你好，你有工作，内容： ' || A.WorkDetail || '，请及时登录管理平台打开工作流模块进行处理，此信息来自：系统管理员！',coalesce(D.UserRTXCode,'')
			from T_ActorGroupDetail C,T_WorkFlowTStepOperator A,T_WorkFlowTStep B,T_ProjectMember D
			where C.GroupName = A.ActorGroup and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and C.UserCode = D.UserCode;
			End If;

			If(chrMailSend = 'YES' and chrOperatorSelect = 'NO')
			Then
			insert into T_Mail(Title,Body,FromAddress,ToAddress,CCAddress,HTMLFormat,SenderDate,contain,AttachmentFlag,ReaderFlag,FolderID,UserCode)
			select '审批通知','通知：你好，你有工作，内容： ' || A.WorkDetail || '，请及时登录管理平台打开工作流模块进行处理，此信息来自：系统管理员！',
			chrAdminEMail,D.EMail,'',1,getdate(),100,0,0,intFolderID,'ADMIN'
			from T_ActorGroupDetail C,T_WorkFlowTStepOperator A,T_WorkFlowTStep B,T_ProjectMember D
			where C.GroupName = A.ActorGroup and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and C.UserCode = D.UserCode;
			End If;

			Else

			insert into T_WorkFlowStepDetail(StepID,WLID,OperatorCode,OperatorName,Actor,WorkDetail,FinishedTime,Requisite,FieldList,AllowFullEdit,EditFieldList,CanNotNullFieldList,SignPictureField,IsOperator,ManHour,Expense,Status)
			select intStepID,intWLID,C.UserCode,C.UserName,A.Actor,A.WorkDetail,A.LimitedTime,A.Requisite,A.FieldList,A.AllowFullEdit,A.EditFieldList,A.CanNotNullFieldList,A.SignPictureField, chrIsSelect,0,0,'处理中'
			from T_ActorGroupDetail C,T_RelatedUser D, T_WorkFlowTStepOperator A,T_WorkFlowTStep B
			where C.GroupName = A.ActorGroup and C.UserCode = D.UserCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber  and D.ProjectID = intProjectID;

			raise notice '3';

			If(chrSMSSend = 'YES' and chrOperatorSelect = 'NO')
			Then
			insert into Sms_Send(UserCode,Mobile,Msg,UserRTXCode)
			SELECT D.UserCode, D.MobilePhone,'通知：你好，你有工作，内容： ' || A.WorkDetail || '，请及时登录管理平台打开工作流模块进行处理，此信息来自：系统管理员！',coalesce(D.UserRTXCode,'')
			from T_ActorGroupDetail C,T_RelatedUser E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B,T_ProjectMember D
			where C.GroupName = A.ActorGroup and C.UserCode = E.UserCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and C.UserCode = D.UserCode and E.ProjectID = intRelatedID;
			End If;

			If(chrMailSend = 'YES' and chrOperatorSelect = 'NO')
			Then
			insert into T_Mail(Title,Body,FromAddress,ToAddress,CCAddress,HTMLFormat,SenderDate,contain,AttachmentFlag,ReaderFlag,FolderID,UserCode)
			select '审批通知','通知：你好，你有工作，内容： ' || A.WorkDetail || '，请及时登录管理平台打开工作流模块进行处理，此信息来自：系统管理员！',
			chrAdminEMail,D.EMail,'',1,getdate(),100,0,0,intFolderID,'ADMIN'
			from T_ActorGroupDetail C,T_RelatedUser E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B,T_ProjectMember D
			where C.GroupName = A.ActorGroup and C.UserCode = E.UserCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and C.UserCode = D.UserCode and E.ProjectID = intRelatedID;
			End If;

			End If;

			Else

			if(chrPartTimeReview = 'YES')
			Then

			if(chrProjectRelated = 'NO')
			Then

			insert into T_WorkFlowStepDetail(StepID,WLID,OperatorCode,OperatorName,WorkDetail,Actor,FinishedTime,Requisite,FieldList,AllowFullEdit,EditFieldList,CanNotNullFieldList,SignPictureField, IsOperator,ManHour,Expense,Status)
			select intStepID,intWLID,C.UserCode,C.UserName,A.WorkDetail,A.Actor,A.LimitedTime,A.Requisite,A.FieldList,A.AllowFullEdit,A.EditFieldList,A.CanNotNullFieldList,A.SignPictureField, chrIsSelect,0,0,'处理中'
			from T_ActorGroupDetail C,T_ProjectMember D,T_Department E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B
			where C.GroupName = A.ActorGroup and C.UserCode = D.UserCode and D.DepartCode = E.DepartCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and (( D.DepartCode = chrCreatorDepartCode ) or (D.DepartCode in (select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber))
			or ( C.UserCode in ( Select UserCode From T_PartTimeJob Where DepartCode in ( select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber))));

			raise notice '4';

			If(chrSMSSend = 'YES' and chrOperatorSelect = 'NO')
			Then
			insert into Sms_Send(UserCode,Mobile,Msg,UserRTXCode)
			SELECT F.UserCode, F.MobilePhone,'通知：你好，你有工作，内容： ' || A.WorkDetail || '，请及时登录管理平台打开工作流模块进行处理，此信息来自：系统管理员！',coalesce(F.UserRTXCode,'')
			from T_ActorGroupDetail C,T_ProjectMember D,T_Department E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B,T_ProjectMember F
			where C.GroupName = A.ActorGroup and C.UserCode = D.UserCode and D.DepartCode = E.DepartCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and (( D.DepartCode = chrCreatorDepartCode ) or (D.DepartCode in (select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber))
			or ( C.UserCode in ( Select UserCode From T_PartTimeJob Where DepartCode in ( select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber))))
			and C.UserCode = F.UserCode;

			End If;

			If(chrMailSend = 'YES' and chrOperatorSelect = 'NO')
			Then
			insert into T_Mail(Title,Body,FromAddress,ToAddress,CCAddress,HTMLFormat,SenderDate,contain,AttachmentFlag,ReaderFlag,FolderID,UserCode)
			select '审批通知','通知：你好，你有工作，内容： ' || A.WorkDetail || '，请及时登录管理平台打开工作流模块进行处理，此信息来自：系统管理员！',
			chrAdminEMail,D.EMail,'',1,getdate(),100,0,0,intFolderID,'ADMIN'
			from T_ActorGroupDetail C,T_ProjectMember D,T_Department E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B,T_ProjectMember F
			where C.GroupName = A.ActorGroup and C.UserCode = D.UserCode and D.DepartCode = E.DepartCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and (( D.DepartCode = chrCreatorDepartCode ) or (D.DepartCode in (select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber))
			or ( C.UserCode in ( Select UserCode From T_PartTimeJob Where DepartCode in ( select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber))))
			and C.UserCode = F.UserCode;
			End If;

			Else

			insert into T_WorkFlowStepDetail(StepID,WLID,OperatorCode,OperatorName,WorkDetail,Actor,FinishedTime,Requisite,FieldList,AllowFullEdit,EditFieldList,CanNotNullFieldList,SignPictureField, IsOperator,ManHour,Expense,Status)
			select intStepID,intWLID,C.UserCode,C.UserName,A.WorkDetail,A.Actor,A.LimitedTime,A.Requisite,A.FieldList,A.AllowFullEdit,A.EditFieldList,A.CanNotNullFieldList,A.SignPictureField, chrIsSelect,0,0,'处理中'
			from T_ActorGroupDetail C,T_RelatedUser F,T_ProjectMember D,T_Department E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B
			where C.GroupName = A.ActorGroup and C.UserCode = F.UserCode and  C.UserCode = D.UserCode and D.DepartCode = E.DepartCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and F.ProjectID = intProjectID and (( D.DepartCode = chrCreatorDepartCode ) or (D.DepartCode in (select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber))
			or ( C.UserCode in ( Select UserCode From T_PartTimeJob Where DepartCode in ( select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber))));

			raise notice '5';

			If(chrSMSSend = 'YES' and chrOperatorSelect = 'NO')
			Then
			insert into Sms_Send(UserCode,Mobile,Msg,UserRTXCode)
			SELECT F.UserCode, F.MobilePhone,'通知：你好，你有工作，内容： ' || A.WorkDetail || '，请及时登录管理平台打开工作流模块进行处理，此信息来自：系统管理员！',coalesce(F.UserRTXCode,'')
			from T_ActorGroupDetail C,T_RelatedUser G,T_ProjectMember D,T_Department E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B,T_ProjectMember F
			where C.GroupName = A.ActorGroup and C.UserCode = G.UserCode and C.UserCode = D.UserCode and D.DepartCode = E.DepartCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and G.ProjectID = intRelatedID and (( D.DepartCode = chrCreatorDepartCode ) or (D.DepartCode in (select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber))
			or ( C.UserCode in ( Select UserCode From T_PartTimeJob Where DepartCode in ( select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber))))
			and C.UserCode = F.UserCode;
			End If;

			If(chrMailSend = 'YES' and chrOperatorSelect = 'NO')
			Then
			insert into T_Mail(Title,Body,FromAddress,ToAddress,CCAddress,HTMLFormat,SenderDate,contain,AttachmentFlag,ReaderFlag,FolderID,UserCode)
			select '审批通知','通知：你好，你有工作，内容： ' || A.WorkDetail || '，请及时登录管理平台打开工作流模块进行处理，此信息来自：系统管理员！',
			chrAdminEMail,D.EMail,'',1,getdate(),100,0,0,intFolderID,'ADMIN'
			from T_ActorGroupDetail C,T_RelatedUser G,T_ProjectMember D,T_Department E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B,T_ProjectMember F
			where C.GroupName = A.ActorGroup and C.UserCode = G.UserCode and C.UserCode = D.UserCode and D.DepartCode = E.DepartCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and G.ProjectID = intRelatedID and (( D.DepartCode = chrCreatorDepartCode ) or (D.DepartCode in (select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber))
			or ( C.UserCode in ( Select UserCode From T_PartTimeJob Where DepartCode in ( select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber))))
			and C.UserCode = F.UserCode;
			End If;

			End If;

			Else

			if(chrProjectRelated = 'NO')
			Then

			insert into T_WorkFlowStepDetail(StepID,WLID,OperatorCode,OperatorName,WorkDetail,Actor,FinishedTime,Requisite,FieldList,AllowFullEdit,EditFieldList,CanNotNullFieldList,SignPictureField,IsOperator,ManHour,Expense,Status)
			select intStepID,intWLID,C.UserCode,C.UserName,A.WorkDetail,A.Actor,A.LimitedTime,A.Requisite,A.FieldList,A.AllowFullEdit,A.EditFieldList,A.CanNotNullFieldList,A.SignPictureField,chrIsSelect,0,0,'处理中'
			from T_ActorGroupDetail C,T_ProjectMember D,T_Department E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B
			where C.GroupName = A.ActorGroup and C.UserCode = D.UserCode and D.DepartCode = E.DepartCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and (( D.DepartCode = chrCreatorDepartCode ) or (D.DepartCode in (select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber)));

			raise notice '6';

			If(chrSMSSend = 'YES' and chrOperatorSelect = 'NO')
			Then
			insert into Sms_Send(UserCode,Mobile,Msg,UserRTXCode)
			SELECT F.UserCode, F.MobilePhone,'通知：你好，你有工作，内容： ' || A.WorkDetail ||  '，请及时登录管理平台打开工作流模块进行处理，此信息来自：系统管理员！',coalesce(F.UserRTXCode,'')
			from T_ActorGroupDetail C,T_ProjectMember D,T_Department E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B,T_ProjectMember F
			where C.GroupName = A.ActorGroup and C.UserCode = D.UserCode and D.DepartCode = E.DepartCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and (( D.DepartCode = chrCreatorDepartCode ) or (D.DepartCode in (select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber)))
			and C.UserCode = F.UserCode;
			End If;

			If(chrMailSend = 'YES' and chrOperatorSelect = 'NO')
			Then
			insert into T_Mail(Title,Body,FromAddress,ToAddress,CCAddress,HTMLFormat,SenderDate,contain,AttachmentFlag,ReaderFlag,FolderID,UserCode)
			select '审批通知','通知：你好，你有工作，内容： ' || A.WorkDetail || '，请及时登录管理平台打开工作流模块进行处理，此信息来自：系统管理员！',
			chrAdminEMail,D.EMail,'',1,getdate(),100,0,0,intFolderID,'ADMIN'
			from T_ActorGroupDetail C,T_ProjectMember D,T_Department E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B,T_ProjectMember F
			where C.GroupName = A.ActorGroup and C.UserCode = D.UserCode and D.DepartCode = E.DepartCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and (( D.DepartCode = chrCreatorDepartCode ) or (D.DepartCode in (select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber)))
			and C.UserCode = F.UserCode;
			End If;

			Else

			insert into T_WorkFlowStepDetail(StepID,WLID,OperatorCode,OperatorName,WorkDetail,Actor,FinishedTime,Requisite,FieldList,AllowFullEdit,EditFieldList,CanNotNullFieldList,SignPictureField,IsOperator,ManHour,Expense,Status)
			select intStepID,intWLID,C.UserCode,C.UserName,A.WorkDetail,A.Actor,A.LimitedTime,A.Requisite,A.FieldList,A.AllowFullEdit,A.EditFieldList,A.CanNotNullFieldList,A.SignPictureField,chrIsSelect,0,0,'处理中'
			from T_ActorGroupDetail C,T_RelatedUser F,T_ProjectMember D,T_Department E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B
			where C.GroupName = A.ActorGroup and C.UserCode = F.UserCode and C.UserCode = D.UserCode and D.DepartCode = E.DepartCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and F.ProjectID = intProjectID and (( D.DepartCode = chrCreatorDepartCode ) or (D.DepartCode in (select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber)));

			raise notice 'intStepID: %,intWLID: %,chrTemName: %, intSortNumber: %,chrCreatorDepartCode:%,intDepartRelatedLevelNumber:%',cast(intStepID as char(8)),intWLID,chrTemName,intSortNumber,chrCreatorDepartCode,intDepartRelatedLevelNumber;

			If(chrSMSSend = 'YES' and chrOperatorSelect = 'NO')
			Then
			insert into Sms_Send(UserCode,Mobile,Msg,UserRTXCode)
			SELECT F.UserCode, F.MobilePhone,'通知：你好，你有工作，内容： ' || A.WorkDetail || '，请及时登录管理平台打开工作流模块进行处理，此信息来自：系统管理员！',coalesce(F.UserRTXCode,'')
			from T_ActorGroupDetail C,T_RelatedUser G,T_ProjectMember D,T_Department E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B,T_ProjectMember F
			where C.GroupName = A.ActorGroup and C.UserCode = G.UserCode and C.UserCode = D.UserCode and D.DepartCode = E.DepartCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and (( D.DepartCode = chrCreatorDepartCode ) or (D.DepartCode in (select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber)))
			and C.UserCode = F.UserCode and G.ProjectID = intRelatedID;
			End If;

			If(chrMailSend = 'YES' and chrOperatorSelect = 'NO')
			Then
			insert into T_Mail(Title,Body,FromAddress,ToAddress,CCAddress,HTMLFormat,SenderDate,contain,AttachmentFlag,ReaderFlag,FolderID,UserCode)
			select '审批通知','通知：你好，你有工作，内容： ' || A.WorkDetail || '，请及时登录管理平台打开工作流模块进行处理，此信息来自：系统管理员！',
			chrAdminEMail,D.EMail,'',1,getdate(),100,0,0,intFolderID,'ADMIN'
			from T_ActorGroupDetail C,T_RelatedUser G,T_ProjectMember D,T_Department E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B,T_ProjectMember F
			where C.GroupName = A.ActorGroup and C.UserCode = G.UserCode and C.UserCode = D.UserCode and D.DepartCode = E.DepartCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and (( D.DepartCode = chrCreatorDepartCode ) or (D.DepartCode in (select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber)))
			and C.UserCode = F.UserCode and G.ProjectID = intRelatedID;
			End If;
			End If;

			End If;
			End If;

			End If;
			return new;
			end
			$BODY$;

			ALTER FUNCTION public."Func_TG_InsertWLStepDetail"()
			OWNER TO postgres;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3363</ID>
    <SQLText>Update t_workflowstepdetail Set Status = '处理中' Where Status = '活动';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3364</ID>
    <SQLText>
			Update T_Leaveapplyform set Status = '处理中' Where Status = '审批中';
			Update t_overtimeapplyform set Status = '处理中' Where Status = '审批中';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3365</ID>
    <SQLText>Update t_funinfordialbox set sqlcode = replace(sqlcode,'活动','处理中')</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3366</ID>
    <SQLText>
			Delete from t_workflowtsteprelatedmodule
			Where ID in (Select Max(ID) from t_workflowtsteprelatedmodule Group By StepGuid,modulename);
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3367</ID>
    <SQLText>
			delete from t_workflowtsteprelatedmodule
			Where ID in (Select Max(A.ID) from t_workflowtsteprelatedmodule A,t_workflowtsteprelatedmodule B
			Where A.StepGuid = B.StepGuid and A.ModuleName = B.ModuleName and A.ID &lt;&gt; B.ID)
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3368</ID>
    <SQLText>
			Delete From T_WorkFlowStepDetail Where WLID Not IN (Select  WLID From T_WorkFlowStepDetail Where OPeratorCode = 'C7094' LIMIT 5)
			AND OperatorCode = 'C7094'
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3369</ID>
    <SQLText>
			select setval('t_defectment_defectid_seq',(select max(defectid) from t_defectment));
			select setval('t_defectassignrecord_id_seq',(select max(id) from t_defectassignrecord));

			select setval('t_requirement_reqid_seq',(select max(reqid) from t_requirement));
			select setval('t_reqassignrecord_id_seq',(select max(id) from t_reqassignrecord));

			select setval('t_projecttask_taskid_seq',(select max(taskid) from t_projecttask));
			select setval('t_taskassignrecord_id_seq',(select max(id) from t_taskassignrecord));
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3370</ID>
    <SQLText>Update T_ProModuleLevel Set IconURL = 'ImagesSkin/renwuzhixingchaxun.png' Where ModuleName = '任务执行查询'</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3371</ID>
    <SQLText>
			Update T_ProModuleLevel Set IconURL = 'ImagesSkin/wodezhuye.png' Where ModuleName = '我的主页';
			Update T_ProModuleLevel Set IconURL = 'ImagesSkin/wodericheng.png' Where ModuleName = '我的日程';
			Update T_ProModuleLevel Set IconURL = 'ImagesSkin/wodexiezuo.png' Where ModuleName = '我的协作';
			Update T_ProModuleLevel Set IconURL = 'ImagesSkin/wodexuqiu.png' Where ModuleName = '我的需求';

			Update T_ProModuleLevel Set IconURL = 'ImagesSkin/wodedangan.png' Where ModuleName = '我的档案';
			Update T_ProModuleLevel Set IconURL = 'ImagesSkin/wodekefu.png' Where ModuleName = '我的客服';
			Update T_ProModuleLevel Set IconURL = 'ImagesSkin/wodeliucheng.png' Where ModuleName = '我的流程';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3372</ID>
    <SQLText>Update T_ProModuleLevel Set IconURL = 'ImagesSkin/woderenwu.png' Where ModuleName = '我的任务'</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3373</ID>
    <SQLText>Update T_ProModuleLevel Set IconURL = 'ImagesSkin/KPIAPP.png' Where PageName = 'TTAPPKPIManagement.aspx'</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3374</ID>
    <SQLText>
			CREATE TABLE IF NOT EXISTS public.t_promodulelevelforpageuser
			(
			id bigserial NOT NULL,
			modulename character(100) COLLATE pg_catalog."default" ,
			usercode character(20) COLLATE pg_catalog."default" ,
			usertype character(10) COLLATE pg_catalog."default" ,
			visible character(10) COLLATE pg_catalog."default",
			sortnumber bigint,
			CONSTRAINT t_promodulelevelforpageuser_pkey PRIMARY KEY (id)
			)
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3375</ID>
    <SQLText>
			Delete From t_promodulelevelforpage Where PageName = 'TTPersonalSpaceMyMonthSchedule.aspx';
			Update t_promodulelevelforpage Set PageName = 'TTPersonalSpaceProjectForOuter.aspx'
			Where modulename = '我的项目' and parentModule = '个人空间外部';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3376</ID>
    <SQLText>
			Update t_funinfordialbox Set linkaddress = 'TTTaskHandlePage.aspx' where inforname = '待处理的任务';
			Update t_funinfordialbox Set linkaddress = 'TTReqHandlePage.aspx' where inforname = '待处理的需求';
			Update t_funinfordialbox Set linkaddress = 'TTDefectHandlePage.aspx' where inforname = '待处理的缺陷';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3377</ID>
    <SQLText>Update T_ProModuleLevel set PageName = 'TTProjectManageOuter.aspx' Where ModuleName = '项目管理' and UserType = 'OUTER'</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3378</ID>
    <SQLText>
			Alter Table t_constract Add Column TaxRate13 numeric(18,2) DEFAULT 0;
			Alter Table t_constract Add Column TaxRate9 numeric(18,2) DEFAULT 0;
			Alter Table t_constract Add Column TaxRate6 numeric(18,2) DEFAULT 0;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3379</ID>
    <SQLText>
			Alter Table t_constract Add Column Part1 character varying(100) default '';
			Alter Table t_constract Add Column Part2 character varying(100) default '';
			Alter Table t_constract Add Column Part3 character varying(100) default '';
			Alter Table t_constract Add Column Part4 character varying(100) default '';
			Alter Table t_constract Add Column Part5 character varying(100) default '';
			Alter Table t_constract Add Column Part6 character varying(100) default '';
			Alter Table t_constract Add Column Part7 character varying(100) default '';
			Alter Table t_constract Add Column Part8 character varying(100) default '';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3380</ID>
    <SQLText>
			UPdate t_constract Set TaxRate13 = 0,TaxRate9 = 0,TaxRate6 = 0;
			Update t_constract Set Part1 = '',Part2 = '',Part3 = '',Part4 = '',Part5 = '',Part6= '',Part7='',Part8='';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3381</ID>
    <SQLText>
			Alter Table t_constract Add Column Part1Operator character varying(100) default '';
			Alter Table t_constract Add Column Part1ConnectWay character varying(100) default '';
			Alter Table t_constract Add Column Part2Operator character varying(100) default '';
			Alter Table t_constract Add Column Part2ConnectWay character varying(100) default '';
			Alter Table t_constract Add Column Part3Operator character varying(100) default '';
			Alter Table t_constract Add Column Part3ConnectWay character varying(100) default '';
			Alter Table t_constract Add Column Part4Operator character varying(100) default '';
			Alter Table t_constract Add Column Part4ConnectWay character varying(100) default '';
			Alter Table t_constract Add Column Part5Operator character varying(100) default '';
			Alter Table t_constract Add Column Part5ConnectWay character varying(100) default '';
			Alter Table t_constract Add Column Part6Operator character varying(100) default '';
			Alter Table t_constract Add Column Part6ConnectWay character varying(100) default '';
			Alter Table t_constract Add Column Part7Operator character varying(100) default '';
			Alter Table t_constract Add Column Part7ConnectWay character varying(100) default '';
			Alter Table t_constract Add Column Part8Operator character varying(100) default '';
			Alter Table t_constract Add Column Part8ConnectWay character varying(100) default '';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3382</ID>
    <SQLText>
			Update t_constract Set Part1Operator = '',Part2Operator = '',Part3Operator = '',Part4Operator = '',Part5Operator = '',Part6Operator= '',Part7Operator='',Part8Operator='';
			Update t_constract Set Part1ConnectWay = '',Part2ConnectWay = '',Part3ConnectWay = '',Part4ConnectWay = '',Part5ConnectWay = '',Part6ConnectWay= '',Part7ConnectWay='',Part8ConnectWay='';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3383</ID>
    <SQLText>
			Alter Table t_constract Add Column TaxRate13Amount numeric(18,2) DEFAULT 0;
			Alter Table t_constract Add Column TaxRate9Amount numeric(18,2) DEFAULT 0;
			Alter Table t_constract Add Column TaxRate6Amount numeric(18,2) DEFAULT 0;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3384</ID>
    <SQLText>Update T_Constract Set TaxRate13Amount = 0,TaxRate6Amount = 0,TaxRate9Amount = 0;</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3385</ID>
    <SQLText>
			Alter Table t_constractpayable Add TaxRate numeric(18,2) Default 0;
			Alter Table t_constractpayablerecord Add TaxRate numeric(18,2) Default 0;
			Alter Table t_constractreceivables Add TaxRate numeric(18,2) Default 0;
			Alter Table t_constractreceivablesrecord Add TaxRate numeric(18,2) Default 0;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3386</ID>
    <SQLText>
			Update t_constractpayable Set TaxRate = 0;
			Update t_constractpayablerecord Set TaxRate = 0;
			Update t_constractreceivables Set TaxRate = 0;
			Update t_constractreceivablesrecord Set TaxRate = 0;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3387</ID>
    <SQLText>
			-------------------------------业务表单数据源-------------------------------------------------
			Insert into T_ProModuleLevel(ModuleName,HomeModuleName ,ParentModule ,PageName,ModuleType,UserType,SortNumber,Visible,IsDeleted,LangCode,IconURL )
			Values('业务表单数据源','业务表单数据源','流程管理','TTExcelFormImportToDB.aspx','SYSTEM','INNER',7,'YES','NO','zh-CN','');

			-------------SAMPLE----------------------------
			Insert into T_ProModule(ModuleName,UserCode,Visible,ModuleType ,UserType)
			Values('业务表单数据源','SAMPLE','YES','SYSTEM','INNER');


			-------------ADMIN------------------------------
			Insert into T_ProModule(ModuleName,UserCode,Visible,ModuleType,UserType)
			Values('业务表单数据源','ADMIN','YES','SYSTEM','INNER');
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3388</ID>
    <SQLText>
			CREATE TABLE IF NOT EXISTS public.t_excelformdata
			(
			id bigserial NOT NULL,

			formtype character varying(200) COLLATE pg_catalog."default" NOT NULL,
			formcode character varying(200) COLLATE pg_catalog."default" NOT NULL,
			formname character varying(200) COLLATE pg_catalog."default" NOT NULL,
			rowcode character varying(200) COLLATE pg_catalog."default" NOT NULL,

			fieldname character varying(1000) COLLATE pg_catalog."default" NOT NULL,
			fieldvalue text COLLATE pg_catalog."default" NOT NULL,

			operatorcode character varying(20) COLLATE pg_catalog."default" NOT NULL,
			operatorname character varying(20) COLLATE pg_catalog."default" NOT NULL,
			operatetime timestamp without time zone DEFAULT now(),

			CONSTRAINT t_excelformdata_pkey PRIMARY KEY (id)
			);
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3389</ID>
    <SQLText>Alter Table T_Constract Add column Warranty int Default 0;</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3390</ID>
    <SQLText>Update T_Constract Set Warranty = 0;</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3391</ID>
    <SQLText>Alter Table T_Constract Add column WarrantyDate date Default now();</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3392</ID>
    <SQLText>Update T_Constract Set WarrantyDate = EndDate;</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3393</ID>
    <SQLText>
			Alter Table t_constract add column OperatorName character varying(20) default '';
			Alter Table t_constract add column SignName character varying(20) default '';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3394</ID>
    <SQLText>Update t_constract set operatorname = '',signname = '';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3395</ID>
    <SQLText>
			Update T_SystemAnalystChartManagement Set charttype = 'Line' where charttype = 'SplineArea';
			Update T_SystemAnalystChartManagement Set charttype = 'Line' where charttype = 'SplineRange';
			Update T_SystemAnalystChartManagement Set charttype = 'Funnel' where charttype = 'Pyramid';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3396</ID>
    <SQLText>
			Insert Into t_wltype(Type,SortNumber,HomeName,LangCode,MakeType)
			Values('投标管理',10,'投标管理','zh-CN','SYS');
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3397</ID>
    <SQLText>delete from t_promodulelevelforpage Where ModuleName = '关联工作流模板'</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3398</ID>
    <SQLText>Alter Table T_Constract Add Column PartyConstractCode character varying(50) default '';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3399</ID>
    <SQLText>Update T_Constract Set PartyConstractCode = '';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3400</ID>
    <SQLText>
			Alter Table t_constractpayable Add Column FromCode character varying(200) default '';
			Alter Table t_constractreceivables Add Column FromCode character varying(200) default '';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3401</ID>
    <SQLText>
			Update t_constractpayable set FromCode = '';
			Update t_constractreceivables set FromCode = '';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3402</ID>
    <SQLText>alter table t_industrytype alter column type type character(100);</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3403</ID>
    <SQLText>alter table t_vendor add DeviceName character varying(200) default '';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3404</ID>
    <SQLText>update t_vendor Set DeviceName = '';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3405</ID>
    <SQLText>
			select setval('T_WFTemplateRelatedJSCode_id_seq',(select max(id) from T_WFTemplateRelatedJSCode));
			select setval('t_wftemplatesteprelatedjscode_id_seq',(select max(id) from t_wftemplatesteprelatedjscode));
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3406</ID>
    <SQLText>update t_wftemplaterelatedjscode set jscode = replace(jscode,'function saveWFFormDataToDatabase()','function saveWFFormDataToDatabase(intWLID)');</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3407</ID>
    <SQLText>update t_wftemplaterelatedjscode set jscode = replace(jscode,'调用一般处理程序，保存表单数据到后台数据库','调用一般处理程序，保存表单数据到后台数据库,intWLID是传入的工作流编号')</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3408</ID>
    <SQLText>
			-- PROCEDURE: public.pr_initialmodules(character, character)

			-- DROP PROCEDURE IF EXISTS public.pr_initialmodules(character, character);

			CREATE OR REPLACE PROCEDURE public.pr_initialmodules(
			IN sampleusercode character,
			IN usercode character)
			LANGUAGE 'plpgsql'
			AS $BODY$
			begin

			insert into t_promodule(modulename,usercode,visible,moduletype,usertype)
			select a.modulename,sampleusercode,'NO',a.moduletype,a.usertype from t_promodule a
			where a.usercode = 'ADMIN' and rtrim(a.modulename) || rtrim(a.moduletype) || rtrim(a.usertype)
			not in (select rtrim(b.modulename)||rtrim(b.moduletype) || rtrim (b.usertype) from t_promodule b where b.usercode = sampleusercode and b.moduletype = a.moduletype and b.usertype = a.usertype);


			insert into t_promodule(modulename,usercode,visible,moduletype,usertype)
			select a.modulename,a.usercode,a.visible,a.moduletype,a.usertype from t_promodule a
			where a.usercode = sampleusercode
			and (rtrim(a.modulename) || rtrim(a.moduletype) || rtrim(a.usertype) not in (select rtrim(b.modulename)||rtrim(b.moduletype) || rtrim (b.usertype) from t_promodule b where a.usercode = b.usercode and b.moduletype = a.moduletype and b.usertype = a.usertype )
			and rtrim(a.modulename)||rtrim(a.moduletype) || rtrim(a.usertype) in (select rtrim(c.modulename)||rtrim(c.moduletype) || rtrim (c.usertype) from t_promodulelevel c where c.moduletype = a.moduletype and c.usertype = a.usertype  and c.visible = 'YES' and c.isdeleted = 'NO'));
			end
			$BODY$;

			COMMENT ON PROCEDURE public.pr_initialmodules(character, character)
			IS '更改模组初始化存储过程';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3409</ID>
    <SQLText>
			-- PROCEDURE: public.pro_deleteuserauthorizationbysupermodule()

			-- DROP PROCEDURE IF EXISTS public.pro_deleteuserauthorizationbysupermodule();

			CREATE OR REPLACE PROCEDURE public.pro_deleteuserauthorizationbysupermodule(
			)
			LANGUAGE 'plpgsql'
			AS $BODY$

			begin
			delete from t_promodule where rtrim(modulename)||rtrim(moduletype)||rtrim(usertype)  in (select rtrim(modulename)|| rtrim(moduletype) || rtrim(usertype) from t_promodulelevel where visible = 'NO' or isdeleted = 'YES');
			delete from t_departrelatedmodule where rtrim(modulename) || rtrim(moduletype) || rtrim(usertype) in (select rtrim(modulename) || rtrim(moduletype) || rtrim(usertype) from t_promodulelevel where visible = 'NO' or isdeleted = 'YES');
			end
			$BODY$;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3410</ID>
    <SQLText>
			Update t_commonworkflowrelatedpage set PageName = 'TTMakeAssetPurchase.aspx' where PageName = 'TTAssetPurchaseWF.aspx';
			Update t_commonworkflowrelatedpage set PageName = 'TTMakeGoodsPurchase.aspx' where PageName = 'TTGoodsPurchaseWF.aspx';

			Update t_workflowtemplate set PageFile = 'TTMakeAssetPurchase.aspx' where PageFile = 'TTAssetPurchaseWF.aspx';
			Update t_workflowtemplate set PageFile = 'TTMakeGoodsPurchase.aspx' where PageFile = 'TTGoodsPurchaseWF.aspx';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3411</ID>
    <SQLText>
			Alter Table t_workflowtemplate add column OverTimeAutoAgree char(10) Default 'NO';
			Alter Table t_workflowtemplate add column OverTimeHourNumber int Default 24;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3412</ID>
    <SQLText>Update t_workflowtemplate Set OverTimeAutoAgree = 'NO',OverTimeHourNumber =24;</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3413</ID>
    <SQLText>
			Alter Table t_workflowtstep add column OverTimeAutoAgree char(10) Default 'NO';
			Alter Table t_workflowtstep add column OverTimeHourNumber int Default 24;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3414</ID>
    <SQLText>Update t_workflowtstep Set OverTimeAutoAgree = 'NO',OverTimeHourNumber =24;</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3415</ID>
    <SQLText>
			CREATE OR REPLACE VIEW public.v_prorelateduser
			AS
			SELECT a.id,
			a.projectid,
			b.projectcode,
			b.projectname,
			b.projecttype,
			b.status,
			b.begindate,
			b.enddate,
			b.parentid,
			b.customername,
			b.pingpai,
			b.productname,
			a.unithoursalary,
			a.actor,
			a.joindate,
			a.usercode,
			a.username,
			b.pmcode,
			b.pmname,
			b.priority,
			b.usercode AS makemancode,
			b.username AS makemanname,
			b.budget,
			b.manhour,
			b.mannumber,
			b.finishpercent,
			a.status AS mystatus,
			b.status AS prostatus,
			b.customerprojectcode,
			b.confirmedbysupper,
			b.makedate
			FROM t_relateduser a
			JOIN t_project b ON a.projectid = b.projectid
			WHERE b.status &lt;&gt; ALL (ARRAY['新建'::bpchar, '评审'::bpchar, '隐藏'::bpchar, '删除'::bpchar, '归档'::bpchar]);
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3416</ID>
    <SQLText>select setval('t_dailywork_workid_seq',(select max(workid) from t_dailywork));</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3417</ID>
    <SQLText>
			Insert Into T_ProModuleLevelForPage(ModuleName,HomeModuleName,IconURL,SortNumber,PageName,UserType,ParentModule,Visible,LangCode,IsDeleted)
			Values('我的日程','我的日程','',7,'TTPersonalSpaceMyMonthSchedule.aspx','INNER','PersonalSpace','NO','zh-CN','NO');
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3418</ID>
    <SQLText>
			Insert Into T_ProModuleLevelForPage(ModuleName,HomeModuleName,IconURL,SortNumber,PageName,UserType,ParentModule,Visible,LangCode,IsDeleted)
			Values('项目地图','项目地图','',8,'TTPersonalSpaceMyProjectPositionMap.aspx','INNER','PersonalSpace','NO','zh-CN','NO');
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3419</ID>
    <SQLText>
			Insert Into T_ProModuleLevelForPage(ModuleName,HomeModuleName,IconURL,SortNumber,PageName,UserType,ParentModule,Visible,LangCode,IsDeleted)
			Values('项目总览','项目总览','',9,'TTPersonalSpaceProjectSummary.aspx','INNER','PersonalSpace','NO','zh-CN','NO');
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3420</ID>
    <SQLText>
			Insert Into T_ProModuleLevelForPage(ModuleName,HomeModuleName,IconURL,SortNumber,PageName,UserType,ParentModule,Visible,LangCode,IsDeleted)
			Values('数据分析','数据分析','',10,'TTPersonalSpaceAnalysisChart.aspx','INNER','PersonalSpace','NO','zh-CN','NO');
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3421</ID>
    <SQLText>
			-------------------------------合同管理台账-------------------------------------------------
			Insert into T_ProModuleLevel(ModuleName,HomeModuleName ,ParentModule ,PageName,ModuleType,UserType,SortNumber,Visible,IsDeleted,LangCode,IconURL )
			Values('合同台账','合同台账','合同管理','TTConstractManageAccount.aspx','SYSTEM','INNER',10,'YES','NO','zh-CN','');

			-------------SAMPLE----------------------------
			Insert into T_ProModule(ModuleName,UserCode,Visible,ModuleType ,UserType)
			Values('合同台账','SAMPLE','YES','SYSTEM','INNER');


			-------------ADMIN------------------------------
			Insert into T_ProModule(ModuleName,UserCode,Visible,ModuleType,UserType)
			Values('合同台账','ADMIN','YES','SYSTEM','INNER');
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3422</ID>
    <SQLText>
			Alter Table t_constractpayable Add IncomeRatio  varchar(100) default '';
			Alter Table t_constractreceivables Add IncomeRatio  varchar(100) default '';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3423</ID>
    <SQLText>
			Update t_constractpayable set IncomeRatio = '';
			Update t_constractreceivables set IncomeRatio = '';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3425</ID>
    <SQLText>
			Alter Table t_constract Add projectbasis  varchar(100) default '';
			Alter Table t_constract Add biddingdate date default now();
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3426</ID>
    <SQLText>
			update t_constract set projectbasis = '';
			update t_constract set biddingdate =  now();
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3427</ID>
    <SQLText>
			-------------------------------制定合同[工程]-------------------------------------------------
			Insert into T_ProModuleLevel(ModuleName,HomeModuleName ,ParentModule ,PageName,ModuleType,UserType,SortNumber,Visible,IsDeleted,LangCode,IconURL )
			Values('制定合同[工程]','制定合同[工程]','合同管理','TTMakeConstract_BYJF.aspx','SYSTEM','INNER',1,'YES','NO','zh-CN','');

			-------------SAMPLE----------------------------
			Insert into T_ProModule(ModuleName,UserCode,Visible,ModuleType ,UserType)
			Values('制定合同[工程]','SAMPLE','YES','SYSTEM','INNER');


			-------------ADMIN------------------------------
			Insert into T_ProModule(ModuleName,UserCode,Visible,ModuleType,UserType)
			Values('制定合同[工程]','ADMIN','YES','SYSTEM','INNER');
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3428</ID>
    <SQLText>
			Insert into T_ProModuleLevel(ModuleName,HomeModuleName ,ParentModule ,PageName,ModuleType,UserType,SortNumber,Visible,IsDeleted,LangCode,IconURL )
			Values('分析图','分析图','','TTAPPPersonalSpaceAnalysisChart.aspx','APP','INNER',1,'YES','NO','zh-CN','');

			-------------SAMPLE----------------------------
			Insert into T_ProModule(ModuleName,UserCode,Visible,ModuleType ,UserType)
			Values('分析图','SAMPLE','YES','APP','INNER');

			-------------ADMIN------------------------------
			Insert into T_ProModule(ModuleName,UserCode,Visible,ModuleType,UserType)
			Values('分析图','ADMIN','YES','APP','INNER');


			Insert into T_ProModuleLevel(ModuleName,HomeModuleName ,ParentModule ,PageName,ModuleType,UserType,SortNumber,Visible,IsDeleted,LangCode,IconURL )
			Values('分析图','分析图','','TTAPPPersonalSpaceAnalysisChart.aspx','APP','OUTER',1,'YES','NO','zh-CN','');

			-------------SAMPLE----------------------------
			Insert into T_ProModule(ModuleName,UserCode,Visible,ModuleType ,UserType)
			Values('分析图','SAMPLE','YES','APP','OUTER');

			-------------ADMIN------------------------------
			Insert into T_ProModule(ModuleName,UserCode,Visible,ModuleType,UserType)
			Values('分析图','ADMIN','YES','APP','OUTER');
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3429</ID>
    <SQLText>
			Update T_ProModuleLevel Set IsDeleted = 'NO',Visible = 'YES' Where ModuleName = '知识管理';
			Update T_ProModuleLevel Set IsDeleted = 'NO',Visible = 'YES' Where ModuleName = '上传文档';
			Update T_ProModuleLevel Set IsDeleted = 'NO',Visible = 'YES' Where ModuleName = '已删除文档管理';

			-------------SAMPLE----------------------------
			Insert into T_ProModule(ModuleName,UserCode,Visible,ModuleType ,UserType)
			Values('知识管理','SAMPLE','YES','SYSTEM','INNER');

			Insert into T_ProModule(ModuleName,UserCode,Visible,ModuleType ,UserType)
			Values('上传文档','SAMPLE','YES','SYSTEM','INNER');

			Insert into T_ProModule(ModuleName,UserCode,Visible,ModuleType ,UserType)
			Values('已删除文档管理','SAMPLE','YES','SYSTEM','INNER');
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3430</ID>
    <SQLText>
			Delete From T_ProModule Where ModuleName = '知识管理' and ModuleType = 'APP';
			Delete From T_ProModule Where ModuleName = '上传文档' and ModuleType = 'APP';
			Delete From T_ProModule Where ModuleName = '已删除文档管理' and ModuleType = 'APP';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3431</ID>
    <SQLText>
			Update T_ProModule Set Visible = 'YES' Where ModuleName = '知识管理' and UserCode = 'SAMPLE';
			Update T_ProModule Set Visible = 'YES' Where ModuleName = '上传文档' and UserCode = 'SAMPLE';
			Update T_ProModule Set Visible = 'YES' Where ModuleName = '已删除文档管理' and UserCode = 'SAMPLE';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3432</ID>
    <SQLText>CALL Pro_DeleteDoubleModule();</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3433</ID>
    <SQLText>
			Update T_ProModule Set Visible = 'YES' Where ModuleName = '知识管理' ;
			Update T_ProModule Set Visible = 'YES' Where ModuleName = '上传文档' ;
			Update T_ProModule Set Visible = 'YES' Where ModuleName = '已删除文档管理';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3434</ID>
    <SQLText>Alter Table public.t_promodulelevel Add DIYFlow character(10) Default 'NO';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3435</ID>
    <SQLText>Update public.t_promodulelevel Set DIYFlow = 'NO';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3436</ID>
    <SQLText>Update T_ProModuleLevel Set ICONUrl = 'ImagesSkin/SiteEdit.png' Where ModuleName = '网站编辑';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3437</ID>
    <SQLText>
			Alter Table T_Project Add column longitude char(100) default '';
			Alter Table T_Project Add column latitude char(100) default '';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3438</ID>
    <SQLText>
			Update T_Project set longitude = '';
			Update T_Project set latitude = '';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3439</ID>
    <SQLText>UPdate T_Project set Longitude='116.404',Latitude='39.915';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3440</ID>
    <SQLText>Insert Into t_newstype(type,homename,langcode,pagename,visible,sortnumber) values('项目地图','项目地图','zh-CN','TTPersonalSpaceMyProjectPositionMap.aspx','NO',1);</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3441</ID>
    <SQLText>Delete From T_ProModuleLevelForPage Where ModuleName = '项目总览';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3442</ID>
    <SQLText>
			CREATE OR REPLACE VIEW public.v_MemberForprojectdailywork
			AS
			SELECT DISTINCT on( usercode,
			username, ProjectID)
			usercode,
			username,
			unithoursalary,
			salarymethod,
			ProjectID
			FROM
			t_relateduser b
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3443</ID>
    <SQLText>
			CREATE OR REPLACE VIEW public.v_projectdailywork
			AS
			SELECT DISTINCT a.workid,
			a.type,
			a.usercode,
			a.username,
			a.workdate,
			a.projectid,
			a.projectname,
			a.dailysummary,
			a.authority,
			a.recordtime,
			a.address,
			a.achievement,
			a.finishpercent,
			a.charge,
			a.confirmcharge,
			a.manhour,
			a.confirmmanhour,
			a.manhour * b.unithoursalary AS dailysalary,
			a.confirmmanhour * b.unithoursalary AS confirmdailysalary,
			b.salarymethod,
			COALESCE(a.bonus, 0::numeric) AS bonus,
			COALESCE(a.confirmbonus, 0::numeric) AS confirmbonus
			FROM t_dailywork a,
			v_MemberForprojectdailywork b,
			t_project c
			WHERE a.projectid = b.projectid AND b.projectid = c.projectid AND a.usercode = b.usercode;

		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3444</ID>
    <SQLText>Alter Table public.t_constract Add ConstractMainDocURL char(300) Default '';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3445</ID>
    <SQLText>Update public.t_constract Set ConstractMainDocURL = '';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3446</ID>
    <SQLText>
			Alter Table T_Project Add AttachFile char(200) Default '';
			Alter Table T_Project Add ProjectDirection char(100) Default '';
			Alter Table T_Project Add BudgetAccount char(100) Default '';
			Alter Table T_Project Add ProjectLocation char(300) Default '';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3447</ID>
    <SQLText>
			Update T_Project Set AttachFile = '';
			Update T_Project Set ProjectDirection = '';
			Update T_Project Set BudgetAccount = '';
			Update T_Project Set ProjectLocation = '';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3448</ID>
    <SQLText>
			CREATE TABLE IF NOT EXISTS public.T_FundingSource
			(
			FundingSource character(200) COLLATE pg_catalog."default" NOT NULL,
			CONSTRAINT T_FundingSource_pkey PRIMARY KEY (FundingSource)
			)
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3449</ID>
    <SQLText>Alter Table T_Project Add Column FundingSource char(200) Default '';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3450</ID>
    <SQLText>Update T_Project Set FundingSource = '';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3451</ID>
    <SQLText>Alter Table public.t_userattendancerule Add Address char(300) Default '';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3452</ID>
    <SQLText>Update public.t_userattendancerule Set Address = '';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3453</ID>
    <SQLText>Alter Table public.t_attendancerule Add Address char(300) Default '';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3454</ID>
    <SQLText>Update public.t_attendancerule Set Address = '';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3455</ID>
    <SQLText>Alter Table public.t_headline Add Column contentdocurl character(300) default '';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3456</ID>
    <SQLText>Update T_headline set contentdocurl = '';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3457</ID>
    <SQLText>Alter Table public.t_officialdocument Add Column contentdocurl character(300) default '';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3458</ID>
    <SQLText>Update public.t_officialdocument set contentdocurl = '';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3459</ID>
    <SQLText>
			-- FUNCTION: public.change_field_size()

			-- DROP FUNCTION IF EXISTS public.change_field_size();

			CREATE OR REPLACE FUNCTION public.change_field_size(
			)
			RETURNS void
			LANGUAGE 'plpgsql'
			COST 100
			VOLATILE PARALLEL UNSAFE
			AS $BODY$
			DECLARE
			rec record;
			BEGIN
			FOR rec IN SELECT table_name
			FROM INFORMATION_SCHEMA.COLUMNS
			WHERE column_name = 'departname'
			AND table_schema NOT IN ('pg_catalog', 'information_schema')
			AND table_name NOT LIKE 'v_%'
			LOOP
			BEGIN
			EXECUTE format('ALTER TABLE %I ALTER COLUMN departname TYPE character varying(200)', rec.table_name);
			EXCEPTION WHEN others THEN
			RAISE NOTICE 'Error during ALTER TABLE command for table %:', rec.table_name;
			continue;
			END;
			END LOOP;
			END;
			$BODY$;

		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3460</ID>
    <SQLText>DROP VIEW public.v_bmpurchaseapplication;</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3461</ID>
    <SQLText>DROP VIEW public.v_bmpurchaseapplicationpayform;</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3462</ID>
    <SQLText>DROP VIEW public.v_conatractchangereport;</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3463</ID>
    <SQLText>DROP VIEW public.v_projectmembermanhoursummary;</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3464</ID>
    <SQLText>DROP VIEW public.v_projectmembertaskdetailreport;</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3465</ID>
    <SQLText>DROP VIEW public.v_userkpilist;</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3467</ID>
    <SQLText>select change_field_size();</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3468</ID>
    <SQLText>DROP VIEW public.v_conatractexecutereport;</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3469</ID>
    <SQLText>select change_field_size();</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3470</ID>
    <SQLText>
			-- View: public.v_bmpurchaseapplication

			-- DROP VIEW public.v_bmpurchaseapplication;

			CREATE OR REPLACE VIEW public.v_bmpurchaseapplication
			AS
			SELECT t_bmpurchaseapplication.id,
			t_bmpurchaseapplication.code AS bmacode,
			t_bmpurchaseapplication.name,
			t_bmpurchaseapplication.application,
			t_bmpurchaseapplication.applicationdate,
			t_bmpurchaseapplication.remark,
			t_bmpurchaseapplication.entercode,
			t_bmpurchaseapplication.departname,
			t_bmpurchaseapplication.engineeringaddress,
			t_bmpurchaseapplication.engineeringnumber,
			t_bmpurchaseapplication.engineeringunitname,
			t_bmpurchaseapplication.planstarttime,
			t_bmpurchaseapplication.totalduration,
			t_bmpurchaseapplication.devicenumber,
			t_bmpurchaseapplication.deviceunitname,
			t_bmpurchaseapplication.sitecondition,
			t_bmpurchaseapplication.manhour,
			t_bmpurchaseapplication.othercomment,
			t_bmpurchaseapplication.expectedamount,
			t_bmpurchaseapplication.status,
			t_bmpurchaseapplication.suppliercode,
			t_bmpurchaseapplication.suppliername,
			t_bmpurchaseapplication.projectid
			FROM t_bmpurchaseapplication;

		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3471</ID>
    <SQLText>
			-- View: public.v_bmpurchaseapplicationpayform

			-- DROP VIEW public.v_bmpurchaseapplicationpayform;

			CREATE OR REPLACE VIEW public.v_bmpurchaseapplicationpayform
			AS
			SELECT t_bmpurchaseapplication.id,
			t_bmpurchaseapplication.code AS bmaccode,
			t_bmpurchaseapplication.name,
			t_bmpurchaseapplication.application,
			t_bmpurchaseapplication.applicationdate,
			t_bmpurchaseapplication.remark,
			t_bmpurchaseapplication.entercode,
			t_bmpurchaseapplication.departname,
			t_bmpurchaseapplication.engineeringaddress,
			t_bmpurchaseapplication.engineeringnumber,
			t_bmpurchaseapplication.engineeringunitname,
			t_bmpurchaseapplication.planstarttime,
			t_bmpurchaseapplication.totalduration,
			t_bmpurchaseapplication.devicenumber,
			t_bmpurchaseapplication.deviceunitname,
			t_bmpurchaseapplication.sitecondition,
			t_bmpurchaseapplication.manhour,
			t_bmpurchaseapplication.othercomment,
			t_bmpurchaseapplication.expectedamount,
			t_bmpurchaseapplication.actualmanhour,
			t_bmpurchaseapplication.unitprice,
			t_bmpurchaseapplication.actualamount,
			t_bmpurchaseapplication.status,
			t_bmpurchaseapplication.suppliercode,
			t_bmpurchaseapplication.suppliername,
			t_bmpurchaseapplication.projectid,
			t_bmpurchaseapplication.outcontractpayamount,
			t_bmpurchaseapplication.deductedamount,
			t_bmpurchaseapplication.totalpayamount,
			t_bmpurchaseapplication.accountcode,
			t_bmpurchaseapplication.accountname,
			t_bmpurchaseapplication.currencytype,
			t_bmpurchaseapplication.comment
			FROM t_bmpurchaseapplication;

		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3472</ID>
    <SQLText>
			-- View: public.v_conatractchangereport

			-- DROP VIEW public.v_conatractchangereport;

			CREATE OR REPLACE VIEW public.v_conatractchangereport
			AS
			SELECT a.id,
			b.constractcode,
			b.constractname,
			f_getconstractrelatedprojectname(b.constractcode) AS projectname,
			b.departcode,
			b.departname,
			a.changecontent,
			a.changetype,
			a.afterchangeamount,
			b.amount,
			b.parta,
			b.partb,
			b.amount - a.afterchangeamount AS changebalance,
			a.changetime
			FROM t_constractchangerecord a
			LEFT JOIN t_constract b ON a.constractcode::text = b.constractcode::text;

		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3473</ID>
    <SQLText>
			-- View: public.v_projectmembermanhoursummary

			-- DROP VIEW public.v_projectmembermanhoursummary;

			CREATE OR REPLACE VIEW public.v_projectmembermanhoursummary
			AS
			SELECT a.usercode,
			a.username,
			c.departcode,
			c.departname,
			a.workdate,
			a.projectid,
			a.projectname,
			a.manhour,
			a.confirmmanhour
			FROM t_dailywork a,
			t_projectmember b,
			t_department c
			WHERE a.usercode = b.usercode AND b.departcode = c.departcode;

		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3474</ID>
    <SQLText>
			-- View: public.v_projectmembertaskdetailreport

			-- DROP VIEW public.v_projectmembertaskdetailreport;

			CREATE OR REPLACE VIEW public.v_projectmembertaskdetailreport
			AS
			SELECT COALESCE(f.departcode, ''::bpchar) AS departcode,
			COALESCE(f.departname, ''::character varying) AS departname,
			COALESCE(e.usercode, ''::bpchar) AS usercode,
			COALESCE(e.username, ''::bpchar) AS username,
			CASE b.projectid
			WHEN 1 THEN NULL::bigint
			ELSE b.projectid
			END AS projectid,
			COALESCE(b.projectcode, ''::character varying) AS projectcode,
			COALESCE(b.projectname, ''::bpchar) AS projectname,
			COALESCE(c.id::text, ''::text) AS planid,
			COALESCE(c.name, ''::character varying) AS planname,
			a.taskid,
			a.task AS taskname,
			c.start_date AS planbegintime,
			c.end_date AS planendtime,
			a.begindate AS taskbegindate,
			d.operationtime AS taskfirstoperatetime,
			a.enddate AS taskenddate,
			d.operationtime AS tasklastestoperatetime,
			a.status,
			f_getsumtasklog(a.taskid) AS tasklog,
			a.manhour,
			a.type AS tasktype
			FROM t_projecttask a
			LEFT JOIN t_project b ON a.projectid = b.projectid
			LEFT JOIN t_impleplan c ON a.planid = c.id AND (c.verid IN ( SELECT t_projectplanversion.verid
			FROM t_projectplanversion
			WHERE t_projectplanversion.type = '在用'::bpchar))
			LEFT JOIN t_taskassignrecord d ON a.taskid = d.taskid AND (d.id IN ( SELECT min(t_taskassignrecord.id) AS min
			FROM t_taskassignrecord
			GROUP BY t_taskassignrecord.taskid))
			LEFT JOIN t_projectmember e ON d.operatorcode = e.usercode
			LEFT JOIN t_department f ON e.departcode = f.departcode
			LEFT JOIN t_taskassignrecord g ON a.taskid = g.taskid AND (g.id IN ( SELECT min(t_taskassignrecord.id) AS min
			FROM t_taskassignrecord
			GROUP BY t_taskassignrecord.taskid))
			WHERE (a.planid IN ( SELECT t_impleplan.id AS planid
			FROM t_impleplan)) AND (a.projectid IN ( SELECT t_project.projectid
			FROM t_project));

		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3475</ID>
    <SQLText>
			-- View: public.v_userkpilist

			-- DROP VIEW public.v_userkpilist;

			CREATE OR REPLACE VIEW public.v_userkpilist
			AS
			SELECT a.usercode,
			a.username,
			a.gender,
			a.duty,
			a.departcode,
			a.departname,
			COALESCE(b.kpicheckid, 0::bigint) AS kpicheckid,
			COALESCE(b.kpicheckname, ''::character varying) AS kpicheckname,
			to_char(b.starttime, ''::text) AS starttime,
			to_char(b.endtime, ''::text) AS endtime,
			COALESCE(b.totalselfpoint, 0::numeric) AS totalselfpoint,
			COALESCE(b.totalleaderpoint, 0::numeric) AS totalleaderpoint,
			COALESCE(b.totalthirdpartpoint, 0::numeric) AS totalthirdpartpoint,
			COALESCE(b.totalsqlpoint, 0::numeric) AS totalsqlpoint,
			COALESCE(b.totalhrpoint, 0::numeric) AS totalhrpoint,
			COALESCE(b.totalpoint, 0::numeric) AS totalpoint
			FROM t_projectmember a
			FULL JOIN t_userkpicheck b ON a.usercode = b.usercode::bpchar;

		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3476</ID>
    <SQLText>
			-- View: public.v_conatractexecutereport

			-- DROP VIEW public.v_conatractexecutereport;

			CREATE OR REPLACE VIEW public.v_conatractexecutereport
			AS
			SELECT a.constractcode,
			a.constractname,
			f_getconstractrelatedprojectname(a.constractcode) AS projectname,
			a.departcode,
			a.departname,
			a.exception,
			a.amount,
			a.parta,
			a.partb,
			a.startdate,
			a.enddate,
			a.signdate,
			a.archivetime
			FROM t_constract a
			LEFT JOIN t_constractrelatedproject c ON a.constractcode::text = c.constractcode::text
			WHERE a.signdate &gt; a.startdate;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3477</ID>
    <SQLText>
			CREATE OR REPLACE FUNCTION public.change_field_size_parameter(
			in_column_name TEXT,
			in_data_type TEXT,
			in_field_length INTEGER
			)
			RETURNS VOID
			LANGUAGE 'plpgsql'
			COST 100
			VOLATILE PARALLEL UNSAFE
			AS $BODY$
			DECLARE
			rec RECORD;
			BEGIN
			FOR rec IN SELECT table_name
			FROM INFORMATION_SCHEMA.COLUMNS
			WHERE column_name = in_column_name
			AND table_schema NOT IN ('pg_catalog', 'information_schema')
			AND table_name NOT LIKE 'v_%'
			LOOP
			BEGIN
			EXECUTE format('ALTER TABLE %I ALTER COLUMN %I TYPE %I(length=%I)', rec.table_name, in_column_name, in_data_type, in_field_length);
			EXCEPTION WHEN others THEN
			RAISE NOTICE 'Error during ALTER TABLE command for table % and column %:', rec.table_name, in_column_name;
			continue;
			END;
			END LOOP;
			END;
			$BODY$;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3478</ID>
    <SQLText>alter table t_projectmember add column leftbarextend character(10) default 'NO';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3479</ID>
    <SQLText>Update t_projectmember set leftbarextend = 'NO';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3480</ID>
    <SQLText>
			-- View: public.v_projectmembermanhoursummary

			-- DROP VIEW public.v_projectmembermanhoursummary;

			CREATE OR REPLACE VIEW public.v_projectmembermanhoursummary
			AS
			SELECT a.usercode,
			a.username,
			c.departcode,
			c.departname,
			a.workdate,
			a.projectid,
			a.projectname,
			a.manhour,
			a.confirmmanhour
			FROM t_dailywork a,
			t_projectmember b,
			t_department c
			WHERE a.usercode = b.usercode AND b.departcode = c.departcode;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3481</ID>
    <SQLText>
			-- View: public.v_bmpurchaseapplication

			-- DROP VIEW public.v_bmpurchaseapplication;

			CREATE OR REPLACE VIEW public.v_bmpurchaseapplication
			AS
			SELECT t_bmpurchaseapplication.id,
			t_bmpurchaseapplication.code AS bmacode,
			t_bmpurchaseapplication.name,
			t_bmpurchaseapplication.application,
			t_bmpurchaseapplication.applicationdate,
			t_bmpurchaseapplication.remark,
			t_bmpurchaseapplication.entercode,
			t_bmpurchaseapplication.departname,
			t_bmpurchaseapplication.engineeringaddress,
			t_bmpurchaseapplication.engineeringnumber,
			t_bmpurchaseapplication.engineeringunitname,
			t_bmpurchaseapplication.planstarttime,
			t_bmpurchaseapplication.totalduration,
			t_bmpurchaseapplication.devicenumber,
			t_bmpurchaseapplication.deviceunitname,
			t_bmpurchaseapplication.sitecondition,
			t_bmpurchaseapplication.manhour,
			t_bmpurchaseapplication.othercomment,
			t_bmpurchaseapplication.expectedamount,
			t_bmpurchaseapplication.status,
			t_bmpurchaseapplication.suppliercode,
			t_bmpurchaseapplication.suppliername,
			t_bmpurchaseapplication.projectid
			FROM t_bmpurchaseapplication;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3482</ID>
    <SQLText>
			-- View: public.v_bmpurchaseapplicationpayform

			-- DROP VIEW public.v_bmpurchaseapplicationpayform;

			CREATE OR REPLACE VIEW public.v_bmpurchaseapplicationpayform
			AS
			SELECT t_bmpurchaseapplication.id,
			t_bmpurchaseapplication.code AS bmaccode,
			t_bmpurchaseapplication.name,
			t_bmpurchaseapplication.application,
			t_bmpurchaseapplication.applicationdate,
			t_bmpurchaseapplication.remark,
			t_bmpurchaseapplication.entercode,
			t_bmpurchaseapplication.departname,
			t_bmpurchaseapplication.engineeringaddress,
			t_bmpurchaseapplication.engineeringnumber,
			t_bmpurchaseapplication.engineeringunitname,
			t_bmpurchaseapplication.planstarttime,
			t_bmpurchaseapplication.totalduration,
			t_bmpurchaseapplication.devicenumber,
			t_bmpurchaseapplication.deviceunitname,
			t_bmpurchaseapplication.sitecondition,
			t_bmpurchaseapplication.manhour,
			t_bmpurchaseapplication.othercomment,
			t_bmpurchaseapplication.expectedamount,
			t_bmpurchaseapplication.actualmanhour,
			t_bmpurchaseapplication.unitprice,
			t_bmpurchaseapplication.actualamount,
			t_bmpurchaseapplication.status,
			t_bmpurchaseapplication.suppliercode,
			t_bmpurchaseapplication.suppliername,
			t_bmpurchaseapplication.projectid,
			t_bmpurchaseapplication.outcontractpayamount,
			t_bmpurchaseapplication.deductedamount,
			t_bmpurchaseapplication.totalpayamount,
			t_bmpurchaseapplication.accountcode,
			t_bmpurchaseapplication.accountname,
			t_bmpurchaseapplication.currencytype,
			t_bmpurchaseapplication.comment
			FROM t_bmpurchaseapplication;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3483</ID>
    <SQLText>
			-- View: public.v_conatractchangereport

			-- DROP VIEW public.v_conatractchangereport;

			CREATE OR REPLACE VIEW public.v_conatractchangereport
			AS
			SELECT a.id,
			b.constractcode,
			b.constractname,
			f_getconstractrelatedprojectname(b.constractcode) AS projectname,
			b.departcode,
			b.departname,
			a.changecontent,
			a.changetype,
			a.afterchangeamount,
			b.amount,
			b.parta,
			b.partb,
			b.amount - a.afterchangeamount AS changebalance,
			a.changetime
			FROM t_constractchangerecord a
			LEFT JOIN t_constract b ON a.constractcode::text = b.constractcode::text;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3484</ID>
    <SQLText>
			-- View: public.v_projectmembermanhoursummary

			-- DROP VIEW public.v_projectmembermanhoursummary;

			CREATE OR REPLACE VIEW public.v_projectmembermanhoursummary
			AS
			SELECT a.usercode,
			a.username,
			c.departcode,
			c.departname,
			a.workdate,
			a.projectid,
			a.projectname,
			a.manhour,
			a.confirmmanhour
			FROM t_dailywork a,
			t_projectmember b,
			t_department c
			WHERE a.usercode = b.usercode AND b.departcode = c.departcode;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3485</ID>
    <SQLText>
			-- View: public.v_projectmembertaskdetailreport

			-- DROP VIEW public.v_projectmembertaskdetailreport;

			CREATE OR REPLACE VIEW public.v_projectmembertaskdetailreport
			AS
			SELECT COALESCE(f.departcode, ''::bpchar) AS departcode,
			COALESCE(f.departname, ''::character varying) AS departname,
			COALESCE(e.usercode, ''::bpchar) AS usercode,
			COALESCE(e.username, ''::bpchar) AS username,
			CASE b.projectid
			WHEN 1 THEN NULL::bigint
			ELSE b.projectid
			END AS projectid,
			COALESCE(b.projectcode, ''::character varying) AS projectcode,
			COALESCE(b.projectname, ''::bpchar) AS projectname,
			COALESCE(c.id::text, ''::text) AS planid,
			COALESCE(c.name, ''::character varying) AS planname,
			a.taskid,
			a.task AS taskname,
			c.start_date AS planbegintime,
			c.end_date AS planendtime,
			a.begindate AS taskbegindate,
			d.operationtime AS taskfirstoperatetime,
			a.enddate AS taskenddate,
			d.operationtime AS tasklastestoperatetime,
			a.status,
			f_getsumtasklog(a.taskid) AS tasklog,
			a.manhour,
			a.type AS tasktype
			FROM t_projecttask a
			LEFT JOIN t_project b ON a.projectid = b.projectid
			LEFT JOIN t_impleplan c ON a.planid = c.id AND (c.verid IN ( SELECT t_projectplanversion.verid
			FROM t_projectplanversion
			WHERE t_projectplanversion.type = '在用'::bpchar))
			LEFT JOIN t_taskassignrecord d ON a.taskid = d.taskid AND (d.id IN ( SELECT min(t_taskassignrecord.id) AS min
			FROM t_taskassignrecord
			GROUP BY t_taskassignrecord.taskid))
			LEFT JOIN t_projectmember e ON d.operatorcode = e.usercode
			LEFT JOIN t_department f ON e.departcode = f.departcode
			LEFT JOIN t_taskassignrecord g ON a.taskid = g.taskid AND (g.id IN ( SELECT min(t_taskassignrecord.id) AS min
			FROM t_taskassignrecord
			GROUP BY t_taskassignrecord.taskid))
			WHERE (a.planid IN ( SELECT t_impleplan.id AS planid
			FROM t_impleplan)) AND (a.projectid IN ( SELECT t_project.projectid
			FROM t_project));
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3486</ID>
    <SQLText>
			-- View: public.v_userkpilist

			-- DROP VIEW public.v_userkpilist;

			CREATE OR REPLACE VIEW public.v_userkpilist
			AS
			SELECT a.usercode,
			a.username,
			a.gender,
			a.duty,
			a.departcode,
			a.departname,
			COALESCE(b.kpicheckid, 0::bigint) AS kpicheckid,
			COALESCE(b.kpicheckname, ''::character varying) AS kpicheckname,
			to_char(b.starttime, ''::text) AS starttime,
			to_char(b.endtime, ''::text) AS endtime,
			COALESCE(b.totalselfpoint, 0::numeric) AS totalselfpoint,
			COALESCE(b.totalleaderpoint, 0::numeric) AS totalleaderpoint,
			COALESCE(b.totalthirdpartpoint, 0::numeric) AS totalthirdpartpoint,
			COALESCE(b.totalsqlpoint, 0::numeric) AS totalsqlpoint,
			COALESCE(b.totalhrpoint, 0::numeric) AS totalhrpoint,
			COALESCE(b.totalpoint, 0::numeric) AS totalpoint
			FROM t_projectmember a
			FULL JOIN t_userkpicheck b ON a.usercode = b.usercode::bpchar;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3487</ID>
    <SQLText>
			-- View: public.v_conatractexecutereport

			-- DROP VIEW public.v_conatractexecutereport;

			CREATE OR REPLACE VIEW public.v_conatractexecutereport
			AS
			SELECT a.constractcode,
			a.constractname,
			f_getconstractrelatedprojectname(a.constractcode) AS projectname,
			a.departcode,
			a.departname,
			a.exception,
			a.amount,
			a.parta,
			a.partb,
			a.startdate,
			a.enddate,
			a.signdate,
			a.archivetime
			FROM t_constract a
			LEFT JOIN t_constractrelatedproject c ON a.constractcode::text = c.constractcode::text
			WHERE a.signdate &gt; a.startdate;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3488</ID>
    <SQLText>
			Alter Table T_Project Add PMDuty char(100) default '';
			Alter Table T_project Add PMPhoneNumber char(100) default '';
			Alter Table T_project Add ProjectOperator char(20) default '';
			Alter Table T_project Add ProjectOperatorPhoneNumber char(20) default '';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3489</ID>
    <SQLText>Update T_Project set PMDuty = '',PMPhoneNumber = '',ProjectOperator = '',ProjectOperatorPhoneNumber = '';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3490</ID>
    <SQLText>Alter table public.t_qmqualitydefectnotice Add column purchasingcontractcode character(50) Default ''</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3491</ID>
    <SQLText>Update public.t_qmqualitydefectnotice Set purchasingcontractcode = '';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3492</ID>
    <SQLText>
			Update T_ProModuleLevel Set Visible = 'NO',IsDeleted = 'NO' Where ModuleName = '项目基础设置';
			Update T_ProModuleLevel Set Visible = 'NO',IsDeleted = 'NO' Where ModuleName = '项目导入/导出';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3493</ID>
    <SQLText>
			Delete From T_WLType Where Type = '招标管理';
			Insert Into T_WLType(Type,HomeName,LangCode,MakeType,SortNumber) values('招标管理','招标管理','zh-CN','SYS',0)
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3494</ID>
    <SQLText>Update T_WLType Set Type='招标管理',HomeName='招标管理' Where Type ='招投标管理';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3495</ID>
    <SQLText>
			Delete From T_WLType Where Type = '招标管理';
			Insert Into T_WLType(Type,HomeName,LangCode,MakeType,SortNumber) values('招标管理','招标管理','zh-CN','SYS',0)
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3496</ID>
    <SQLText>DROP TRIGGER IF EXISTS "TG_InsertWLStepByStatus" ON public.t_workflow;</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3497</ID>
    <SQLText>
			Create TRIGGER "TG_InsertWLStepByStatus"
			AFTER INSERT
			ON public.t_workflow
			FOR EACH ROW
			EXECUTE FUNCTION public."Func_TG_InsertWLStepByStatus"();
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3498</ID>
    <SQLText>
			CREATE TRIGGER "TG_UpdateWLStepByStatus"
			AFTER UPDATE
			ON public.t_workflow
			FOR EACH ROW
			EXECUTE FUNCTION public."Func_TG_InsertWLStepByStatus"();
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3499</ID>
    <SQLText>
			CREATE OR REPLACE FUNCTION public."Func_TG_InsertWLStepByStatus"()
			RETURNS trigger
			LANGUAGE 'plpgsql'
			COST 100
			VOLATILE NOT LEAKPROOF
			AS $BODY$
			declare intCount bigint;
			declare chrNewStatus char(10);
			declare chrAutoActive char(10);
			declare chrTemName char(100);

			begin

			select rtrim(ltrim(TemName)) into chrTemName from T_WorkFlow  Where WLID = NEW.WLID ;
			Select rtrim(ltrim(AutoActive)) into chrAutoActive from T_WorkflowTemplate Where TemName = chrTemName;

			IF (TG_OP='UPDATE' or chrAutoActive='YES') THEN

			if ((NEW.Status &lt;&gt; Old.Status) Or (chrAutoActive='YES')) then

			select rtrim(ltrim(Status)) into chrNewStatus from T_WorkFlow  Where WLID = NEW.WLID ;

			select Count(*) into intCount From T_WorkFlowStep Where WLID = new.WLID ;

			if(intCount = 0 and (chrNewStatus = '处理中' or chrAutoActive='YES'))  then

			insert into T_WorkFlowStep(WLID,SortNumber,StepName,LimitedOperator,LimitedTime,DepartRelated,Status)
			select new.WLID,SortNumber,StepName,LimitedOperator,LimitedTime,DepartRelated, '新建'
			from T_WorkFlowTStep where TemName = new.TemName and SortNumber = 1 ;


			Update T_WorkFlowStep set Status = '处理中',ActiveTime = now() where SortNumber = 1 and WLID = new.WLID;
			Update T_WorkFlow Set Status = '处理中' Where WLID = new.WLID;

			end if;

			end if;

			END IF;
			return new;

			end
			$BODY$;

			ALTER FUNCTION public."Func_TG_InsertWLStepByStatus"()
			OWNER TO postgres;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3500</ID>
    <SQLText>Delete From T_RelatedWorkflowTemplate Where wfTemplateName Like '项目153%';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3501</ID>
    <SQLText>Delete From T_WorkflowTemplate Where TemName Like '项目153%';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3502</ID>
    <SQLText>Delete From T_Workflow Where TemName Like '项目153%';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3503</ID>
    <SQLText>
			Update public.t_systemlanguage Set language = 'Español' Where LangCode = 'es';
			Update public.t_systemlanguage Set language = 'Français' Where LangCode = 'fr';
			insert into public.t_systemlanguage(LangCode,Language,SortNumber) values('ko','Coreano','11')
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3504</ID>
    <SQLText>
			Update public.t_systemlanguage Set Language = '한국어' Where LangCode = 'ko';
			Update public.t_systemlanguage Set Language = '日本語' Where LangCode = 'ja';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3505</ID>
    <SQLText>Delete From T_ProModule Where UserCode Not In (Select UserCode From T_ProjectMember)</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3506</ID>
    <SQLText>Alter Table T_Project Add ApprovedAmount Decimal(18,2) Default 0;</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3507</ID>
    <SQLText>Update T_Project Set ApprovedAmount = 0;</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3508</ID>
    <SQLText>
			CREATE TABLE IF NOT EXISTS public.t_documentForProjectPlanTemplate
			(
			docid bigint NOT NULL,
			relatedtype character(20) COLLATE pg_catalog."default",
			doctypeid bigint,
			doctype character(100) COLLATE pg_catalog."default",
			relatedid bigint,
			docname character varying(200) COLLATE pg_catalog."default",
			description character varying(1000) COLLATE pg_catalog."default",
			address character varying(500) COLLATE pg_catalog."default",
			author character varying(20) COLLATE pg_catalog."default",
			departcode character varying(20) COLLATE pg_catalog."default",
			departname character varying(200) COLLATE pg_catalog."default" DEFAULT ''::character varying,
			uploadmancode character(20) COLLATE pg_catalog."default",
			uploadmanname character(20) COLLATE pg_catalog."default",
			uploadtime timestamp without time zone,
			visible character varying(100) COLLATE pg_catalog."default",
			status character(10) COLLATE pg_catalog."default",
			relatedname character varying(200) COLLATE pg_catalog."default" DEFAULT ''::character varying,
			CONSTRAINT t_documentForProjectPlanTemplate_pkey PRIMARY KEY (docid)
			)
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3509</ID>
    <SQLText>
			CREATE SEQUENCE IF NOT EXISTS public.t_documentForProjectPlanTemplate_docid_seq
			INCREMENT 1
			START 1
			MINVALUE 1
			MAXVALUE 9223372036854775807
			CACHE 1
			OWNED BY t_documentForProjectPlanTemplate.docid;

			ALTER SEQUENCE public.t_documentForProjectPlanTemplate_docid_seq
			OWNER TO postgres;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3510</ID>
    <SQLText>Drop Table t_documentForProjectPlanTemplate</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3511</ID>
    <SQLText>
			CREATE TABLE IF NOT EXISTS public.t_documentForProjectPlanTemplate
			(
			docid bigint NOT NULL DEFAULT nextval('t_document_docid_seq'::regclass),
			relatedtype character(20) COLLATE pg_catalog."default",
			doctypeid bigint,
			doctype character(100) COLLATE pg_catalog."default",
			relatedid bigint,
			docname character varying(200) COLLATE pg_catalog."default",
			description character varying(1000) COLLATE pg_catalog."default",
			address character varying(500) COLLATE pg_catalog."default",
			author character varying(20) COLLATE pg_catalog."default",
			departcode character varying(20) COLLATE pg_catalog."default",
			departname character varying(200) COLLATE pg_catalog."default" DEFAULT ''::character varying,
			uploadmancode character(20) COLLATE pg_catalog."default",
			uploadmanname character(20) COLLATE pg_catalog."default",
			uploadtime timestamp without time zone,
			visible character varying(100) COLLATE pg_catalog."default",
			status character(10) COLLATE pg_catalog."default",
			relatedname character varying(200) COLLATE pg_catalog."default" DEFAULT ''::character varying,
			CONSTRAINT t_documentForProjectPlanTemplate_pkey PRIMARY KEY (docid)
			)
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3512</ID>
    <SQLText>Drop Table t_documentForProjectPlanTemplate;</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3513</ID>
    <SQLText>
			CREATE TABLE IF NOT EXISTS public.t_documentForProjectPlanTemplate
			(
			docid bigint NOT NULL DEFAULT nextval('t_document_docid_seq'::regclass),
			relatedtype character(20) COLLATE pg_catalog."default",
			doctypeid bigint,
			doctype character(100) COLLATE pg_catalog."default",
			relatedid bigint,
			docname character varying(200) COLLATE pg_catalog."default",
			description character varying(1000) COLLATE pg_catalog."default",
			address character varying(500) COLLATE pg_catalog."default",
			author character varying(20) COLLATE pg_catalog."default",
			departcode character varying(20) COLLATE pg_catalog."default",
			departname character varying(200) COLLATE pg_catalog."default" DEFAULT ''::character varying,
			uploadmancode character(20) COLLATE pg_catalog."default",
			uploadmanname character(20) COLLATE pg_catalog."default",
			uploadtime timestamp without time zone,
			visible character varying(100) COLLATE pg_catalog."default",
			status character(10) COLLATE pg_catalog."default",
			relatedname character varying(200) COLLATE pg_catalog."default" DEFAULT ''::character varying,
			CONSTRAINT t_documentForProjectPlanTemplate_pkey PRIMARY KEY (docid)
			)
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3514</ID>
    <SQLText>
			CREATE SEQUENCE IF NOT EXISTS public.t_documentForProjectPlanTemplate_docid_seq
			INCREMENT 1
			START 1
			MINVALUE 1
			MAXVALUE 9223372036854775807
			CACHE 1
			OWNED BY t_documentForProjectPlanTemplate.docid;

			ALTER SEQUENCE public.t_documentForProjectPlanTemplate_docid_seq
			OWNER TO postgres;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3515</ID>
    <SQLText>
			ALTER TABLE public.t_documentForProjectPlanTemplate
			ALTER COLUMN docid SET DEFAULT nextval('t_documentForProjectPlanTemplate_docid_seq'::regclass);
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3516</ID>
    <SQLText>
			CREATE OR REPLACE FUNCTION find_longest_common_substring(str1 text, str2 text)
			RETURNS text AS
			$$

			DECLARE
			len1 INTEGER := LENGTH(str1);
			len2 INTEGER := LENGTH(str2);
			i INTEGER;
			j INTEGER;
			max_len INTEGER := 0;
			end_pos INTEGER;
			lcs_str text := '';
			BEGIN
			-- 使用动态规划找出最长公共子串
			FOR i IN 1..len1 LOOP
			FOR j IN 1..len2 LOOP
			IF SUBSTRING(str1 FROM i FOR 1) = SUBSTRING(str2 FROM j FOR 1) THEN
			IF i = 1 OR j = 1 THEN
			max_len := 1;
			end_pos := j;
			ELSIF SUBSTRING(str1 FROM i-1 FOR max_len) = SUBSTRING(str2 FROM j-max_len FOR max_len) THEN
			max_len := max_len + 1;
			end_pos := j;
			ELSE
			max_len := 1;
			end_pos := j;
			END IF;
			END IF;
			END LOOP;
			END LOOP;

			-- 提取最长公共子串
			IF max_len &gt; 0 THEN
			lcs_str := SUBSTRING(str2 FROM end_pos-max_len+1 FOR max_len);
			END IF;

			RETURN lcs_str;
			END;

			$$
			LANGUAGE plpgsql;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3517</ID>
    <SQLText>Alter Table T_Project Add Column PMCanUpdatePlan char(10) Default 'YES';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3518</ID>
    <SQLText>Update T_Project Set PMCanUpdateplan = 'YES';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3519</ID>
    <SQLText>
			Alter Table T_Project Add Column LockStartupedPlan char(10) Default 'NO';
			Alter Table T_Project Add Column allowpmchangestatus char(10) Default 'NO';
			Alter Table T_Project Add Column autorunwfaftermakeproject char(10) Default 'NO';
			Alter Table T_Project Add Column progressbydetailimpact char(10) Default 'YES';
			Alter Table T_Project Add Column planprogressneedplanerconfirm char(10) Default 'NO';
			Alter Table T_Project Add Column projectstartupneedsupperconfirm char(10) Default 'NO';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3520</ID>
    <SQLText>
			Update T_Project Set LockStartupedPlan = 'NO';
			Update T_Project Set allowpmchangestatus = 'NO';
			Update T_Project Set autorunwfaftermakeproject = 'NO';
			Update T_Project Set progressbydetailimpact = 'YES';
			Update T_Project Set planprogressneedplanerconfirm = 'NO';
			Update T_Project Set projectstartupneedsupperconfirm = 'NO';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3521</ID>
    <SQLText>
			CREATE OR REPLACE VIEW public.v_prorelateduser
			AS
			SELECT a.id,
			a.projectid,
			b.projectcode,
			b.projectname,
			b.projecttype,
			b.status,
			b.begindate,
			b.enddate,
			b.parentid,
			b.customername,
			b.pingpai,
			b.productname,
			a.unithoursalary,
			a.actor,
			a.joindate,
			a.usercode,
			a.username,
			b.pmcode,
			b.pmname,
			b.priority,
			b.usercode AS makemancode,
			b.username AS makemanname,
			b.budget,
			b.manhour,
			b.mannumber,
			b.finishpercent,
			a.status AS mystatus,
			b.status AS prostatus,
			b.customerprojectcode,
			b.confirmedbysupper,
			b.makedate,
			b.ProjectStartupNeedSupperConfirm

			FROM t_relateduser a
			JOIN t_project b ON a.projectid = b.projectid
			WHERE b.status &lt;&gt; ALL (ARRAY['新建'::bpchar, '评审'::bpchar, '隐藏'::bpchar, '删除'::bpchar, '归档'::bpchar]);
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3522</ID>
    <SQLText>SELECT setval('t_project_projectid_seq', (SELECT MAX(ProjectID) FROM T_Project) + 1);</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3523</ID>
    <SQLText>Alter Table T_Project Add Column ProjectPlanStartupStatus char(10) Default 'NO';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3524</ID>
    <SQLText>UPdate T_Project Set ProjectPlanStartupStatus = 'NO';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3525</ID>
    <SQLText>Alter Table public.t_document Add Column MustUploadDoc char(200) Default '';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3526</ID>
    <SQLText>Update T_Document Set MustUploadDoc = '';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3527</ID>
    <SQLText>SELECT setval('t_document_docid_seq', (SELECT MAX(DocID) FROM T_Document) + 1);</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3528</ID>
    <SQLText>
			Update T_ActorGroup Set  GroupName = trim(GroupName);
			Update T_ActorGroup Set  HomeName = trim(GroupName);
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3529</ID>
    <SQLText>Alter Table T_Project Add Column PlanStartupRelatedWorkflowTemplate char(50) Default '';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3530</ID>
    <SQLText>Update T_Project Set PlanStartupRelatedWorkflowTemplate = '';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3531</ID>
    <SQLText>Update public.t_userattendancerule Set Status = '在用' Where Status = '处理中' or Status = '活动'</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3532</ID>
    <SQLText>
			Alter Table public.t_customer Add Column SimpleName Char(60) Default '';
			Alter Table public.t_customer Add Column WorkSiteURL Char(100) Default '';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3533</ID>
    <SQLText>
			Update T_Customer Set SimpleName = customername;
			Update T_Customer Set WorkSiteURL = WebSite;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3534</ID>
    <SQLText>CREATE EXTENSION IF NOT EXISTS tablefunc;</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3535</ID>
    <SQLText>
			CREATE OR REPLACE FUNCTION f_userattendancereport(
			startdate text,
			enddate text,
			departcode text,
			username text
			)
			RETURNS text AS $$
			declare
			SqlCol text;
			MonthdaysSql VARCHAR(2000);
			UserAttendanceRecordSql VARCHAR(2000);
			Sql1 text;
			Sql2 text;
			Sql3 text;
			Sql4 text;
			LeaveSql text;
			OvertimeSql text;
			SqlDetail text;
			sqltotal text;
			recreport record;
			jsonreport text;
			BEGIN

			SELECT 'SELECT to_char(a.AttendanceDate, ''YYYY-MM-DD'') AttendanceDate,case WHEN c.Id is not null then 0
			when DATE_PART(''dow'',a.AttendanceDate) = 0 OR DATE_PART(''dow'',a.AttendanceDate)=6 OR b.ID IS NOT NULL THEN 1 ELSE 0 END IsHoliday
			FROM (SELECT generate_series(to_date('''||StartDate||''', ''YYYY-MM-DD''),to_date('''||EndDate||''', ''YYYY-MM-DD''),INTERVAL ''1 day'') as AttendanceDate) a
			LEFT JOIN T_FestivalsDaySet b ON a.AttendanceDate=b.FestivalsDate
			left join T_FestivalsExchangeDaySet c on a.AttendanceDate=c.ExchangeDate ' into MonthdaysSql;

			SELECT ' SELECT UserCode,to_char(AttendanceDate,''YYYY-MM-DD'') AttendanceDate,LateMinute,EarlyMinute,LargestDistance,
			CASE WHEN NCheckInIsMust=''YES'' THEN 1 ELSE 0 END NCheckInIsMust,CASE WHEN NCheckOutIsMust=''YES'' THEN 1 ELSE 0 END NCheckOutIsMust,
			CASE WHEN MCheckInIsMust=''YES'' THEN MCheckIn
			WHEN NCheckInIsMust=''YES'' THEN NCheckIn
			ELSE NULL END CheckIn,
			CASE WHEN ACheckOutIsMust=''YES'' THEN ACheckOut
			WHEN NCheckOutIsMust=''YES'' THEN NCheckOut
			ELSE NULL END CheckOut,
			CASE WHEN MCheckInIsMust=''YES'' THEN COALESCE(MCheckInAddress,'''')
			WHEN NCheckInIsMust=''YES'' THEN COALESCE(NCheckInAddress,'''')
			ELSE NULL END CheckInAddress,
			CASE WHEN MCheckInIsMust=''YES'' THEN COALESCE(char_length(MCheckInAddress),0)
			WHEN NCheckInIsMust=''YES'' THEN COALESCE(char_length(NCheckInAddress),0)
			ELSE 0 END CheckInAddressLen,
			CASE WHEN ACheckOutIsMust=''YES'' THEN COALESCE(ACheckOutAddress,'''')
			WHEN NCheckOutIsMust=''YES'' THEN COALESCE(NCheckOutAddress,'''')
			ELSE NULL END CheckOutAddress,
			CASE WHEN ACheckOutIsMust=''YES'' THEN COALESCE(char_length(ACheckOutAddress),0)
			WHEN NCheckOutIsMust=''YES'' THEN COALESCE(char_length(NCheckOutAddress),0)
			ELSE 0 END CheckOutAddressLen,
			CASE WHEN MCheckInIsMust=''YES'' THEN MCheckInDistance
			WHEN NCheckInIsMust=''YES'' THEN NCheckInDistance
			ELSE NULL END CheckInDistance,
			CASE WHEN ACheckOutIsMust=''YES'' THEN ACheckOutDistance
			WHEN NCheckOutIsMust=''YES'' THEN NCheckOutDistance
			ELSE NULL END CheckOutDistance
			FROM T_UserAttendanceRecord
			where AttendanceDate &gt;= '''||StartDate||''' AND  AttendanceDate&lt; to_date('''||EndDate||''',''YYYY-MM-DD'')+INTERVAL ''1 day''  '
			into UserAttendanceRecordSql;

			SELECT ' SELECT a.姓名,a.部门,a.工号,a.职位,b.*,
			CAST(a.出勤天数-COALESCE(f.HourNum,0)/8 as decimal(5,3)) 出勤天数,a.应出勤天数,a.迟到次数,a.迟到时长,a.旷工迟到次数,a.早退次数,a.早退时长,a.旷工天数,a.夜班天数,
			d.*,c.*
			FROM(SELECT MIN(a.UserName) 姓名,MIN(a.DepartName)部门,MIN(a.UserCode)工号,MIN(a.Duty)职位,
			SUM(case when ((b.CheckInAddressLen&gt;0 AND (b.CheckInDistance&lt;=b.LargestDistance or b.CheckInDistance=0))
			and (b.CheckOutAddressLen&gt;0 AND (b.CheckOutDistance&lt;=b.LargestDistance or b.CheckOutDistance=0)) or l.HourNum&gt;=8) AND k.IsHoliday=0 then 1 else 0 end ) 出勤天数,
			sum(case when k.IsHoliday=0 then 1 else 0 end) 应出勤天数, SUM(CASE WHEN COALESCE(b.LateMinute,0)&gt;0 THEN 1 ELSE 0 end) 迟到次数,
			SUM(COALESCE(b.LateMinute,0)) 迟到时长,SUM(case when (COALESCE(b.CheckInAddressLen,0)=0 OR  b.CheckInDistance&gt;b.LargestDistance) AND (COALESCE(b.CheckOutAddressLen,0)=0 or b.CheckOutDistance&gt;b.LargestDistance) AND k.IsHoliday=0 and l.Creator is null then 1 else 0 end )
			+SUM(CASE WHEN COALESCE(b.LateMinute,0)&gt;0 THEN 1 ELSE 0 end) 旷工迟到次数,
			SUM(CASE WHEN COALESCE(b.EarlyMinute,0)&gt;0 THEN 1 ELSE 0 end) 早退次数,SUM(COALESCE(b.EarlyMinute,0)) 早退时长,
			SUM(case when (COALESCE(b.CheckInAddressLen,0)=0 OR  b.CheckInDistance&gt;b.LargestDistance) AND (COALESCE(b.CheckOutAddressLen,0)=0 or b.CheckOutDistance&gt;b.LargestDistance) AND k.IsHoliday=0 and l.Creator is null then 1 else 0 end ) 旷工天数,
			SUM(CASE WHEN b.NCheckInIsMust=1 AND COALESCE(b.LateMinute,0)=0 AND (b.CheckInDistance&lt;=b.LargestDistance OR b.CheckInDistance=0)
			AND b.NCheckOutIsMust=1 AND COALESCE(b.EarlyMinute,0)=0 AND (b.CheckOutDistance&lt;=b.LargestDistance OR b.CheckOutDistance=0) THEN 1 ELSE 0 END) 夜班天数
			FROM T_ProjectMember a
			cross join ('||MonthdaysSql||') k '
			into Sql1;


			SELECT  ' LEFT JOIN ( '||UserAttendanceRecordSql||' ) b ON a.UserCode=b.UserCode AND b.AttendanceDate=k.AttendanceDate
			left join(select a.Creator,to_char(a.StartTime,''YYYY-MM-DD'') LeaveDate,sum(a.HourNum) HourNum from T_LeaveApplyForm a inner join T_WorkFlow b on a.ID=b.RelatedID
			where b.Status in (''通过'',''结案'') and b.WLType = ''考勤管理'' and  b.RelatedType = ''请假''
			group by a.Creator,to_char(a.StartTime,''YYYY-MM-DD'')) l on l.Creator=a.UserCode and k.AttendanceDate=l.LeaveDate
			WHERE a.DepartCode = '''||DepartCode||''' AND a.UserName = '''||UserName||'''
			GROUP BY a.UserCode) a  ' into Sql2;


			SELECT array_to_string(ARRAY(SELECT Type || ' int' FROM T_LeaveType order by sortnumber),',') into LeaveSql;

			select ' LEFT JOIN (select * from crosstab(
			''SELECT a.UserCode 工号1,c.Type LeaveType,COALESCE(b.HourNum,0) HourNum
			FROM T_ProjectMember a CROSS JOIN T_LeaveType c
			LEFT JOIN (select a.* from T_LeaveApplyForm a inner join T_WorkFlow b on a.ID=b.RelatedID
			where b.Status in (''''通过'''',''''结案'''') and b.WLType = ''''考勤管理'''' and  b.RelatedType = ''''请假'''') b ON a.UserCode=b.Creator AND c.Type=b.LeaveType AND to_date('''''||EndDate||''''',''''YYYY-MM-DD'''')&lt;b.EndTime AND to_date('''''||StartDate||''''',''''YYYY-MM-DD'''')&gt;=b.StartTime
			WHERE a.DepartCode = '''''||DepartCode||''''' AND a.UserName = '''''||UserName||''''' '', ''SELECT Type FROM T_LeaveType order by sortnumber'')
			as t(工号1 varchar(20),{0})
			) b ON a.工号=b.工号1
			LEFT JOIN ( ' into sql3;

			SELECT REPLACE(Sql3,'{0}',LeaveSql) into Sql3;

			select string_agg('"'||interval || '" text',',') from(
			select generate_series(1,EXTRACT(DAY FROM AGE(to_date(EndDate, 'YYYY-MM-DD')+INTERVAL '1 day',to_date(StartDate, 'YYYY-MM-DD')))) as interval
			) itable into SqlCol;

			select 'select * from crosstab(''SELECT a.UserCode,DATE_PART(''''day'''',a.AttendanceDate::date) AttendanceDay,
			CASE WHEN a.IsHoliday=1 THEN CASE WHEN b.UserCode IS NOT NULL THEN ''''休息并打卡'''' ELSE ''''休息'''' END
			ELSE
			CASE WHEN a.LeaveDetail IS NOT NULL THEN a.LeaveDetail
			WHEN b.UserCode IS NULL THEN ''''旷工''''
			WHEN (b.CheckInAddressLen&gt;0 AND b.LateMinute=0 AND (b.CheckInDistance&lt;=b.LargestDistance or b.CheckInDistance=0))
			THEN CASE WHEN (b.CheckOutAddressLen&gt;0 AND b.EarlyMinute=0 AND (b.CheckOutDistance&lt;=b.LargestDistance or b.CheckOutDistance=0))  THEN ''''正常''''
			WHEN b.CheckOutAddressLen=0 THEN ''''下班缺卡''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.EarlyMinute&gt;0 AND b.CheckOutDistance&gt;b.LargestDistance THEN ''''下班外勤，下班早退''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.EarlyMinute&gt;0 THEN ''''下班早退''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.CheckOutDistance&gt;b.LargestDistance THEN ''''下班外勤'''' END
			WHEN b.CheckInAddressLen=0
			THEN CASE WHEN (b.CheckOutAddressLen&gt;0 AND b.EarlyMinute=0 AND (b.CheckOutDistance&lt;=b.LargestDistance or b.CheckOutDistance=0))  THEN ''''上班缺卡''''
			WHEN b.CheckOutAddressLen=0 THEN ''''旷工''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.EarlyMinute&gt;0 AND b.CheckOutDistance&gt;b.LargestDistance THEN ''''上班缺卡，下班外勤，下班早退''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.EarlyMinute&gt;0 THEN ''''上班缺卡，下班早退''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.CheckOutDistance&gt;b.LargestDistance THEN ''''上班缺卡，下班外勤'''' END
			WHEN b.CheckInAddressLen&gt;0 AND b.LateMinute&gt;0 AND b.CheckInDistance&gt;b.LargestDistance
			THEN CASE WHEN (b.CheckOutAddressLen&gt;0 AND b.EarlyMinute=0 AND (b.CheckOutDistance&lt;=b.LargestDistance or b.CheckOutDistance=0))  THEN ''''上班外勤，上班迟到''''
			WHEN b.CheckOutAddressLen=0 THEN ''''上班外勤，上班迟到，下班缺卡''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.EarlyMinute&gt;0 AND b.CheckOutDistance&gt;b.LargestDistance THEN ''''上班外勤，上班迟到，下班外勤，下班早退''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.EarlyMinute&gt;0 THEN ''''上班外勤，上班迟到，下班早退''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.CheckOutDistance&gt;b.LargestDistance THEN ''''上班外勤，上班迟到，下班外勤'''' END
			WHEN b.CheckInAddressLen&gt;0 AND b.LateMinute&gt;0 AND (b.CheckInDistance&lt;=b.LargestDistance or b.CheckInDistance=0)
			THEN CASE WHEN (b.CheckOutAddressLen&gt;0 AND b.EarlyMinute=0 AND (b.CheckOutDistance&lt;=b.LargestDistance or b.CheckOutDistance=0))  THEN ''''上班迟到''''
			WHEN b.CheckOutAddressLen=0 THEN ''''上班迟到，下班缺卡''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.EarlyMinute&gt;0 AND b.CheckOutDistance&gt;b.LargestDistance THEN ''''上班迟到，下班外勤，下班早退''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.EarlyMinute&gt;0 THEN ''''上班迟到，下班早退''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.CheckOutDistance&gt;b.LargestDistance THEN ''''上班迟到，下班外勤'''' END
			WHEN b.CheckInAddressLen&gt;0 AND b.LateMinute=0 AND b.CheckInDistance&gt;b.LargestDistance
			THEN CASE WHEN (b.CheckOutAddressLen&gt;0 AND b.EarlyMinute=0 AND (b.CheckOutDistance&lt;=b.LargestDistance or b.CheckOutDistance=0))  THEN ''''上班外勤''''
			WHEN b.CheckOutAddressLen=0 THEN ''''上班外勤，下班缺卡''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.EarlyMinute&gt;0 AND b.CheckOutDistance&gt;b.LargestDistance THEN ''''上班外勤，下班外勤，下班早退''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.EarlyMinute&gt;0 THEN ''''上班外勤，下班早退''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.CheckOutDistance&gt;b.LargestDistance THEN ''''上班外勤，下班外勤'''' END
			END
			END|| case when a.OvertimeDetail is not null then '''' ''''||a.OvertimeDetail else '''''''' end Detail  FROM (
			SELECT a.UserCode,k.AttendanceDate,MIN(k.IsHoliday)IsHoliday,
			trim(leading '''','''' from (
			select string_agg(qjia,'''''''') qjv from (
			select DISTINCT '''',''''||LeaveType||'''' ''''||to_char(StartTime,''''YYYY-MM-DD'''')||''''到''''||to_char(EndTime,''''YYYY-MM-DD'''') as qjia
			FROM (
			select a.* from T_LeaveApplyForm a inner join T_WorkFlow b on a.ID=b.RelatedID
			where b.Status in (''''通过'''',''''结案'''') and b.WLType = ''''考勤管理'''' and  b.RelatedType = ''''请假'''') m WHERE m.Creator = a.UserCode AND to_date(k.AttendanceDate,''''YYYY-MM-DD'''') BETWEEN m.StartTime AND m.EndTime) lty))LeaveDetail,
			trim(leading '''','''' from (
			select DISTINCT '''',''''||OvertimeType||'''' ''''||SUBSTRING(COALESCE(OverTimeCheckInTime,''''''''),1,16)||''''到''''||SUBSTRING(COALESCE(OverTimeCheckOutTime,''''''''),1,16)
			FROM (
			select a.* from T_OvertimeApplyForm a inner join T_WorkFlow b on a.ID=b.RelatedID
			where b.Status in (''''通过'''',''''结案'''') and b.WLType = ''''考勤管理'''' and  b.RelatedType = ''''加班'''') m WHERE m.Creator = a.UserCode AND to_date(k.AttendanceDate,''''YYYY-MM-DD'''') BETWEEN m.StartTime AND m.EndTime)) OvertimeDetail
			FROM T_ProjectMember a
			CROSS JOIN (
			SELECT to_char(a.AttendanceDate, ''''YYYY-MM-DD'''') AttendanceDate,case WHEN c.Id is not null then 0
			when DATE_PART(''''dow'''',a.AttendanceDate) = 0 OR DATE_PART(''''dow'''',a.AttendanceDate)=6 OR b.ID IS NOT NULL THEN 1 ELSE 0 END IsHoliday
			FROM (SELECT generate_series(to_date('''''||StartDate||''''', ''''YYYY-MM-DD''''),to_date('''''||EndDate||''''', ''''YYYY-MM-DD''''),INTERVAL ''''1 day'''') as AttendanceDate) a
			LEFT JOIN T_FestivalsDaySet b ON a.AttendanceDate=b.FestivalsDate
			left join T_FestivalsExchangeDaySet c on a.AttendanceDate=c.ExchangeDate ) k
			LEFT JOIN (select a.* from T_LeaveApplyForm a inner join T_WorkFlow b on a.ID=b.RelatedID
			where b.Status in (''''通过'''',''''结案'''') and b.WLType = ''''考勤管理'''' and  b.RelatedType = ''''请假'''') b
			ON a.UserCode=b.Creator AND to_date(k.AttendanceDate,''''YYYY-MM-DD'''') BETWEEN b.StartTime AND b.EndTime
			LEFT JOIN (select a.* from T_OvertimeApplyForm a inner join T_WorkFlow b on a.ID=b.RelatedID
			where b.Status in (''''通过'''',''''结案'''') and b.WLType = ''''考勤管理'''' and  b.RelatedType = ''''加班'''') c
			ON a.UserCode=c.Creator AND to_date(k.AttendanceDate,''''YYYY-MM-DD'''') BETWEEN c.StartTime AND c.EndTime
			WHERE a.DepartCode = '''''||DepartCode||''''' AND a.UserName = '''''||UserName||'''''
			GROUP BY a.UserCode,k.AttendanceDate) a
			LEFT JOIN (
			SELECT UserCode,to_char(AttendanceDate,''''YYYY-MM-DD'''') AttendanceDate,LateMinute,EarlyMinute,LargestDistance,
			CASE WHEN NCheckInIsMust=''''YES'''' THEN 1 ELSE 0 END NCheckInIsMust,CASE WHEN NCheckOutIsMust=''''YES'''' THEN 1 ELSE 0 END NCheckOutIsMust,
			CASE WHEN MCheckInIsMust=''''YES'''' THEN MCheckIn
			WHEN NCheckInIsMust=''''YES'''' THEN NCheckIn
			ELSE NULL END CheckIn,
			CASE WHEN ACheckOutIsMust=''''YES'''' THEN ACheckOut
			WHEN NCheckOutIsMust=''''YES'''' THEN NCheckOut
			ELSE NULL END CheckOut,
			CASE WHEN MCheckInIsMust=''''YES'''' THEN COALESCE(MCheckInAddress,'''''''')
			WHEN NCheckInIsMust=''''YES'''' THEN COALESCE(NCheckInAddress,'''''''')
			ELSE NULL END CheckInAddress,
			CASE WHEN MCheckInIsMust=''''YES'''' THEN COALESCE(char_length(MCheckInAddress),0)
			WHEN NCheckInIsMust=''''YES'''' THEN COALESCE(char_length(NCheckInAddress),0)
			ELSE 0 END CheckInAddressLen,
			CASE WHEN ACheckOutIsMust=''''YES'''' THEN COALESCE(ACheckOutAddress,'''''''')
			WHEN NCheckOutIsMust=''''YES'''' THEN COALESCE(NCheckOutAddress,'''''''')
			ELSE NULL END CheckOutAddress,
			CASE WHEN ACheckOutIsMust=''''YES'''' THEN COALESCE(char_length(ACheckOutAddress),0)
			WHEN NCheckOutIsMust=''''YES'''' THEN COALESCE(char_length(NCheckOutAddress),0)
			ELSE 0 END CheckOutAddressLen,
			CASE WHEN MCheckInIsMust=''''YES'''' THEN MCheckInDistance
			WHEN NCheckInIsMust=''''YES'''' THEN NCheckInDistance
			ELSE NULL END CheckInDistance,
			CASE WHEN ACheckOutIsMust=''''YES'''' THEN ACheckOutDistance
			WHEN NCheckOutIsMust=''''YES'''' THEN NCheckOutDistance
			ELSE NULL END CheckOutDistance
			FROM T_UserAttendanceRecord
			where AttendanceDate &gt;= '''''||StartDate||''''' AND  AttendanceDate&lt; to_date('''''||EndDate||''''',''''YYYY-MM-DD'''')+INTERVAL ''''1 day''''  ) b
			ON a.UserCode=b.UserCode AND b.AttendanceDate=a.AttendanceDate'',''select generate_series(1, EXTRACT(DAY FROM AGE(to_date('''''||EndDate||''''', ''''YYYY-MM-DD'''')+INTERVAL ''''1 day'''',to_date('''''||StartDate||''''', ''''YYYY-MM-DD'''')))) as inter''
			) AS  t(usercode varchar(20),{0})' into SqlDetail;

			select replace( SqlDetail , '{0}' , SqlCol) into SqlDetail;


			SELECT array_to_string(ARRAY(SELECT Type || ' int' FROM T_OvertimeType),',') into OvertimeSql;

			--按分钟计算实际加班时间 误差多加1分钟  因为午夜打卡时间分别为23:59和00:01
			SELECT ') c ON a.工号=c.UserCode
			LEFT JOIN (select * from crosstab(
			''SELECT a.UserCode 工号2,c.Type OvertimeType,FLOOR(COALESCE(DATEDIFF(''''mi'''',
			CASE WHEN b.OverTimeCheckInTime::timestamp without time zone&lt;b.StartTime THEN b.StartTime ELSE b.OverTimeCheckInTime::timestamp without time zone END,
			CASE WHEN b.OverTimeCheckOutTime::timestamp without time zone&gt;b.EndTime THEN b.EndTime ELSE b.OverTimeCheckOutTime::timestamp without time zone END)+1,0)*1.0/60) HourNum
			FROM T_ProjectMember a
			CROSS JOIN T_OvertimeType c
			LEFT JOIN (select a.* from T_OvertimeApplyForm a inner join T_WorkFlow b on a.ID=b.RelatedID
			where b.Status in (''''通过'''',''''结案'''') and b.WLType = ''''考勤管理'''' and  b.RelatedType = ''''加班'''') b ON a.UserCode=b.Creator AND '''''||StartDate||'''''&lt;b.EndTime AND '''''||EndDate||'''''&gt;=b.StartTime
			WHERE a.DepartCode = '''''||DepartCode||''''' AND a.UserName = '''''||UserName||''''' ''
			,''SELECT distinct c.Type from T_OvertimeType c order by 1 '')
			as t(工号2 varchar(20),工作日加班 int,节假日加班 int,周末加班 int)
			) d ON a.工号=d.工号2
			LEFT JOIN (		select a.Creator,SUM(COALESCE(a.HourNum,0)) HourNum from T_LeaveApplyForm a inner join T_WorkFlow b on a.ID=b.RelatedID
			where b.Status in (''通过'',''结案'') and b.WLType = ''考勤管理'' and  b.RelatedType = ''请假'' AND '''||StartDate||'''::timestamp without time zone&lt;a.EndTime AND '''||EndDate||'''::timestamp without time zone&gt;=a.StartTime
			GROUP BY a.Creator) f ON a.工号=f.Creator
			order by a.部门,a.姓名' into Sql4;

			SELECT REPLACE(Sql4,'{0}',OvertimeSql) into Sql4;

			select Sql1||Sql2||Sql3||SqlDetail||Sql4 into sqltotal;
			execute sqltotal into recreport;
			SELECT json_agg(row_to_json(recreport)) into jsonreport;

			RETURN recreport;

			END;
			$$ LANGUAGE plpgsql;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3536</ID>
    <SQLText>
			CREATE OR REPLACE FUNCTION f_userattendancereport(
			startdate text,
			enddate text,
			departcode text,
			username text
			)
			RETURNS text AS $$
			declare
			SqlCol text;
			MonthdaysSql VARCHAR(2000);
			UserAttendanceRecordSql VARCHAR(2000);
			Sql1 text;
			Sql2 text;
			Sql3 text;
			Sql4 text;
			LeaveSql text;
			OvertimeSql text;
			SqlDetail text;
			sqltotal text;
			recreport record;
			jsonreport text;
			BEGIN

			SELECT 'SELECT to_char(a.AttendanceDate, ''YYYY-MM-DD'') AttendanceDate,case WHEN c.Id is not null then 0
			when DATE_PART(''dow'',a.AttendanceDate) = 0 OR DATE_PART(''dow'',a.AttendanceDate)=6 OR b.ID IS NOT NULL THEN 1 ELSE 0 END IsHoliday
			FROM (SELECT generate_series(to_date('''||StartDate||''', ''YYYY-MM-DD''),to_date('''||EndDate||''', ''YYYY-MM-DD''),INTERVAL ''1 day'') as AttendanceDate) a
			LEFT JOIN T_FestivalsDaySet b ON a.AttendanceDate=b.FestivalsDate
			left join T_FestivalsExchangeDaySet c on a.AttendanceDate=c.ExchangeDate ' into MonthdaysSql;

			SELECT ' SELECT UserCode,to_char(AttendanceDate,''YYYY-MM-DD'') AttendanceDate,LateMinute,EarlyMinute,LargestDistance,
			CASE WHEN NCheckInIsMust=''YES'' THEN 1 ELSE 0 END NCheckInIsMust,CASE WHEN NCheckOutIsMust=''YES'' THEN 1 ELSE 0 END NCheckOutIsMust,
			CASE WHEN MCheckInIsMust=''YES'' THEN MCheckIn
			WHEN NCheckInIsMust=''YES'' THEN NCheckIn
			ELSE NULL END CheckIn,
			CASE WHEN ACheckOutIsMust=''YES'' THEN ACheckOut
			WHEN NCheckOutIsMust=''YES'' THEN NCheckOut
			ELSE NULL END CheckOut,
			CASE WHEN MCheckInIsMust=''YES'' THEN COALESCE(MCheckInAddress,'''')
			WHEN NCheckInIsMust=''YES'' THEN COALESCE(NCheckInAddress,'''')
			ELSE NULL END CheckInAddress,
			CASE WHEN MCheckInIsMust=''YES'' THEN COALESCE(char_length(MCheckInAddress),0)
			WHEN NCheckInIsMust=''YES'' THEN COALESCE(char_length(NCheckInAddress),0)
			ELSE 0 END CheckInAddressLen,
			CASE WHEN ACheckOutIsMust=''YES'' THEN COALESCE(ACheckOutAddress,'''')
			WHEN NCheckOutIsMust=''YES'' THEN COALESCE(NCheckOutAddress,'''')
			ELSE NULL END CheckOutAddress,
			CASE WHEN ACheckOutIsMust=''YES'' THEN COALESCE(char_length(ACheckOutAddress),0)
			WHEN NCheckOutIsMust=''YES'' THEN COALESCE(char_length(NCheckOutAddress),0)
			ELSE 0 END CheckOutAddressLen,
			CASE WHEN MCheckInIsMust=''YES'' THEN MCheckInDistance
			WHEN NCheckInIsMust=''YES'' THEN NCheckInDistance
			ELSE NULL END CheckInDistance,
			CASE WHEN ACheckOutIsMust=''YES'' THEN ACheckOutDistance
			WHEN NCheckOutIsMust=''YES'' THEN NCheckOutDistance
			ELSE NULL END CheckOutDistance
			FROM T_UserAttendanceRecord
			where AttendanceDate &gt;= '''||StartDate||''' AND  AttendanceDate&lt; to_date('''||EndDate||''',''YYYY-MM-DD'')+INTERVAL ''1 day''  '
			into UserAttendanceRecordSql;

			SELECT ' SELECT a.姓名,a.部门,a.工号,a.职位,b.*,
			CAST(a.出勤天数-COALESCE(f.HourNum,0)/8 as decimal(5,3)) 出勤天数,a.应出勤天数,a.迟到次数,a.迟到时长,a.旷工迟到次数,a.早退次数,a.早退时长,a.旷工天数,a.夜班天数,
			d.*,c.*
			FROM(SELECT MIN(a.UserName) 姓名,MIN(a.DepartName)部门,MIN(a.UserCode)工号,MIN(a.Duty)职位,
			SUM(case when ((b.CheckInAddressLen&gt;0 AND (b.CheckInDistance&lt;=b.LargestDistance or b.CheckInDistance=0))
			and (b.CheckOutAddressLen&gt;0 AND (b.CheckOutDistance&lt;=b.LargestDistance or b.CheckOutDistance=0)) or l.HourNum&gt;=8) AND k.IsHoliday=0 then 1 else 0 end ) 出勤天数,
			sum(case when k.IsHoliday=0 then 1 else 0 end) 应出勤天数, SUM(CASE WHEN COALESCE(b.LateMinute,0)&gt;0 THEN 1 ELSE 0 end) 迟到次数,
			SUM(COALESCE(b.LateMinute,0)) 迟到时长,SUM(case when (COALESCE(b.CheckInAddressLen,0)=0 OR  b.CheckInDistance&gt;b.LargestDistance) AND (COALESCE(b.CheckOutAddressLen,0)=0 or b.CheckOutDistance&gt;b.LargestDistance) AND k.IsHoliday=0 and l.Creator is null then 1 else 0 end )
			+SUM(CASE WHEN COALESCE(b.LateMinute,0)&gt;0 THEN 1 ELSE 0 end) 旷工迟到次数,
			SUM(CASE WHEN COALESCE(b.EarlyMinute,0)&gt;0 THEN 1 ELSE 0 end) 早退次数,SUM(COALESCE(b.EarlyMinute,0)) 早退时长,
			SUM(case when (COALESCE(b.CheckInAddressLen,0)=0 OR  b.CheckInDistance&gt;b.LargestDistance) AND (COALESCE(b.CheckOutAddressLen,0)=0 or b.CheckOutDistance&gt;b.LargestDistance) AND k.IsHoliday=0 and l.Creator is null then 1 else 0 end ) 旷工天数,
			SUM(CASE WHEN b.NCheckInIsMust=1 AND COALESCE(b.LateMinute,0)=0 AND (b.CheckInDistance&lt;=b.LargestDistance OR b.CheckInDistance=0)
			AND b.NCheckOutIsMust=1 AND COALESCE(b.EarlyMinute,0)=0 AND (b.CheckOutDistance&lt;=b.LargestDistance OR b.CheckOutDistance=0) THEN 1 ELSE 0 END) 夜班天数
			FROM T_ProjectMember a
			cross join ('||MonthdaysSql||') k '
			into Sql1;


			SELECT  ' LEFT JOIN ( '||UserAttendanceRecordSql||' ) b ON a.UserCode=b.UserCode AND b.AttendanceDate=k.AttendanceDate
			left join(select a.Creator,to_char(a.StartTime,''YYYY-MM-DD'') LeaveDate,sum(a.HourNum) HourNum from T_LeaveApplyForm a inner join T_WorkFlow b on a.ID=b.RelatedID
			where b.Status in (''通过'',''结案'') and b.WLType = ''考勤管理'' and  b.RelatedType = ''请假''
			group by a.Creator,to_char(a.StartTime,''YYYY-MM-DD'')) l on l.Creator=a.UserCode and k.AttendanceDate=l.LeaveDate
			WHERE a.DepartCode like '''||DepartCode||''' AND a.UserName like '''||UserName||'''
			GROUP BY a.UserCode) a  ' into Sql2;


			SELECT array_to_string(ARRAY(SELECT Type || ' int' FROM T_LeaveType order by sortnumber),',') into LeaveSql;

			select ' LEFT JOIN (select * from crosstab(
			''SELECT a.UserCode 工号1,c.Type LeaveType,COALESCE(b.HourNum,0) HourNum
			FROM T_ProjectMember a CROSS JOIN T_LeaveType c
			LEFT JOIN (select a.* from T_LeaveApplyForm a inner join T_WorkFlow b on a.ID=b.RelatedID
			where b.Status in (''''通过'''',''''结案'''') and b.WLType = ''''考勤管理'''' and  b.RelatedType = ''''请假'''') b ON a.UserCode=b.Creator AND c.Type=b.LeaveType AND to_date('''''||EndDate||''''',''''YYYY-MM-DD'''')&lt;b.EndTime AND to_date('''''||StartDate||''''',''''YYYY-MM-DD'''')&gt;=b.StartTime
			WHERE a.DepartCode like '''''||DepartCode||''''' AND a.UserName like '''''||UserName||''''' '', ''SELECT Type FROM T_LeaveType order by sortnumber'')
			as t(工号1 varchar(20),{0})
			) b ON a.工号=b.工号1
			LEFT JOIN ( ' into sql3;

			SELECT REPLACE(Sql3,'{0}',LeaveSql) into Sql3;

			select string_agg('"'||interval || '" text',',') from(
			select generate_series(1,cast(EXTRACT(DAY FROM AGE(to_date(EndDate, 'YYYY-MM-DD')+INTERVAL '1 day',to_date(StartDate, 'YYYY-MM-DD'))) as integer)) as interval
			) itable into SqlCol;

			select 'select * from crosstab(''SELECT a.UserCode,DATE_PART(''''day'''',a.AttendanceDate::date) AttendanceDay,
			CASE WHEN a.IsHoliday=1 THEN CASE WHEN b.UserCode IS NOT NULL THEN ''''休息并打卡'''' ELSE ''''休息'''' END
			ELSE
			CASE WHEN a.LeaveDetail IS NOT NULL THEN a.LeaveDetail
			WHEN b.UserCode IS NULL THEN ''''旷工''''
			WHEN (b.CheckInAddressLen&gt;0 AND b.LateMinute=0 AND (b.CheckInDistance&lt;=b.LargestDistance or b.CheckInDistance=0))
			THEN CASE WHEN (b.CheckOutAddressLen&gt;0 AND b.EarlyMinute=0 AND (b.CheckOutDistance&lt;=b.LargestDistance or b.CheckOutDistance=0))  THEN ''''正常''''
			WHEN b.CheckOutAddressLen=0 THEN ''''下班缺卡''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.EarlyMinute&gt;0 AND b.CheckOutDistance&gt;b.LargestDistance THEN ''''下班外勤，下班早退''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.EarlyMinute&gt;0 THEN ''''下班早退''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.CheckOutDistance&gt;b.LargestDistance THEN ''''下班外勤'''' END
			WHEN b.CheckInAddressLen=0
			THEN CASE WHEN (b.CheckOutAddressLen&gt;0 AND b.EarlyMinute=0 AND (b.CheckOutDistance&lt;=b.LargestDistance or b.CheckOutDistance=0))  THEN ''''上班缺卡''''
			WHEN b.CheckOutAddressLen=0 THEN ''''旷工''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.EarlyMinute&gt;0 AND b.CheckOutDistance&gt;b.LargestDistance THEN ''''上班缺卡，下班外勤，下班早退''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.EarlyMinute&gt;0 THEN ''''上班缺卡，下班早退''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.CheckOutDistance&gt;b.LargestDistance THEN ''''上班缺卡，下班外勤'''' END
			WHEN b.CheckInAddressLen&gt;0 AND b.LateMinute&gt;0 AND b.CheckInDistance&gt;b.LargestDistance
			THEN CASE WHEN (b.CheckOutAddressLen&gt;0 AND b.EarlyMinute=0 AND (b.CheckOutDistance&lt;=b.LargestDistance or b.CheckOutDistance=0))  THEN ''''上班外勤，上班迟到''''
			WHEN b.CheckOutAddressLen=0 THEN ''''上班外勤，上班迟到，下班缺卡''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.EarlyMinute&gt;0 AND b.CheckOutDistance&gt;b.LargestDistance THEN ''''上班外勤，上班迟到，下班外勤，下班早退''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.EarlyMinute&gt;0 THEN ''''上班外勤，上班迟到，下班早退''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.CheckOutDistance&gt;b.LargestDistance THEN ''''上班外勤，上班迟到，下班外勤'''' END
			WHEN b.CheckInAddressLen&gt;0 AND b.LateMinute&gt;0 AND (b.CheckInDistance&lt;=b.LargestDistance or b.CheckInDistance=0)
			THEN CASE WHEN (b.CheckOutAddressLen&gt;0 AND b.EarlyMinute=0 AND (b.CheckOutDistance&lt;=b.LargestDistance or b.CheckOutDistance=0))  THEN ''''上班迟到''''
			WHEN b.CheckOutAddressLen=0 THEN ''''上班迟到，下班缺卡''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.EarlyMinute&gt;0 AND b.CheckOutDistance&gt;b.LargestDistance THEN ''''上班迟到，下班外勤，下班早退''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.EarlyMinute&gt;0 THEN ''''上班迟到，下班早退''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.CheckOutDistance&gt;b.LargestDistance THEN ''''上班迟到，下班外勤'''' END
			WHEN b.CheckInAddressLen&gt;0 AND b.LateMinute=0 AND b.CheckInDistance&gt;b.LargestDistance
			THEN CASE WHEN (b.CheckOutAddressLen&gt;0 AND b.EarlyMinute=0 AND (b.CheckOutDistance&lt;=b.LargestDistance or b.CheckOutDistance=0))  THEN ''''上班外勤''''
			WHEN b.CheckOutAddressLen=0 THEN ''''上班外勤，下班缺卡''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.EarlyMinute&gt;0 AND b.CheckOutDistance&gt;b.LargestDistance THEN ''''上班外勤，下班外勤，下班早退''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.EarlyMinute&gt;0 THEN ''''上班外勤，下班早退''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.CheckOutDistance&gt;b.LargestDistance THEN ''''上班外勤，下班外勤'''' END
			END
			END|| case when a.OvertimeDetail is not null then '''' ''''||a.OvertimeDetail else '''''''' end Detail  FROM (
			SELECT a.UserCode,k.AttendanceDate,MIN(k.IsHoliday)IsHoliday,
			trim(leading '''','''' from (
			select string_agg(qjia,'''''''') qjv from (
			select DISTINCT '''',''''||LeaveType||'''' ''''||to_char(StartTime,''''YYYY-MM-DD'''')||''''到''''||to_char(EndTime,''''YYYY-MM-DD'''') as qjia
			FROM (
			select a.* from T_LeaveApplyForm a inner join T_WorkFlow b on a.ID=b.RelatedID
			where b.Status in (''''通过'''',''''结案'''') and b.WLType = ''''考勤管理'''' and  b.RelatedType = ''''请假'''') m WHERE m.Creator = a.UserCode AND to_date(k.AttendanceDate,''''YYYY-MM-DD'''') BETWEEN m.StartTime AND m.EndTime) lty))LeaveDetail,
			trim(leading '''','''' from (
			select DISTINCT '''',''''||OvertimeType||'''' ''''||SUBSTRING(COALESCE(OverTimeCheckInTime,''''''''),1,16)||''''到''''||SUBSTRING(COALESCE(OverTimeCheckOutTime,''''''''),1,16)
			FROM (
			select a.* from T_OvertimeApplyForm a inner join T_WorkFlow b on a.ID=b.RelatedID
			where b.Status in (''''通过'''',''''结案'''') and b.WLType = ''''考勤管理'''' and  b.RelatedType = ''''加班'''') m WHERE m.Creator = a.UserCode AND to_date(k.AttendanceDate,''''YYYY-MM-DD'''') BETWEEN m.StartTime AND m.EndTime)) OvertimeDetail
			FROM T_ProjectMember a
			CROSS JOIN (
			SELECT to_char(a.AttendanceDate, ''''YYYY-MM-DD'''') AttendanceDate,case WHEN c.Id is not null then 0
			when DATE_PART(''''dow'''',a.AttendanceDate) = 0 OR DATE_PART(''''dow'''',a.AttendanceDate)=6 OR b.ID IS NOT NULL THEN 1 ELSE 0 END IsHoliday
			FROM (SELECT generate_series(to_date('''''||StartDate||''''', ''''YYYY-MM-DD''''),to_date('''''||EndDate||''''', ''''YYYY-MM-DD''''),INTERVAL ''''1 day'''') as AttendanceDate) a
			LEFT JOIN T_FestivalsDaySet b ON a.AttendanceDate=b.FestivalsDate
			left join T_FestivalsExchangeDaySet c on a.AttendanceDate=c.ExchangeDate ) k
			LEFT JOIN (select a.* from T_LeaveApplyForm a inner join T_WorkFlow b on a.ID=b.RelatedID
			where b.Status in (''''通过'''',''''结案'''') and b.WLType = ''''考勤管理'''' and  b.RelatedType = ''''请假'''') b
			ON a.UserCode=b.Creator AND to_date(k.AttendanceDate,''''YYYY-MM-DD'''') BETWEEN b.StartTime AND b.EndTime
			LEFT JOIN (select a.* from T_OvertimeApplyForm a inner join T_WorkFlow b on a.ID=b.RelatedID
			where b.Status in (''''通过'''',''''结案'''') and b.WLType = ''''考勤管理'''' and  b.RelatedType = ''''加班'''') c
			ON a.UserCode=c.Creator AND to_date(k.AttendanceDate,''''YYYY-MM-DD'''') BETWEEN c.StartTime AND c.EndTime
			WHERE a.DepartCode like '''''||DepartCode||''''' AND a.UserName like '''''||UserName||'''''
			GROUP BY a.UserCode,k.AttendanceDate) a
			LEFT JOIN (
			SELECT UserCode,to_char(AttendanceDate,''''YYYY-MM-DD'''') AttendanceDate,LateMinute,EarlyMinute,LargestDistance,
			CASE WHEN NCheckInIsMust=''''YES'''' THEN 1 ELSE 0 END NCheckInIsMust,CASE WHEN NCheckOutIsMust=''''YES'''' THEN 1 ELSE 0 END NCheckOutIsMust,
			CASE WHEN MCheckInIsMust=''''YES'''' THEN MCheckIn
			WHEN NCheckInIsMust=''''YES'''' THEN NCheckIn
			ELSE NULL END CheckIn,
			CASE WHEN ACheckOutIsMust=''''YES'''' THEN ACheckOut
			WHEN NCheckOutIsMust=''''YES'''' THEN NCheckOut
			ELSE NULL END CheckOut,
			CASE WHEN MCheckInIsMust=''''YES'''' THEN COALESCE(MCheckInAddress,'''''''')
			WHEN NCheckInIsMust=''''YES'''' THEN COALESCE(NCheckInAddress,'''''''')
			ELSE NULL END CheckInAddress,
			CASE WHEN MCheckInIsMust=''''YES'''' THEN COALESCE(char_length(MCheckInAddress),0)
			WHEN NCheckInIsMust=''''YES'''' THEN COALESCE(char_length(NCheckInAddress),0)
			ELSE 0 END CheckInAddressLen,
			CASE WHEN ACheckOutIsMust=''''YES'''' THEN COALESCE(ACheckOutAddress,'''''''')
			WHEN NCheckOutIsMust=''''YES'''' THEN COALESCE(NCheckOutAddress,'''''''')
			ELSE NULL END CheckOutAddress,
			CASE WHEN ACheckOutIsMust=''''YES'''' THEN COALESCE(char_length(ACheckOutAddress),0)
			WHEN NCheckOutIsMust=''''YES'''' THEN COALESCE(char_length(NCheckOutAddress),0)
			ELSE 0 END CheckOutAddressLen,
			CASE WHEN MCheckInIsMust=''''YES'''' THEN MCheckInDistance
			WHEN NCheckInIsMust=''''YES'''' THEN NCheckInDistance
			ELSE NULL END CheckInDistance,
			CASE WHEN ACheckOutIsMust=''''YES'''' THEN ACheckOutDistance
			WHEN NCheckOutIsMust=''''YES'''' THEN NCheckOutDistance
			ELSE NULL END CheckOutDistance
			FROM T_UserAttendanceRecord
			where AttendanceDate &gt;= '''''||StartDate||''''' AND  AttendanceDate&lt; to_date('''''||EndDate||''''',''''YYYY-MM-DD'''')+INTERVAL ''''1 day''''  ) b
			ON a.UserCode=b.UserCode AND b.AttendanceDate=a.AttendanceDate'',''select generate_series(1, cast(EXTRACT(DAY FROM AGE(to_date('''''||EndDate||''''', ''''YYYY-MM-DD'''')+INTERVAL ''''1 day'''',to_date('''''||StartDate||''''', ''''YYYY-MM-DD''''))) as integer)) as inter''
			) AS  t(usercode varchar(20),{0})' into SqlDetail;

			select replace( SqlDetail , '{0}' , SqlCol) into SqlDetail;


			SELECT array_to_string(ARRAY(SELECT Type || ' int' FROM T_OvertimeType),',') into OvertimeSql;

			--按分钟计算实际加班时间 误差多加1分钟  因为午夜打卡时间分别为23:59和00:01
			SELECT ') c ON a.工号=c.UserCode
			LEFT JOIN (select * from crosstab(
			''SELECT a.UserCode 工号2,c.Type OvertimeType,FLOOR(COALESCE(DATEDIFF(''''mi'''',
			CASE WHEN b.OverTimeCheckInTime::timestamp without time zone&lt;b.StartTime THEN b.StartTime ELSE b.OverTimeCheckInTime::timestamp without time zone END,
			CASE WHEN b.OverTimeCheckOutTime::timestamp without time zone&gt;b.EndTime THEN b.EndTime ELSE b.OverTimeCheckOutTime::timestamp without time zone END)+1,0)*1.0/60) HourNum
			FROM T_ProjectMember a
			CROSS JOIN T_OvertimeType c
			LEFT JOIN (select a.* from T_OvertimeApplyForm a inner join T_WorkFlow b on a.ID=b.RelatedID
			where b.Status in (''''通过'''',''''结案'''') and b.WLType = ''''考勤管理'''' and  b.RelatedType = ''''加班'''') b ON a.UserCode=b.Creator AND '''''||StartDate||'''''&lt;b.EndTime AND '''''||EndDate||'''''&gt;=b.StartTime
			WHERE a.DepartCode like '''''||DepartCode||''''' AND a.UserName like '''''||UserName||''''' ''
			,''SELECT distinct c.Type from T_OvertimeType c order by 1 '')
			as t(工号2 varchar(20),工作日加班 int,节假日加班 int,周末加班 int)
			) d ON a.工号=d.工号2
			LEFT JOIN (		select a.Creator,SUM(COALESCE(a.HourNum,0)) HourNum from T_LeaveApplyForm a inner join T_WorkFlow b on a.ID=b.RelatedID
			where b.Status in (''通过'',''结案'') and b.WLType = ''考勤管理'' and  b.RelatedType = ''请假'' AND '''||StartDate||'''::timestamp without time zone&lt;a.EndTime AND '''||EndDate||'''::timestamp without time zone&gt;=a.StartTime
			GROUP BY a.Creator) f ON a.工号=f.Creator
			order by a.部门,a.姓名' into Sql4;

			SELECT REPLACE(Sql4,'{0}',OvertimeSql) into Sql4;

			select Sql1||Sql2||Sql3||SqlDetail||Sql4 into sqltotal;
			execute sqltotal into recreport;
			SELECT json_agg(row_to_json(recreport)) into jsonreport;

			RETURN jsonreport;

			END;
			$$ LANGUAGE plpgsql;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3537</ID>
    <SQLText>
			CREATE OR REPLACE FUNCTION f_userattendancereport(
			startdate text,
			enddate text,
			departcode text,
			username text
			)
			RETURNS text AS $$
			declare
			SqlCol text;
			MonthdaysSql VARCHAR(2000);
			UserAttendanceRecordSql VARCHAR(2000);
			Sql1 text;
			Sql2 text;
			Sql3 text;
			Sql4 text;
			LeaveSql text;
			OvertimeSql text;
			SqlDetail text;
			sqltotal text;
			recreport record;
			jsonreport text;
			BEGIN

			SELECT 'SELECT to_char(a.AttendanceDate, ''YYYY-MM-DD'') AttendanceDate,case WHEN c.Id is not null then 0
			when DATE_PART(''dow'',a.AttendanceDate) = 0 OR DATE_PART(''dow'',a.AttendanceDate)=6 OR b.ID IS NOT NULL THEN 1 ELSE 0 END IsHoliday
			FROM (SELECT generate_series(to_date('''||StartDate||''', ''YYYY-MM-DD''),to_date('''||EndDate||''', ''YYYY-MM-DD''),INTERVAL ''1 day'') as AttendanceDate) a
			LEFT JOIN T_FestivalsDaySet b ON a.AttendanceDate=b.FestivalsDate
			left join T_FestivalsExchangeDaySet c on a.AttendanceDate=c.ExchangeDate ' into MonthdaysSql;

			SELECT ' SELECT UserCode,to_char(AttendanceDate,''YYYY-MM-DD'') AttendanceDate,LateMinute,EarlyMinute,LargestDistance,
			CASE WHEN NCheckInIsMust=''YES'' THEN 1 ELSE 0 END NCheckInIsMust,CASE WHEN NCheckOutIsMust=''YES'' THEN 1 ELSE 0 END NCheckOutIsMust,
			CASE WHEN MCheckInIsMust=''YES'' THEN MCheckIn
			WHEN NCheckInIsMust=''YES'' THEN NCheckIn
			ELSE NULL END CheckIn,
			CASE WHEN ACheckOutIsMust=''YES'' THEN ACheckOut
			WHEN NCheckOutIsMust=''YES'' THEN NCheckOut
			ELSE NULL END CheckOut,
			CASE WHEN MCheckInIsMust=''YES'' THEN COALESCE(MCheckInAddress,'''')
			WHEN NCheckInIsMust=''YES'' THEN COALESCE(NCheckInAddress,'''')
			ELSE NULL END CheckInAddress,
			CASE WHEN MCheckInIsMust=''YES'' THEN COALESCE(char_length(MCheckInAddress),0)
			WHEN NCheckInIsMust=''YES'' THEN COALESCE(char_length(NCheckInAddress),0)
			ELSE 0 END CheckInAddressLen,
			CASE WHEN ACheckOutIsMust=''YES'' THEN COALESCE(ACheckOutAddress,'''')
			WHEN NCheckOutIsMust=''YES'' THEN COALESCE(NCheckOutAddress,'''')
			ELSE NULL END CheckOutAddress,
			CASE WHEN ACheckOutIsMust=''YES'' THEN COALESCE(char_length(ACheckOutAddress),0)
			WHEN NCheckOutIsMust=''YES'' THEN COALESCE(char_length(NCheckOutAddress),0)
			ELSE 0 END CheckOutAddressLen,
			CASE WHEN MCheckInIsMust=''YES'' THEN MCheckInDistance
			WHEN NCheckInIsMust=''YES'' THEN NCheckInDistance
			ELSE NULL END CheckInDistance,
			CASE WHEN ACheckOutIsMust=''YES'' THEN ACheckOutDistance
			WHEN NCheckOutIsMust=''YES'' THEN NCheckOutDistance
			ELSE NULL END CheckOutDistance
			FROM T_UserAttendanceRecord
			where AttendanceDate &gt;= '''||StartDate||''' AND  AttendanceDate&lt; to_date('''||EndDate||''',''YYYY-MM-DD'')+INTERVAL ''1 day''  '
			into UserAttendanceRecordSql;

			SELECT ' SELECT a.姓名,a.部门,a.工号,a.职位,b.*,
			CAST(a.出勤天数-COALESCE(f.HourNum,0)/8 as decimal(5,3)) 出勤天数,a.应出勤天数,a.迟到次数,a.迟到时长,a.旷工迟到次数,a.早退次数,a.早退时长,a.旷工天数,a.夜班天数,
			d.*,c.*
			FROM(SELECT MIN(a.UserName) 姓名,MIN(a.DepartName)部门,MIN(a.UserCode)工号,MIN(a.Duty)职位,
			SUM(case when ((b.CheckInAddressLen&gt;0 AND (b.CheckInDistance&lt;=b.LargestDistance or b.CheckInDistance=0))
			and (b.CheckOutAddressLen&gt;0 AND (b.CheckOutDistance&lt;=b.LargestDistance or b.CheckOutDistance=0)) or l.HourNum&gt;=8) AND k.IsHoliday=0 then 1 else 0 end ) 出勤天数,
			sum(case when k.IsHoliday=0 then 1 else 0 end) 应出勤天数, SUM(CASE WHEN COALESCE(b.LateMinute,0)&gt;0 THEN 1 ELSE 0 end) 迟到次数,
			SUM(COALESCE(b.LateMinute,0)) 迟到时长,SUM(case when (COALESCE(b.CheckInAddressLen,0)=0 OR  b.CheckInDistance&gt;b.LargestDistance) AND (COALESCE(b.CheckOutAddressLen,0)=0 or b.CheckOutDistance&gt;b.LargestDistance) AND k.IsHoliday=0 and l.Creator is null then 1 else 0 end )
			+SUM(CASE WHEN COALESCE(b.LateMinute,0)&gt;0 THEN 1 ELSE 0 end) 旷工迟到次数,
			SUM(CASE WHEN COALESCE(b.EarlyMinute,0)&gt;0 THEN 1 ELSE 0 end) 早退次数,SUM(COALESCE(b.EarlyMinute,0)) 早退时长,
			SUM(case when (COALESCE(b.CheckInAddressLen,0)=0 OR  b.CheckInDistance&gt;b.LargestDistance) AND (COALESCE(b.CheckOutAddressLen,0)=0 or b.CheckOutDistance&gt;b.LargestDistance) AND k.IsHoliday=0 and l.Creator is null then 1 else 0 end ) 旷工天数,
			SUM(CASE WHEN b.NCheckInIsMust=1 AND COALESCE(b.LateMinute,0)=0 AND (b.CheckInDistance&lt;=b.LargestDistance OR b.CheckInDistance=0)
			AND b.NCheckOutIsMust=1 AND COALESCE(b.EarlyMinute,0)=0 AND (b.CheckOutDistance&lt;=b.LargestDistance OR b.CheckOutDistance=0) THEN 1 ELSE 0 END) 夜班天数
			FROM T_ProjectMember a
			cross join ('||MonthdaysSql||') k '
			into Sql1;


			SELECT  ' LEFT JOIN ( '||UserAttendanceRecordSql||' ) b ON a.UserCode=b.UserCode AND b.AttendanceDate=k.AttendanceDate
			left join(select a.Creator,to_char(a.StartTime,''YYYY-MM-DD'') LeaveDate,sum(a.HourNum) HourNum from T_LeaveApplyForm a inner join T_WorkFlow b on a.ID=b.RelatedID
			where b.Status in (''通过'',''结案'') and b.WLType = ''考勤管理'' and  b.RelatedType = ''请假''
			group by a.Creator,to_char(a.StartTime,''YYYY-MM-DD'')) l on l.Creator=a.UserCode and k.AttendanceDate=l.LeaveDate
			WHERE a.DepartCode like '''||DepartCode||''' AND a.UserName like '''||UserName||'''
			GROUP BY a.UserCode) a  ' into Sql2;


			SELECT array_to_string(ARRAY(SELECT Type || ' int' FROM T_LeaveType order by sortnumber),',') into LeaveSql;

			select ' LEFT JOIN (select * from crosstab(
			''SELECT a.UserCode 工号1,c.Type LeaveType,COALESCE(b.HourNum,0) HourNum
			FROM T_ProjectMember a CROSS JOIN T_LeaveType c
			LEFT JOIN (select a.* from T_LeaveApplyForm a inner join T_WorkFlow b on a.ID=b.RelatedID
			where b.Status in (''''通过'''',''''结案'''') and b.WLType = ''''考勤管理'''' and  b.RelatedType = ''''请假'''') b ON a.UserCode=b.Creator AND c.Type=b.LeaveType AND to_date('''''||EndDate||''''',''''YYYY-MM-DD'''')&lt;b.EndTime AND to_date('''''||StartDate||''''',''''YYYY-MM-DD'''')&gt;=b.StartTime
			WHERE a.DepartCode like '''''||DepartCode||''''' AND a.UserName like '''''||UserName||''''' '', ''SELECT Type FROM T_LeaveType order by sortnumber'')
			as t(工号1 varchar(20),{0})
			) b ON a.工号=b.工号1
			LEFT JOIN ( ' into sql3;

			SELECT REPLACE(Sql3,'{0}',LeaveSql) into Sql3;

			select string_agg('"'||ex || '" text',',') from(
			select * from (SELECT EXTRACT(DAY FROM(generate_series(StartDate::date, EndDate::date, '1 day'::interval)::date)) as ex) a order by a.ex
			) itable into SqlCol;

			select 'select * from crosstab(''SELECT a.UserCode,DATE_PART(''''day'''',a.AttendanceDate::date) AttendanceDay,
			CASE WHEN a.IsHoliday=1 THEN CASE WHEN b.UserCode IS NOT NULL THEN ''''休息并打卡'''' ELSE ''''休息'''' END
			ELSE
			CASE WHEN a.LeaveDetail IS NOT NULL THEN a.LeaveDetail
			WHEN b.UserCode IS NULL THEN ''''旷工''''
			WHEN (b.CheckInAddressLen&gt;0 AND b.LateMinute=0 AND (b.CheckInDistance&lt;=b.LargestDistance or b.CheckInDistance=0))
			THEN CASE WHEN (b.CheckOutAddressLen&gt;0 AND b.EarlyMinute=0 AND (b.CheckOutDistance&lt;=b.LargestDistance or b.CheckOutDistance=0))  THEN ''''正常''''
			WHEN b.CheckOutAddressLen=0 THEN ''''下班缺卡''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.EarlyMinute&gt;0 AND b.CheckOutDistance&gt;b.LargestDistance THEN ''''下班外勤，下班早退''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.EarlyMinute&gt;0 THEN ''''下班早退''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.CheckOutDistance&gt;b.LargestDistance THEN ''''下班外勤'''' END
			WHEN b.CheckInAddressLen=0
			THEN CASE WHEN (b.CheckOutAddressLen&gt;0 AND b.EarlyMinute=0 AND (b.CheckOutDistance&lt;=b.LargestDistance or b.CheckOutDistance=0))  THEN ''''上班缺卡''''
			WHEN b.CheckOutAddressLen=0 THEN ''''旷工''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.EarlyMinute&gt;0 AND b.CheckOutDistance&gt;b.LargestDistance THEN ''''上班缺卡，下班外勤，下班早退''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.EarlyMinute&gt;0 THEN ''''上班缺卡，下班早退''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.CheckOutDistance&gt;b.LargestDistance THEN ''''上班缺卡，下班外勤'''' END
			WHEN b.CheckInAddressLen&gt;0 AND b.LateMinute&gt;0 AND b.CheckInDistance&gt;b.LargestDistance
			THEN CASE WHEN (b.CheckOutAddressLen&gt;0 AND b.EarlyMinute=0 AND (b.CheckOutDistance&lt;=b.LargestDistance or b.CheckOutDistance=0))  THEN ''''上班外勤，上班迟到''''
			WHEN b.CheckOutAddressLen=0 THEN ''''上班外勤，上班迟到，下班缺卡''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.EarlyMinute&gt;0 AND b.CheckOutDistance&gt;b.LargestDistance THEN ''''上班外勤，上班迟到，下班外勤，下班早退''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.EarlyMinute&gt;0 THEN ''''上班外勤，上班迟到，下班早退''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.CheckOutDistance&gt;b.LargestDistance THEN ''''上班外勤，上班迟到，下班外勤'''' END
			WHEN b.CheckInAddressLen&gt;0 AND b.LateMinute&gt;0 AND (b.CheckInDistance&lt;=b.LargestDistance or b.CheckInDistance=0)
			THEN CASE WHEN (b.CheckOutAddressLen&gt;0 AND b.EarlyMinute=0 AND (b.CheckOutDistance&lt;=b.LargestDistance or b.CheckOutDistance=0))  THEN ''''上班迟到''''
			WHEN b.CheckOutAddressLen=0 THEN ''''上班迟到，下班缺卡''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.EarlyMinute&gt;0 AND b.CheckOutDistance&gt;b.LargestDistance THEN ''''上班迟到，下班外勤，下班早退''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.EarlyMinute&gt;0 THEN ''''上班迟到，下班早退''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.CheckOutDistance&gt;b.LargestDistance THEN ''''上班迟到，下班外勤'''' END
			WHEN b.CheckInAddressLen&gt;0 AND b.LateMinute=0 AND b.CheckInDistance&gt;b.LargestDistance
			THEN CASE WHEN (b.CheckOutAddressLen&gt;0 AND b.EarlyMinute=0 AND (b.CheckOutDistance&lt;=b.LargestDistance or b.CheckOutDistance=0))  THEN ''''上班外勤''''
			WHEN b.CheckOutAddressLen=0 THEN ''''上班外勤，下班缺卡''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.EarlyMinute&gt;0 AND b.CheckOutDistance&gt;b.LargestDistance THEN ''''上班外勤，下班外勤，下班早退''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.EarlyMinute&gt;0 THEN ''''上班外勤，下班早退''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.CheckOutDistance&gt;b.LargestDistance THEN ''''上班外勤，下班外勤'''' END
			END
			END|| case when a.OvertimeDetail is not null then '''' ''''||a.OvertimeDetail else '''''''' end Detail  FROM (
			SELECT a.UserCode,k.AttendanceDate,MIN(k.IsHoliday)IsHoliday,
			trim(leading '''','''' from (
			select string_agg(qjia,'''''''') qjv from (
			select DISTINCT '''',''''||LeaveType||'''' ''''||to_char(StartTime,''''YYYY-MM-DD'''')||''''到''''||to_char(EndTime,''''YYYY-MM-DD'''') as qjia
			FROM (
			select a.* from T_LeaveApplyForm a inner join T_WorkFlow b on a.ID=b.RelatedID
			where b.Status in (''''通过'''',''''结案'''') and b.WLType = ''''考勤管理'''' and  b.RelatedType = ''''请假'''') m WHERE m.Creator = a.UserCode AND to_date(k.AttendanceDate,''''YYYY-MM-DD'''') BETWEEN m.StartTime AND m.EndTime) lty))LeaveDetail,
			trim(leading '''','''' from (
			select DISTINCT '''',''''||OvertimeType||'''' ''''||SUBSTRING(COALESCE(OverTimeCheckInTime,''''''''),1,16)||''''到''''||SUBSTRING(COALESCE(OverTimeCheckOutTime,''''''''),1,16)
			FROM (
			select a.* from T_OvertimeApplyForm a inner join T_WorkFlow b on a.ID=b.RelatedID
			where b.Status in (''''通过'''',''''结案'''') and b.WLType = ''''考勤管理'''' and  b.RelatedType = ''''加班'''') m WHERE m.Creator = a.UserCode AND to_date(k.AttendanceDate,''''YYYY-MM-DD'''') BETWEEN m.StartTime AND m.EndTime)) OvertimeDetail
			FROM T_ProjectMember a
			CROSS JOIN (
			SELECT to_char(a.AttendanceDate, ''''YYYY-MM-DD'''') AttendanceDate,case WHEN c.Id is not null then 0
			when DATE_PART(''''dow'''',a.AttendanceDate) = 0 OR DATE_PART(''''dow'''',a.AttendanceDate)=6 OR b.ID IS NOT NULL THEN 1 ELSE 0 END IsHoliday
			FROM (SELECT generate_series(to_date('''''||StartDate||''''', ''''YYYY-MM-DD''''),to_date('''''||EndDate||''''', ''''YYYY-MM-DD''''),INTERVAL ''''1 day'''') as AttendanceDate) a
			LEFT JOIN T_FestivalsDaySet b ON a.AttendanceDate=b.FestivalsDate
			left join T_FestivalsExchangeDaySet c on a.AttendanceDate=c.ExchangeDate ) k
			LEFT JOIN (select a.* from T_LeaveApplyForm a inner join T_WorkFlow b on a.ID=b.RelatedID
			where b.Status in (''''通过'''',''''结案'''') and b.WLType = ''''考勤管理'''' and  b.RelatedType = ''''请假'''') b
			ON a.UserCode=b.Creator AND to_date(k.AttendanceDate,''''YYYY-MM-DD'''') BETWEEN b.StartTime AND b.EndTime
			LEFT JOIN (select a.* from T_OvertimeApplyForm a inner join T_WorkFlow b on a.ID=b.RelatedID
			where b.Status in (''''通过'''',''''结案'''') and b.WLType = ''''考勤管理'''' and  b.RelatedType = ''''加班'''') c
			ON a.UserCode=c.Creator AND to_date(k.AttendanceDate,''''YYYY-MM-DD'''') BETWEEN c.StartTime AND c.EndTime
			WHERE a.DepartCode like '''''||DepartCode||''''' AND a.UserName like '''''||UserName||'''''
			GROUP BY a.UserCode,k.AttendanceDate) a
			LEFT JOIN (
			SELECT UserCode,to_char(AttendanceDate,''''YYYY-MM-DD'''') AttendanceDate,LateMinute,EarlyMinute,LargestDistance,
			CASE WHEN NCheckInIsMust=''''YES'''' THEN 1 ELSE 0 END NCheckInIsMust,CASE WHEN NCheckOutIsMust=''''YES'''' THEN 1 ELSE 0 END NCheckOutIsMust,
			CASE WHEN MCheckInIsMust=''''YES'''' THEN MCheckIn
			WHEN NCheckInIsMust=''''YES'''' THEN NCheckIn
			ELSE NULL END CheckIn,
			CASE WHEN ACheckOutIsMust=''''YES'''' THEN ACheckOut
			WHEN NCheckOutIsMust=''''YES'''' THEN NCheckOut
			ELSE NULL END CheckOut,
			CASE WHEN MCheckInIsMust=''''YES'''' THEN COALESCE(MCheckInAddress,'''''''')
			WHEN NCheckInIsMust=''''YES'''' THEN COALESCE(NCheckInAddress,'''''''')
			ELSE NULL END CheckInAddress,
			CASE WHEN MCheckInIsMust=''''YES'''' THEN COALESCE(char_length(MCheckInAddress),0)
			WHEN NCheckInIsMust=''''YES'''' THEN COALESCE(char_length(NCheckInAddress),0)
			ELSE 0 END CheckInAddressLen,
			CASE WHEN ACheckOutIsMust=''''YES'''' THEN COALESCE(ACheckOutAddress,'''''''')
			WHEN NCheckOutIsMust=''''YES'''' THEN COALESCE(NCheckOutAddress,'''''''')
			ELSE NULL END CheckOutAddress,
			CASE WHEN ACheckOutIsMust=''''YES'''' THEN COALESCE(char_length(ACheckOutAddress),0)
			WHEN NCheckOutIsMust=''''YES'''' THEN COALESCE(char_length(NCheckOutAddress),0)
			ELSE 0 END CheckOutAddressLen,
			CASE WHEN MCheckInIsMust=''''YES'''' THEN MCheckInDistance
			WHEN NCheckInIsMust=''''YES'''' THEN NCheckInDistance
			ELSE NULL END CheckInDistance,
			CASE WHEN ACheckOutIsMust=''''YES'''' THEN ACheckOutDistance
			WHEN NCheckOutIsMust=''''YES'''' THEN NCheckOutDistance
			ELSE NULL END CheckOutDistance
			FROM T_UserAttendanceRecord
			where AttendanceDate &gt;= '''''||StartDate||''''' AND  AttendanceDate&lt; to_date('''''||EndDate||''''',''''YYYY-MM-DD'''')+INTERVAL ''''1 day''''  ) b
			ON a.UserCode=b.UserCode AND b.AttendanceDate=a.AttendanceDate'',''select * from ( SELECT EXTRACT(DAY FROM(generate_series('''''||StartDate||'''''::date,'''''||EndDate||'''''::date, ''''1 day''''::interval)::date)) as ex) a order by a.ex''
			) AS  t(usercode varchar(20),{0})' into SqlDetail;

			select replace( SqlDetail , '{0}' , SqlCol) into SqlDetail;


			SELECT array_to_string(ARRAY(SELECT Type || ' int' FROM T_OvertimeType),',') into OvertimeSql;

			--按分钟计算实际加班时间 误差多加1分钟  因为午夜打卡时间分别为23:59和00:01
			SELECT ') c ON a.工号=c.UserCode
			LEFT JOIN (select * from crosstab(
			''SELECT a.UserCode 工号2,c.Type OvertimeType,FLOOR(COALESCE(DATEDIFF(''''mi'''',
			CASE WHEN b.OverTimeCheckInTime::timestamp without time zone&lt;b.StartTime THEN b.StartTime ELSE b.OverTimeCheckInTime::timestamp without time zone END,
			CASE WHEN b.OverTimeCheckOutTime::timestamp without time zone&gt;b.EndTime THEN b.EndTime ELSE b.OverTimeCheckOutTime::timestamp without time zone END)+1,0)*1.0/60) HourNum
			FROM T_ProjectMember a
			CROSS JOIN T_OvertimeType c
			LEFT JOIN (select a.* from T_OvertimeApplyForm a inner join T_WorkFlow b on a.ID=b.RelatedID
			where b.Status in (''''通过'''',''''结案'''') and b.WLType = ''''考勤管理'''' and  b.RelatedType = ''''加班'''') b ON a.UserCode=b.Creator AND '''''||StartDate||'''''&lt;b.EndTime AND '''''||EndDate||'''''&gt;=b.StartTime
			WHERE a.DepartCode like '''''||DepartCode||''''' AND a.UserName like '''''||UserName||''''' ''
			,''SELECT distinct c.Type from T_OvertimeType c order by 1 '')
			as t(工号2 varchar(20),工作日加班 int,节假日加班 int,周末加班 int)
			) d ON a.工号=d.工号2
			LEFT JOIN (		select a.Creator,SUM(COALESCE(a.HourNum,0)) HourNum from T_LeaveApplyForm a inner join T_WorkFlow b on a.ID=b.RelatedID
			where b.Status in (''通过'',''结案'') and b.WLType = ''考勤管理'' and  b.RelatedType = ''请假'' AND '''||StartDate||'''::timestamp without time zone&lt;a.EndTime AND '''||EndDate||'''::timestamp without time zone&gt;=a.StartTime
			GROUP BY a.Creator) f ON a.工号=f.Creator
			order by a.部门,a.姓名' into Sql4;

			SELECT REPLACE(Sql4,'{0}',OvertimeSql) into Sql4;

			select Sql1||Sql2||Sql3||SqlDetail||Sql4 into sqltotal;
			execute sqltotal into recreport;
			SELECT json_agg(row_to_json(recreport)) into jsonreport;

			RETURN jsonreport;

			END;
			$$ LANGUAGE plpgsql;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3538</ID>
    <SQLText>
			CREATE OR REPLACE FUNCTION f_userattendancereport(
			startdate text,
			enddate text,
			departcode text,
			username text
			)
			RETURNS text AS $$
			declare
			SqlCol text;
			MonthdaysSql VARCHAR(2000);
			UserAttendanceRecordSql VARCHAR(2000);
			Sql1 text;
			Sql2 text;
			Sql3 text;
			Sql4 text;
			LeaveSql text;
			OvertimeSql text;
			SqlDetail text;
			sqltotal text;
			recreport record;
			jsonreport text;
			BEGIN

			SELECT 'SELECT to_char(a.AttendanceDate, ''YYYY-MM-DD'') AttendanceDate,case WHEN c.Id is not null then 0
			when DATE_PART(''dow'',a.AttendanceDate) = 0 OR DATE_PART(''dow'',a.AttendanceDate)=6 OR b.ID IS NOT NULL THEN 1 ELSE 0 END IsHoliday
			FROM (SELECT generate_series(to_date('''||StartDate||''', ''YYYY-MM-DD''),to_date('''||EndDate||''', ''YYYY-MM-DD''),INTERVAL ''1 day'') as AttendanceDate) a
			LEFT JOIN T_FestivalsDaySet b ON a.AttendanceDate=b.FestivalsDate
			left join T_FestivalsExchangeDaySet c on a.AttendanceDate=c.ExchangeDate ' into MonthdaysSql;

			SELECT ' SELECT UserCode,to_char(AttendanceDate,''YYYY-MM-DD'') AttendanceDate,LateMinute,EarlyMinute,LargestDistance,
			CASE WHEN NCheckInIsMust=''YES'' THEN 1 ELSE 0 END NCheckInIsMust,CASE WHEN NCheckOutIsMust=''YES'' THEN 1 ELSE 0 END NCheckOutIsMust,
			CASE WHEN MCheckInIsMust=''YES'' THEN MCheckIn
			WHEN NCheckInIsMust=''YES'' THEN NCheckIn
			ELSE NULL END CheckIn,
			CASE WHEN ACheckOutIsMust=''YES'' THEN ACheckOut
			WHEN NCheckOutIsMust=''YES'' THEN NCheckOut
			ELSE NULL END CheckOut,
			CASE WHEN MCheckInIsMust=''YES'' THEN COALESCE(MCheckInAddress,'''')
			WHEN NCheckInIsMust=''YES'' THEN COALESCE(NCheckInAddress,'''')
			ELSE NULL END CheckInAddress,
			CASE WHEN MCheckInIsMust=''YES'' THEN COALESCE(char_length(MCheckInAddress),0)
			WHEN NCheckInIsMust=''YES'' THEN COALESCE(char_length(NCheckInAddress),0)
			ELSE 0 END CheckInAddressLen,
			CASE WHEN ACheckOutIsMust=''YES'' THEN COALESCE(ACheckOutAddress,'''')
			WHEN NCheckOutIsMust=''YES'' THEN COALESCE(NCheckOutAddress,'''')
			ELSE NULL END CheckOutAddress,
			CASE WHEN ACheckOutIsMust=''YES'' THEN COALESCE(char_length(ACheckOutAddress),0)
			WHEN NCheckOutIsMust=''YES'' THEN COALESCE(char_length(NCheckOutAddress),0)
			ELSE 0 END CheckOutAddressLen,
			CASE WHEN MCheckInIsMust=''YES'' THEN MCheckInDistance
			WHEN NCheckInIsMust=''YES'' THEN NCheckInDistance
			ELSE NULL END CheckInDistance,
			CASE WHEN ACheckOutIsMust=''YES'' THEN ACheckOutDistance
			WHEN NCheckOutIsMust=''YES'' THEN NCheckOutDistance
			ELSE NULL END CheckOutDistance
			FROM T_UserAttendanceRecord
			where AttendanceDate &gt;= '''||StartDate||''' AND  AttendanceDate&lt; to_date('''||EndDate||''',''YYYY-MM-DD'')+INTERVAL ''1 day''  '
			into UserAttendanceRecordSql;

			SELECT ' SELECT a.姓名,a.部门,a.工号,a.职位,b.*,
			CAST(a.出勤天数-COALESCE(f.HourNum,0)/8 as decimal(5,3)) 出勤天数,a.应出勤天数,a.迟到次数,a.迟到时长,a.旷工迟到次数,a.早退次数,a.早退时长,a.旷工天数,a.夜班天数,
			d.*,c.*
			FROM(SELECT MIN(a.UserName) 姓名,MIN(a.DepartName)部门,MIN(a.UserCode)工号,MIN(a.Duty)职位,
			SUM(case when ((b.CheckInAddressLen&gt;0 AND (b.CheckInDistance&lt;=b.LargestDistance or b.CheckInDistance=0))
			and (b.CheckOutAddressLen&gt;0 AND (b.CheckOutDistance&lt;=b.LargestDistance or b.CheckOutDistance=0)) or l.HourNum&gt;=8) AND k.IsHoliday=0 then 1 else 0 end ) 出勤天数,
			sum(case when k.IsHoliday=0 then 1 else 0 end) 应出勤天数, SUM(CASE WHEN COALESCE(b.LateMinute,0)&gt;0 THEN 1 ELSE 0 end) 迟到次数,
			SUM(COALESCE(b.LateMinute,0)) 迟到时长,SUM(case when (COALESCE(b.CheckInAddressLen,0)=0 OR  b.CheckInDistance&gt;b.LargestDistance) AND (COALESCE(b.CheckOutAddressLen,0)=0 or b.CheckOutDistance&gt;b.LargestDistance) AND k.IsHoliday=0 and l.Creator is null then 1 else 0 end )
			+SUM(CASE WHEN COALESCE(b.LateMinute,0)&gt;0 THEN 1 ELSE 0 end) 旷工迟到次数,
			SUM(CASE WHEN COALESCE(b.EarlyMinute,0)&gt;0 THEN 1 ELSE 0 end) 早退次数,SUM(COALESCE(b.EarlyMinute,0)) 早退时长,
			SUM(case when (COALESCE(b.CheckInAddressLen,0)=0 OR  b.CheckInDistance&gt;b.LargestDistance) AND (COALESCE(b.CheckOutAddressLen,0)=0 or b.CheckOutDistance&gt;b.LargestDistance) AND k.IsHoliday=0 and l.Creator is null then 1 else 0 end ) 旷工天数,
			SUM(CASE WHEN b.NCheckInIsMust=1 AND COALESCE(b.LateMinute,0)=0 AND (b.CheckInDistance&lt;=b.LargestDistance OR b.CheckInDistance=0)
			AND b.NCheckOutIsMust=1 AND COALESCE(b.EarlyMinute,0)=0 AND (b.CheckOutDistance&lt;=b.LargestDistance OR b.CheckOutDistance=0) THEN 1 ELSE 0 END) 夜班天数
			FROM T_ProjectMember a
			cross join ('||MonthdaysSql||') k '
			into Sql1;


			SELECT  ' LEFT JOIN ( '||UserAttendanceRecordSql||' ) b ON a.UserCode=b.UserCode AND b.AttendanceDate=k.AttendanceDate
			left join(select a.Creator,to_char(a.StartTime,''YYYY-MM-DD'') LeaveDate,sum(a.HourNum) HourNum from T_LeaveApplyForm a inner join T_WorkFlow b on a.ID=b.RelatedID
			where b.Status in (''通过'',''结案'') and b.WLType = ''考勤管理'' and  b.RelatedType = ''请假''
			group by a.Creator,to_char(a.StartTime,''YYYY-MM-DD'')) l on l.Creator=a.UserCode and k.AttendanceDate=l.LeaveDate
			WHERE a.DepartCode = '''||DepartCode||''' AND a.UserName = '''||UserName||'''
			GROUP BY a.UserCode) a  ' into Sql2;


			SELECT array_to_string(ARRAY(SELECT Type || ' int' FROM T_LeaveType order by sortnumber),',') into LeaveSql;

			select ' LEFT JOIN (select * from crosstab(
			''SELECT a.UserCode 工号1,c.Type LeaveType,COALESCE(b.HourNum,0) HourNum
			FROM T_ProjectMember a CROSS JOIN T_LeaveType c
			LEFT JOIN (select a.* from T_LeaveApplyForm a inner join T_WorkFlow b on a.ID=b.RelatedID
			where b.Status in (''''通过'''',''''结案'''') and b.WLType = ''''考勤管理'''' and  b.RelatedType = ''''请假'''') b ON a.UserCode=b.Creator AND c.Type=b.LeaveType AND to_date('''''||EndDate||''''',''''YYYY-MM-DD'''')&lt;b.EndTime AND to_date('''''||StartDate||''''',''''YYYY-MM-DD'''')&gt;=b.StartTime
			WHERE a.DepartCode = '''''||DepartCode||''''' AND a.UserName = '''''||UserName||''''' '', ''SELECT Type FROM T_LeaveType order by sortnumber'')
			as t(工号1 varchar(20),{0})
			) b ON a.工号=b.工号1
			LEFT JOIN ( ' into sql3;

			SELECT REPLACE(Sql3,'{0}',LeaveSql) into Sql3;

			select string_agg('"'||ex || '" text',',') from(
			select * from (SELECT EXTRACT(DAY FROM(generate_series(StartDate::date, EndDate::date, '1 day'::interval)::date)) as ex) a order by a.ex
			) itable into SqlCol;

			select 'select * from crosstab(''SELECT a.UserCode,DATE_PART(''''day'''',a.AttendanceDate::date) AttendanceDay,
			CASE WHEN a.IsHoliday=1 THEN CASE WHEN b.UserCode IS NOT NULL THEN ''''休息并打卡'''' ELSE ''''休息'''' END
			ELSE
			CASE WHEN a.LeaveDetail IS NOT NULL THEN a.LeaveDetail
			WHEN b.UserCode IS NULL THEN ''''旷工''''
			WHEN (b.CheckInAddressLen&gt;0 AND b.LateMinute=0 AND (b.CheckInDistance&lt;=b.LargestDistance or b.CheckInDistance=0))
			THEN CASE WHEN (b.CheckOutAddressLen&gt;0 AND b.EarlyMinute=0 AND (b.CheckOutDistance&lt;=b.LargestDistance or b.CheckOutDistance=0))  THEN ''''正常''''
			WHEN b.CheckOutAddressLen=0 THEN ''''下班缺卡''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.EarlyMinute&gt;0 AND b.CheckOutDistance&gt;b.LargestDistance THEN ''''下班外勤，下班早退''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.EarlyMinute&gt;0 THEN ''''下班早退''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.CheckOutDistance&gt;b.LargestDistance THEN ''''下班外勤'''' END
			WHEN b.CheckInAddressLen=0
			THEN CASE WHEN (b.CheckOutAddressLen&gt;0 AND b.EarlyMinute=0 AND (b.CheckOutDistance&lt;=b.LargestDistance or b.CheckOutDistance=0))  THEN ''''上班缺卡''''
			WHEN b.CheckOutAddressLen=0 THEN ''''旷工''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.EarlyMinute&gt;0 AND b.CheckOutDistance&gt;b.LargestDistance THEN ''''上班缺卡，下班外勤，下班早退''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.EarlyMinute&gt;0 THEN ''''上班缺卡，下班早退''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.CheckOutDistance&gt;b.LargestDistance THEN ''''上班缺卡，下班外勤'''' END
			WHEN b.CheckInAddressLen&gt;0 AND b.LateMinute&gt;0 AND b.CheckInDistance&gt;b.LargestDistance
			THEN CASE WHEN (b.CheckOutAddressLen&gt;0 AND b.EarlyMinute=0 AND (b.CheckOutDistance&lt;=b.LargestDistance or b.CheckOutDistance=0))  THEN ''''上班外勤，上班迟到''''
			WHEN b.CheckOutAddressLen=0 THEN ''''上班外勤，上班迟到，下班缺卡''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.EarlyMinute&gt;0 AND b.CheckOutDistance&gt;b.LargestDistance THEN ''''上班外勤，上班迟到，下班外勤，下班早退''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.EarlyMinute&gt;0 THEN ''''上班外勤，上班迟到，下班早退''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.CheckOutDistance&gt;b.LargestDistance THEN ''''上班外勤，上班迟到，下班外勤'''' END
			WHEN b.CheckInAddressLen&gt;0 AND b.LateMinute&gt;0 AND (b.CheckInDistance&lt;=b.LargestDistance or b.CheckInDistance=0)
			THEN CASE WHEN (b.CheckOutAddressLen&gt;0 AND b.EarlyMinute=0 AND (b.CheckOutDistance&lt;=b.LargestDistance or b.CheckOutDistance=0))  THEN ''''上班迟到''''
			WHEN b.CheckOutAddressLen=0 THEN ''''上班迟到，下班缺卡''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.EarlyMinute&gt;0 AND b.CheckOutDistance&gt;b.LargestDistance THEN ''''上班迟到，下班外勤，下班早退''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.EarlyMinute&gt;0 THEN ''''上班迟到，下班早退''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.CheckOutDistance&gt;b.LargestDistance THEN ''''上班迟到，下班外勤'''' END
			WHEN b.CheckInAddressLen&gt;0 AND b.LateMinute=0 AND b.CheckInDistance&gt;b.LargestDistance
			THEN CASE WHEN (b.CheckOutAddressLen&gt;0 AND b.EarlyMinute=0 AND (b.CheckOutDistance&lt;=b.LargestDistance or b.CheckOutDistance=0))  THEN ''''上班外勤''''
			WHEN b.CheckOutAddressLen=0 THEN ''''上班外勤，下班缺卡''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.EarlyMinute&gt;0 AND b.CheckOutDistance&gt;b.LargestDistance THEN ''''上班外勤，下班外勤，下班早退''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.EarlyMinute&gt;0 THEN ''''上班外勤，下班早退''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.CheckOutDistance&gt;b.LargestDistance THEN ''''上班外勤，下班外勤'''' END
			END
			END|| case when a.OvertimeDetail is not null then '''' ''''||a.OvertimeDetail else '''''''' end Detail  FROM (
			SELECT a.UserCode,k.AttendanceDate,MIN(k.IsHoliday)IsHoliday,
			trim(leading '''','''' from (
			select string_agg(qjia,'''''''') qjv from (
			select DISTINCT '''',''''||LeaveType||'''' ''''||to_char(StartTime,''''YYYY-MM-DD'''')||''''到''''||to_char(EndTime,''''YYYY-MM-DD'''') as qjia
			FROM (
			select a.* from T_LeaveApplyForm a inner join T_WorkFlow b on a.ID=b.RelatedID
			where b.Status in (''''通过'''',''''结案'''') and b.WLType = ''''考勤管理'''' and  b.RelatedType = ''''请假'''') m WHERE m.Creator = a.UserCode AND to_date(k.AttendanceDate,''''YYYY-MM-DD'''') BETWEEN m.StartTime AND m.EndTime) lty))LeaveDetail,
			trim(leading '''','''' from (
			select DISTINCT '''',''''||OvertimeType||'''' ''''||SUBSTRING(COALESCE(OverTimeCheckInTime,''''''''),1,16)||''''到''''||SUBSTRING(COALESCE(OverTimeCheckOutTime,''''''''),1,16)
			FROM (
			select a.* from T_OvertimeApplyForm a inner join T_WorkFlow b on a.ID=b.RelatedID
			where b.Status in (''''通过'''',''''结案'''') and b.WLType = ''''考勤管理'''' and  b.RelatedType = ''''加班'''') m WHERE m.Creator = a.UserCode AND to_date(k.AttendanceDate,''''YYYY-MM-DD'''') BETWEEN m.StartTime AND m.EndTime)) OvertimeDetail
			FROM T_ProjectMember a
			CROSS JOIN (
			SELECT to_char(a.AttendanceDate, ''''YYYY-MM-DD'''') AttendanceDate,case WHEN c.Id is not null then 0
			when DATE_PART(''''dow'''',a.AttendanceDate) = 0 OR DATE_PART(''''dow'''',a.AttendanceDate)=6 OR b.ID IS NOT NULL THEN 1 ELSE 0 END IsHoliday
			FROM (SELECT generate_series(to_date('''''||StartDate||''''', ''''YYYY-MM-DD''''),to_date('''''||EndDate||''''', ''''YYYY-MM-DD''''),INTERVAL ''''1 day'''') as AttendanceDate) a
			LEFT JOIN T_FestivalsDaySet b ON a.AttendanceDate=b.FestivalsDate
			left join T_FestivalsExchangeDaySet c on a.AttendanceDate=c.ExchangeDate ) k
			LEFT JOIN (select a.* from T_LeaveApplyForm a inner join T_WorkFlow b on a.ID=b.RelatedID
			where b.Status in (''''通过'''',''''结案'''') and b.WLType = ''''考勤管理'''' and  b.RelatedType = ''''请假'''') b
			ON a.UserCode=b.Creator AND to_date(k.AttendanceDate,''''YYYY-MM-DD'''') BETWEEN b.StartTime AND b.EndTime
			LEFT JOIN (select a.* from T_OvertimeApplyForm a inner join T_WorkFlow b on a.ID=b.RelatedID
			where b.Status in (''''通过'''',''''结案'''') and b.WLType = ''''考勤管理'''' and  b.RelatedType = ''''加班'''') c
			ON a.UserCode=c.Creator AND to_date(k.AttendanceDate,''''YYYY-MM-DD'''') BETWEEN c.StartTime AND c.EndTime
			WHERE a.DepartCode = '''''||DepartCode||''''' AND a.UserName = '''''||UserName||'''''
			GROUP BY a.UserCode,k.AttendanceDate) a
			LEFT JOIN (
			SELECT UserCode,to_char(AttendanceDate,''''YYYY-MM-DD'''') AttendanceDate,LateMinute,EarlyMinute,LargestDistance,
			CASE WHEN NCheckInIsMust=''''YES'''' THEN 1 ELSE 0 END NCheckInIsMust,CASE WHEN NCheckOutIsMust=''''YES'''' THEN 1 ELSE 0 END NCheckOutIsMust,
			CASE WHEN MCheckInIsMust=''''YES'''' THEN MCheckIn
			WHEN NCheckInIsMust=''''YES'''' THEN NCheckIn
			ELSE NULL END CheckIn,
			CASE WHEN ACheckOutIsMust=''''YES'''' THEN ACheckOut
			WHEN NCheckOutIsMust=''''YES'''' THEN NCheckOut
			ELSE NULL END CheckOut,
			CASE WHEN MCheckInIsMust=''''YES'''' THEN COALESCE(MCheckInAddress,'''''''')
			WHEN NCheckInIsMust=''''YES'''' THEN COALESCE(NCheckInAddress,'''''''')
			ELSE NULL END CheckInAddress,
			CASE WHEN MCheckInIsMust=''''YES'''' THEN COALESCE(char_length(MCheckInAddress),0)
			WHEN NCheckInIsMust=''''YES'''' THEN COALESCE(char_length(NCheckInAddress),0)
			ELSE 0 END CheckInAddressLen,
			CASE WHEN ACheckOutIsMust=''''YES'''' THEN COALESCE(ACheckOutAddress,'''''''')
			WHEN NCheckOutIsMust=''''YES'''' THEN COALESCE(NCheckOutAddress,'''''''')
			ELSE NULL END CheckOutAddress,
			CASE WHEN ACheckOutIsMust=''''YES'''' THEN COALESCE(char_length(ACheckOutAddress),0)
			WHEN NCheckOutIsMust=''''YES'''' THEN COALESCE(char_length(NCheckOutAddress),0)
			ELSE 0 END CheckOutAddressLen,
			CASE WHEN MCheckInIsMust=''''YES'''' THEN MCheckInDistance
			WHEN NCheckInIsMust=''''YES'''' THEN NCheckInDistance
			ELSE NULL END CheckInDistance,
			CASE WHEN ACheckOutIsMust=''''YES'''' THEN ACheckOutDistance
			WHEN NCheckOutIsMust=''''YES'''' THEN NCheckOutDistance
			ELSE NULL END CheckOutDistance
			FROM T_UserAttendanceRecord
			where AttendanceDate &gt;= '''''||StartDate||''''' AND  AttendanceDate&lt; to_date('''''||EndDate||''''',''''YYYY-MM-DD'''')+INTERVAL ''''1 day''''  ) b
			ON a.UserCode=b.UserCode AND b.AttendanceDate=a.AttendanceDate'',''select * from ( SELECT EXTRACT(DAY FROM(generate_series('''''||StartDate||'''''::date,'''''||EndDate||'''''::date, ''''1 day''''::interval)::date)) as ex) a order by a.ex''
			) AS  t(usercode varchar(20),{0})' into SqlDetail;

			select replace( SqlDetail , '{0}' , SqlCol) into SqlDetail;


			SELECT array_to_string(ARRAY(SELECT Type || ' int' FROM T_OvertimeType),',') into OvertimeSql;

			--按分钟计算实际加班时间 误差多加1分钟  因为午夜打卡时间分别为23:59和00:01
			SELECT ') c ON a.工号=c.UserCode
			LEFT JOIN (select * from crosstab(
			''SELECT a.UserCode 工号2,c.Type OvertimeType,FLOOR(COALESCE(DATEDIFF(''''mi'''',
			CASE WHEN b.OverTimeCheckInTime::timestamp without time zone&lt;b.StartTime THEN b.StartTime ELSE b.OverTimeCheckInTime::timestamp without time zone END,
			CASE WHEN b.OverTimeCheckOutTime::timestamp without time zone&gt;b.EndTime THEN b.EndTime ELSE b.OverTimeCheckOutTime::timestamp without time zone END)+1,0)*1.0/60) HourNum
			FROM T_ProjectMember a
			CROSS JOIN T_OvertimeType c
			LEFT JOIN (select a.* from T_OvertimeApplyForm a inner join T_WorkFlow b on a.ID=b.RelatedID
			where b.Status in (''''通过'''',''''结案'''') and b.WLType = ''''考勤管理'''' and  b.RelatedType = ''''加班'''') b ON a.UserCode=b.Creator AND '''''||StartDate||'''''&lt;b.EndTime AND '''''||EndDate||'''''&gt;=b.StartTime
			WHERE a.DepartCode = '''''||DepartCode||''''' AND a.UserName = '''''||UserName||''''' ''
			,''SELECT distinct c.Type from T_OvertimeType c order by 1 '')
			as t(工号2 varchar(20),工作日加班 int,节假日加班 int,周末加班 int)
			) d ON a.工号=d.工号2
			LEFT JOIN (		select a.Creator,SUM(COALESCE(a.HourNum,0)) HourNum from T_LeaveApplyForm a inner join T_WorkFlow b on a.ID=b.RelatedID
			where b.Status in (''通过'',''结案'') and b.WLType = ''考勤管理'' and  b.RelatedType = ''请假'' AND '''||StartDate||'''::timestamp without time zone&lt;a.EndTime AND '''||EndDate||'''::timestamp without time zone&gt;=a.StartTime
			GROUP BY a.Creator) f ON a.工号=f.Creator
			order by a.部门,a.姓名' into Sql4;

			SELECT REPLACE(Sql4,'{0}',OvertimeSql) into Sql4;

			select Sql1||Sql2||Sql3||SqlDetail||Sql4 into sqltotal;
			execute sqltotal into recreport;
			SELECT json_agg(row_to_json(recreport)) into jsonreport;

			RETURN jsonreport;

			END;
			$$ LANGUAGE plpgsql;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3539</ID>
    <SQLText>Update T_ProjectMember Set cssdirectory = 'CssGreen'</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3540</ID>
    <SQLText>
			Delete From T_NewsType Where type = '模块图';

			Insert Into T_NewsType(type,homename,langcode,pagename,visible,SortNumber) values('模块图','模块图','zh-CN','TTPersonalSpaceModuleFlowView.aspx','YES',0);
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3541</ID>
    <SQLText>
			Delete From T_NewsType Where type = '模块图';

			Insert Into T_NewsType(type,homename,langcode,pagename,visible,SortNumber) values('模块图','模块图','zh-CN','TTPersonalSpaceModuleFlowView.aspx','YES',6);
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3542</ID>
    <SQLText>
			Delete From T_NewsType Where type = '模块图';
			Insert Into T_NewsType(type,homename,langcode,pagename,visible,SortNumber) values('模块图','模块图','zh-CN','TTPersonalSpaceModuleFlowView.aspx','YES',6);
			Insert Into T_NewsType(type,homename,langcode,pagename,visible,SortNumber) values('模块图','ModuleChart','en','TTPersonalSpaceModuleFlowView.aspx','YES',6);
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3543</ID>
    <SQLText>
			Update T_ProModuleLevel Set  ModuleName = '工作流管理'  Where ModuleName = '流程管理' and LangCode = 'zh-CN';
			Update T_ProModuleLevel Set  ModuleName = '项目立项'  Where ModuleName = '建立与分派项目' and LangCode = 'zh-CN';

			Update T_ProModule Set  ModuleName = '工作流管理'  Where ModuleName = '流程管理';
			Update T_ProModule Set  ModuleName = '项目立项'  Where ModuleName = '建立与分派项目';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3544</ID>
    <SQLText>
			Update T_ProModuleLevel Set  ModuleName = '工作流管理'  Where ModuleName = '流程管理';
			Update T_ProModuleLevel Set  ModuleName = '项目立项'  Where ModuleName = '建立与分派项目';

			Update T_ProModule Set  ModuleName = '工作流管理'  Where ModuleName = '流程管理';
			Update T_ProModule Set  ModuleName = '项目立项'  Where ModuleName = '建立与分派项目';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3545</ID>
    <SQLText>Update T_ProModuleLevel Set  HomeModuleName = '项目立项'  Where HomeModuleName = '建立与分派项目';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3546</ID>
    <SQLText>Update T_ProModuleLevel Set ParentModule = '工作流管理' Where ParentModule = '流程管理';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3547</ID>
    <SQLText>
			Update T_ProModuleLevel Set ModuleDefinition = replace(ModuleDefinition,'项目任务管理','项目管理') Where ModuleName = 'PersonalSpace';
			Update T_ProModuleLevel Set ModuleDefinition = replace(ModuleDefinition,'招聘管理','合同管理') Where ModuleName = 'PersonalSpace';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3548</ID>
    <SQLText>
			Update T_NewsType Set Type = '模块导航',HomeName = 'ModuleGuide' Where Type = '模块图' and LangCode = 'en';
			Update T_NewsType Set Type = '模块导航',HomeName = '模块导航' Where Type = '模块图' and LangCode = 'zh-CN';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3549</ID>
    <SQLText>
			Update T_NewsType Set SortNumber = 1  Where Type = '驾驶舱';
			Update T_NewsType Set SortNumber = 2  Where Type = '模块导航';
			Update T_NewsType Set SortNumber = 3  Where Type = '头条新闻';
			Update T_NewsType Set SortNumber = 4  Where Type = '头条新闻';
			Update T_NewsType Set SortNumber = 5  Where Type = '综合信息';
			Update T_NewsType Set SortNumber = 6  Where Type = '公告通知';
			Update T_NewsType Set SortNumber = 7  Where Type = '项目地图';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3550</ID>
    <SQLText>
			Update T_NewsType Set Type = '操作导航',HomeName = 'WorkGuide' Where Type = '模块导航' and LangCode = 'en';
			Update T_NewsType Set Type = '操作导航',HomeName = '操作导航' Where Type = '模块导航' and LangCode = 'zh-CN';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3551</ID>
    <SQLText>
			Update T_NewsType Set SortNumber = 1 Where Type = '驾驶舱';
			Update T_NewsType Set SortNumber = 2 Where Type = '操作导航';
			Update T_NewsType Set SortNumber = 3 Where Type = '头条新闻';
			Update T_NewsType Set SortNumber = 4 Where Type = '公司动态';
			Update T_NewsType Set SortNumber = 5 Where Type = '综合信息';
			Update T_NewsType Set SortNumber = 6 Where Type = '公告通知';
			Update T_NewsType Set SortNumber = 7 Where Type = '项目地图';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3552</ID>
    <SQLText>
			Update T_ProModuleLevel Set PageName = 'TTMyMemProjectsRunStatus.aspx' Where ModuleName = '领导监控';
			Update T_ProModuleLevel Set PageName = 'TTCustomerQuestionManage.aspx' Where ModuleName = '客户关系';
			Update T_ProModuleLevel Set PageName = 'TTGoodsManage.aspx' Where ModuleName = '供应链管理';
			Update T_ProModuleLevel Set PageName = 'TTReceivablesPayableAlert.aspx' Where ModuleName = '财务管理';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3553</ID>
    <SQLText>Update T_ProModuleLevel Set PageName = 'TTUserManagement.aspx' Where ModuleName = '人事行政';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3554</ID>
    <SQLText>
			Update T_ProModuleLevel Set PageName = 'TTBaseDataOuter.aspx' Where ModuleName = '参数设置';
			Update T_ProModuleLevel Set PageName = 'TTDocumentManage.aspx' Where ModuleName = '办公管理';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3555</ID>
    <SQLText>Update T_ProModuleLevel Set PageName = 'TTTenderUNHandleList.aspx' Where ModuleName = '投标管理';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3556</ID>
    <SQLText>Update T_ProModuleLevel Set PageName = 'TTAllProjectsRunStatus.aspx' Where ModuleName = '领导监控';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3557</ID>
    <SQLText>Update T_ProModuleLevel Set PageName = 'TakeTopPersonalSpace.aspx' Where ModuleName = '办公管理';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3558</ID>
    <SQLText>Alter Table T_ProModuleLevel Add Column UpdateMark int Default 0;</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3559</ID>
    <SQLText>UPdate T_ProModuleLevel Set UpdateMark = 0;</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3560</ID>
    <SQLText>Update T_NewsType Set SortNumber = 0 Where Type = '操作导航';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3561</ID>
    <SQLText>
			Alter Table T_ProModule Add Column moduledefinition text Default '';
			Alter Table T_ProModule Add Column diyflow character(10) Default 'NO';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3562</ID>
    <SQLText>
			Update T_ProModule Set moduledefinition = '';
			Update T_ProModule Set diyflow = 'NO';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3563</ID>
    <SQLText>
			Insert Into T_ProModuleLevel(ModuleName,HomeModuleName,ParentModule,PageName,ModuleType,UserType,LangCode,IconURL,ModuleDefinition,DiyFlow,UpdateMark,SortNumber,IsDeleted,Visible)
			values('操作导航','操作导航','','','SYSTEM','INNER','zh-CN','ImagesSkin/OperateGuide.png','','YES',0,0,'NO','YES');

			Insert Into T_ProModuleLevel(ModuleName,HomeModuleName,ParentModule,PageName,ModuleType,UserType,LangCode,IconURL,ModuleDefinition,DiyFlow,UpdateMark,SortNumber,IsDeleted,Visible)
			values('操作导航','操作导航','','','SYSTEM','OUTER','zh-CN','ImagesSkin/OperateGuide.png','','YES',0,0,'NO','YES');

			Insert Into T_ProModule(UserCode,ModuleName,ModuleType,UserType,ModuleDefinition,DiyFlow,Visible)
			values('SAMPLE','操作导航','SYSTEM','INNER','','YES','YES');
			Insert Into T_ProModule(UserCode,ModuleName,ModuleType,UserType,ModuleDefinition,DiyFlow,Visible)
			values('SAMPLE','操作导航','SYSTEM','OUTER','','YES','YES');
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3564</ID>
    <SQLText>Alter Table public.t_newstype Add NewsScope Char(10) Default 'ALL';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3565</ID>
    <SQLText>Update T_NewsType Set NewsScope = 'ALL';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3566</ID>
    <SQLText>SELECT setval('t_msgpushlog_id_seq', (SELECT MAX(id) FROM t_msgpushlog)+1);</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3567</ID>
    <SQLText>
			Update public.t_promodulelevelforpage Set pagename = 'TTProjectRelatedDocSAAS.aspx?ProjectID=' Where PageName = 'TTProjectRelatedDoc.aspxSAAS?ProjectID=';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3568</ID>
    <SQLText>
			CREATE TABLE IF NOT EXISTS public.t_AIInterface
			(
			AItype character(20) COLLATE pg_catalog."default" NOT NULL,
			URL character(200) COLLATE pg_catalog."default" NOT NULL,
			Model character(200) COLLATE pg_catalog."default" NOT NULL
			)
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3569</ID>
    <SQLText>
			Insert Into t_AIInterface(AIType,URL,Model) values('Local','http://127.0.0.1:11434','deepseek-r1:1.5b');
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3570</ID>
    <SQLText>
			CREATE OR REPLACE VIEW public.v_procurrentyearrealcharge
			AS
			SELECT t_proexpense.projectid,effectdate,
			sum(COALESCE(t_proexpense.confirmamount, 0::numeric)) AS realcharge
			FROM t_proexpense Where EXTRACT(YEAR FROM effectdate) = EXTRACT(YEAR FROM CURRENT_DATE)
			GROUP BY t_proexpense.projectid,effectdate
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3571</ID>
    <SQLText>Delete From public.t_funinfordialbox Where InforName IN ('在执行项目状态','项目年度回款状态','延误项目状态','年度项目工时状态','在执行任务状态')</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3572</ID>
    <SQLText>Delete From public.t_systemanalystchartmanagement Where ChartName IN ('在执行项目状态','项目年度回款状态','延误项目状态','年度项目工时状态','在执行任务状态')</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3573</ID>
    <SQLText>
			--T_ProjectStatus,T_TaskStatus,T_ReqStatus,T_PlanStatus,T_WLStatus,T_TestStatus,T_OtherStatus


			UPDATE T_ProjectStatus
			SET Status =
			CASE
			WHEN Status = '新建' THEN 'New'
			WHEN Status = '评审' THEN 'Review'
			WHEN Status = '批准' THEN 'Approved'
			WHEN Status = '受理' THEN 'Accepted'
			WHEN Status = '驳回' THEN 'Rejected'
			WHEN Status = '处理中' THEN 'InProgress'  -- 10字符
			WHEN Status = '测试' THEN 'Testing'
			WHEN Status = '完成' THEN 'Completed'
			WHEN Status = '转项' THEN 'ToProject'  -- 9字符
			WHEN Status = '通过' THEN 'Passed'
			WHEN Status = '转任' THEN 'ToTask'  -- 6字符
			WHEN Status = '审核中' THEN 'Reviewing'  -- 9字符
			WHEN Status = '验收' THEN 'Acceptance'  -- 10字符
			WHEN Status = '会签中' THEN 'Signing'  -- 7字符
			WHEN Status = '修改中' THEN 'Updating'  -- 8字符
			WHEN Status = '延期' THEN 'Postponed'  -- 9字符
			WHEN Status = '拖期' THEN 'Delayed'  -- 7字符
			WHEN Status = '复核中' THEN 'ReReview'  -- 8字符
			WHEN Status = '挂起' THEN 'Suspended'  -- 9字符
			WHEN Status = '关闭' THEN 'Closed'
			WHEN Status = '结案' THEN 'CaseClosed'  -- 10字符
			WHEN Status = '拒绝' THEN 'Rejected'
			WHEN Status = '删除' THEN 'Deleted'
			WHEN Status = '归档' THEN 'Archived'
			WHEN Status = '分派' THEN 'Assigned'  -- 9字符
			WHEN Status = '隐藏' THEN 'Hided'  -- 9字符
			ELSE Status
			END;


			UPDATE T_TaskStatus
			SET Status =
			CASE
			WHEN Status = '新建' THEN 'New'
			WHEN Status = '评审' THEN 'Review'
			WHEN Status = '批准' THEN 'Approved'
			WHEN Status = '受理' THEN 'Accepted'
			WHEN Status = '驳回' THEN 'Rejected'
			WHEN Status = '处理中' THEN 'InProgress'  -- 10字符
			WHEN Status = '测试' THEN 'Testing'
			WHEN Status = '完成' THEN 'Completed'
			WHEN Status = '转项' THEN 'ToProject'  -- 9字符
			WHEN Status = '通过' THEN 'Passed'
			WHEN Status = '转任' THEN 'ToTask'  -- 6字符
			WHEN Status = '审核中' THEN 'Reviewing'  -- 9字符
			WHEN Status = '验收' THEN 'Acceptance'  -- 10字符
			WHEN Status = '会签中' THEN 'Signing'  -- 7字符
			WHEN Status = '修改中' THEN 'Updating'  -- 8字符
			WHEN Status = '延期' THEN 'Postponed'  -- 9字符
			WHEN Status = '拖期' THEN 'Delayed'  -- 7字符
			WHEN Status = '复核中' THEN 'ReReview'  -- 8字符
			WHEN Status = '挂起' THEN 'Suspended'  -- 9字符
			WHEN Status = '关闭' THEN 'Closed'
			WHEN Status = '结案' THEN 'CaseClosed'  -- 10字符
			WHEN Status = '拒绝' THEN 'Rejected'
			WHEN Status = '删除' THEN 'Deleted'
			WHEN Status = '归档' THEN 'Archived'
			WHEN Status = '分派' THEN 'Assigned'  -- 9字符
			WHEN Status = '隐藏' THEN 'Hided'  -- 9字符
			ELSE Status
			END;

			UPDATE T_TaskStatus
			SET Status =
			CASE
			WHEN Status = '新建' THEN 'New'
			WHEN Status = '评审' THEN 'Review'
			WHEN Status = '批准' THEN 'Approved'
			WHEN Status = '受理' THEN 'Accepted'
			WHEN Status = '驳回' THEN 'Rejected'
			WHEN Status = '处理中' THEN 'InProgress'  -- 10字符
			WHEN Status = '测试' THEN 'Testing'
			WHEN Status = '完成' THEN 'Completed'
			WHEN Status = '转项' THEN 'ToProject'  -- 9字符
			WHEN Status = '通过' THEN 'Passed'
			WHEN Status = '转任' THEN 'ToTask'  -- 6字符
			WHEN Status = '审核中' THEN 'Reviewing'  -- 9字符
			WHEN Status = '验收' THEN 'Acceptance'  -- 10字符
			WHEN Status = '会签中' THEN 'Signing'  -- 7字符
			WHEN Status = '修改中' THEN 'Updating'  -- 8字符
			WHEN Status = '延期' THEN 'Postponed'  -- 9字符
			WHEN Status = '拖期' THEN 'Delayed'  -- 7字符
			WHEN Status = '复核中' THEN 'ReReview'  -- 8字符
			WHEN Status = '挂起' THEN 'Suspended'  -- 9字符
			WHEN Status = '关闭' THEN 'Closed'
			WHEN Status = '结案' THEN 'CaseClosed'  -- 10字符
			WHEN Status = '拒绝' THEN 'Rejected'
			WHEN Status = '删除' THEN 'Deleted'
			WHEN Status = '归档' THEN 'Archived'
			WHEN Status = '分派' THEN 'Assigned'  -- 9字符
			WHEN Status = '隐藏' THEN 'Hided'  -- 9字符
			ELSE Status
			END;

			UPDATE T_ReqStatus
			SET Status =
			CASE
			WHEN Status = '新建' THEN 'New'
			WHEN Status = '评审' THEN 'Review'
			WHEN Status = '批准' THEN 'Approved'
			WHEN Status = '受理' THEN 'Accepted'
			WHEN Status = '驳回' THEN 'Rejected'
			WHEN Status = '处理中' THEN 'InProgress'  -- 10字符
			WHEN Status = '测试' THEN 'Testing'
			WHEN Status = '完成' THEN 'Completed'
			WHEN Status = '转项' THEN 'ToProject'  -- 9字符
			WHEN Status = '通过' THEN 'Passed'
			WHEN Status = '转任' THEN 'ToTask'  -- 6字符
			WHEN Status = '审核中' THEN 'Reviewing'  -- 9字符
			WHEN Status = '验收' THEN 'Acceptance'  -- 10字符
			WHEN Status = '会签中' THEN 'Signing'  -- 7字符
			WHEN Status = '修改中' THEN 'Updating'  -- 8字符
			WHEN Status = '延期' THEN 'Postponed'  -- 9字符
			WHEN Status = '拖期' THEN 'Delayed'  -- 7字符
			WHEN Status = '复核中' THEN 'ReReview'  -- 8字符
			WHEN Status = '挂起' THEN 'Suspended'  -- 9字符
			WHEN Status = '关闭' THEN 'Closed'
			WHEN Status = '结案' THEN 'CaseClosed'  -- 10字符
			WHEN Status = '拒绝' THEN 'Rejected'
			WHEN Status = '删除' THEN 'Deleted'
			WHEN Status = '归档' THEN 'Archived'
			WHEN Status = '分派' THEN 'Assigned'  -- 9字符
			WHEN Status = '隐藏' THEN 'Hided'  -- 9字符
			ELSE Status
			END;

			UPDATE T_PlanStatus
			SET Status =
			CASE
			WHEN Status = '新建' THEN 'New'
			WHEN Status = '评审' THEN 'Review'
			WHEN Status = '批准' THEN 'Approved'
			WHEN Status = '受理' THEN 'Accepted'
			WHEN Status = '驳回' THEN 'Rejected'
			WHEN Status = '处理中' THEN 'InProgress'  -- 10字符
			WHEN Status = '测试' THEN 'Testing'
			WHEN Status = '完成' THEN 'Completed'
			WHEN Status = '转项' THEN 'ToProject'  -- 9字符
			WHEN Status = '通过' THEN 'Passed'
			WHEN Status = '转任' THEN 'ToTask'  -- 6字符
			WHEN Status = '审核中' THEN 'Reviewing'  -- 9字符
			WHEN Status = '验收' THEN 'Acceptance'  -- 10字符
			WHEN Status = '会签中' THEN 'Signing'  -- 7字符
			WHEN Status = '修改中' THEN 'Updating'  -- 8字符
			WHEN Status = '延期' THEN 'Postponed'  -- 9字符
			WHEN Status = '拖期' THEN 'Delayed'  -- 7字符
			WHEN Status = '复核中' THEN 'ReReview'  -- 8字符
			WHEN Status = '挂起' THEN 'Suspended'  -- 9字符
			WHEN Status = '关闭' THEN 'Closed'
			WHEN Status = '结案' THEN 'CaseClosed'  -- 10字符
			WHEN Status = '拒绝' THEN 'Rejected'
			WHEN Status = '删除' THEN 'Deleted'
			WHEN Status = '归档' THEN 'Archived'
			WHEN Status = '分派' THEN 'Assigned'  -- 9字符
			WHEN Status = '隐藏' THEN 'Hided'  -- 9字符
			ELSE Status
			END;

			UPDATE T_WLStatus
			SET Status =
			CASE
			WHEN Status = '新建' THEN 'New'
			WHEN Status = '评审' THEN 'Review'
			WHEN Status = '批准' THEN 'Approved'
			WHEN Status = '受理' THEN 'Accepted'
			WHEN Status = '驳回' THEN 'Rejected'
			WHEN Status = '处理中' THEN 'InProgress'  -- 10字符
			WHEN Status = '测试' THEN 'Testing'
			WHEN Status = '完成' THEN 'Completed'
			WHEN Status = '转项' THEN 'ToProject'  -- 9字符
			WHEN Status = '通过' THEN 'Passed'
			WHEN Status = '转任' THEN 'ToTask'  -- 6字符
			WHEN Status = '审核中' THEN 'Reviewing'  -- 9字符
			WHEN Status = '验收' THEN 'Acceptance'  -- 10字符
			WHEN Status = '会签中' THEN 'Signing'  -- 7字符
			WHEN Status = '修改中' THEN 'Updating'  -- 8字符
			WHEN Status = '延期' THEN 'Postponed'  -- 9字符
			WHEN Status = '拖期' THEN 'Delayed'  -- 7字符
			WHEN Status = '复核中' THEN 'ReReview'  -- 8字符
			WHEN Status = '挂起' THEN 'Suspended'  -- 9字符
			WHEN Status = '关闭' THEN 'Closed'
			WHEN Status = '结案' THEN 'CaseClosed'  -- 10字符
			WHEN Status = '拒绝' THEN 'Rejected'
			WHEN Status = '删除' THEN 'Deleted'
			WHEN Status = '归档' THEN 'Archived'
			WHEN Status = '分派' THEN 'Assigned'  -- 9字符
			WHEN Status = '隐藏' THEN 'Hided'  -- 9字符
			ELSE Status
			END;

			UPDATE T_TestStatus
			SET Status =
			CASE
			WHEN Status = '新建' THEN 'New'
			WHEN Status = '评审' THEN 'Review'
			WHEN Status = '批准' THEN 'Approved'
			WHEN Status = '受理' THEN 'Accepted'
			WHEN Status = '驳回' THEN 'Rejected'
			WHEN Status = '处理中' THEN 'InProgress'  -- 10字符
			WHEN Status = '测试' THEN 'Testing'
			WHEN Status = '完成' THEN 'Completed'
			WHEN Status = '转项' THEN 'ToProject'  -- 9字符
			WHEN Status = '通过' THEN 'Passed'
			WHEN Status = '转任' THEN 'ToTask'  -- 6字符
			WHEN Status = '审核中' THEN 'Reviewing'  -- 9字符
			WHEN Status = '验收' THEN 'Acceptance'  -- 10字符
			WHEN Status = '会签中' THEN 'Signing'  -- 7字符
			WHEN Status = '修改中' THEN 'Updating'  -- 8字符
			WHEN Status = '延期' THEN 'Postponed'  -- 9字符
			WHEN Status = '拖期' THEN 'Delayed'  -- 7字符
			WHEN Status = '复核中' THEN 'ReReview'  -- 8字符
			WHEN Status = '挂起' THEN 'Suspended'  -- 9字符
			WHEN Status = '关闭' THEN 'Closed'
			WHEN Status = '结案' THEN 'CaseClosed'  -- 10字符
			WHEN Status = '拒绝' THEN 'Rejected'
			WHEN Status = '删除' THEN 'Deleted'
			WHEN Status = '归档' THEN 'Archived'
			WHEN Status = '分派' THEN 'Assigned'  -- 9字符
			WHEN Status = '隐藏' THEN 'Hided'  -- 9字符
			ELSE Status
			END;

			UPDATE T_OtherStatus
			SET Status =
			CASE
			WHEN Status = '新建' THEN 'New'
			WHEN Status = '评审' THEN 'Review'
			WHEN Status = '批准' THEN 'Approved'
			WHEN Status = '受理' THEN 'Accepted'
			WHEN Status = '驳回' THEN 'Rejected'
			WHEN Status = '处理中' THEN 'InProgress'  -- 10字符
			WHEN Status = '测试' THEN 'Testing'
			WHEN Status = '完成' THEN 'Completed'
			WHEN Status = '转项' THEN 'ToProject'  -- 9字符
			WHEN Status = '通过' THEN 'Passed'
			WHEN Status = '转任' THEN 'ToTask'  -- 6字符
			WHEN Status = '审核中' THEN 'Reviewing'  -- 9字符
			WHEN Status = '验收' THEN 'Acceptance'  -- 10字符
			WHEN Status = '会签中' THEN 'Signing'  -- 7字符
			WHEN Status = '修改中' THEN 'Updating'  -- 8字符
			WHEN Status = '延期' THEN 'Postponed'  -- 9字符
			WHEN Status = '拖期' THEN 'Delayed'  -- 7字符
			WHEN Status = '复核中' THEN 'ReReview'  -- 8字符
			WHEN Status = '挂起' THEN 'Suspended'  -- 9字符
			WHEN Status = '关闭' THEN 'Closed'
			WHEN Status = '结案' THEN 'CaseClosed'  -- 10字符
			WHEN Status = '拒绝' THEN 'Rejected'
			WHEN Status = '删除' THEN 'Deleted'
			WHEN Status = '归档' THEN 'Archived'
			WHEN Status = '分派' THEN 'Assigned'  -- 9字符
			WHEN Status = '隐藏' THEN 'Hided'  -- 9字符
			ELSE Status
			END;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3574</ID>
    <SQLText>
			--T_ProjectStatus,T_TaskStatus,T_ReqStatus,T_PlanStatus,T_WLStatus,T_TestStatus,T_OtherStatus


			UPDATE T_Project
			SET Status =
			CASE
			WHEN Status = '新建' THEN 'New'
			WHEN Status = '评审' THEN 'Review'
			WHEN Status = '批准' THEN 'Approved'
			WHEN Status = '受理' THEN 'Accepted'
			WHEN Status = '驳回' THEN 'Rejected'
			WHEN Status = '处理中' THEN 'InProgress'  -- 10字符
			WHEN Status = '测试' THEN 'Testing'
			WHEN Status = '完成' THEN 'Completed'
			WHEN Status = '转项' THEN 'ToProject'  -- 9字符
			WHEN Status = '通过' THEN 'Passed'
			WHEN Status = '转任' THEN 'ToTask'  -- 6字符
			WHEN Status = '审核中' THEN 'Reviewing'  -- 9字符
			WHEN Status = '验收' THEN 'Acceptance'  -- 10字符
			WHEN Status = '会签中' THEN 'Signing'  -- 7字符
			WHEN Status = '修改中' THEN 'Updating'  -- 8字符
			WHEN Status = '延期' THEN 'Postponed'  -- 9字符
			WHEN Status = '拖期' THEN 'Delayed'  -- 7字符
			WHEN Status = '复核中' THEN 'ReReview'  -- 8字符
			WHEN Status = '挂起' THEN 'Suspended'  -- 9字符
			WHEN Status = '关闭' THEN 'Closed'
			WHEN Status = '结案' THEN 'CaseClosed'  -- 10字符
			WHEN Status = '拒绝' THEN 'Rejected'
			WHEN Status = '删除' THEN 'Deleted'
			WHEN Status = '归档' THEN 'Archived'
			WHEN Status = '分派' THEN 'Assigned'  -- 9字符
			WHEN Status = '隐藏' THEN 'Hided'  -- 9字符
			ELSE Status
			END;


			UPDATE T_ProjectTask
			SET Status =
			CASE
			WHEN Status = '新建' THEN 'New'
			WHEN Status = '评审' THEN 'Review'
			WHEN Status = '批准' THEN 'Approved'
			WHEN Status = '受理' THEN 'Accepted'
			WHEN Status = '驳回' THEN 'Rejected'
			WHEN Status = '处理中' THEN 'InProgress'  -- 10字符
			WHEN Status = '测试' THEN 'Testing'
			WHEN Status = '完成' THEN 'Completed'
			WHEN Status = '转项' THEN 'ToProject'  -- 9字符
			WHEN Status = '通过' THEN 'Passed'
			WHEN Status = '转任' THEN 'ToTask'  -- 6字符
			WHEN Status = '审核中' THEN 'Reviewing'  -- 9字符
			WHEN Status = '验收' THEN 'Acceptance'  -- 10字符
			WHEN Status = '会签中' THEN 'Signing'  -- 7字符
			WHEN Status = '修改中' THEN 'Updating'  -- 8字符
			WHEN Status = '延期' THEN 'Postponed'  -- 9字符
			WHEN Status = '拖期' THEN 'Delayed'  -- 7字符
			WHEN Status = '复核中' THEN 'ReReview'  -- 8字符
			WHEN Status = '挂起' THEN 'Suspended'  -- 9字符
			WHEN Status = '关闭' THEN 'Closed'
			WHEN Status = '结案' THEN 'CaseClosed'  -- 10字符
			WHEN Status = '拒绝' THEN 'Rejected'
			WHEN Status = '删除' THEN 'Deleted'
			WHEN Status = '归档' THEN 'Archived'
			WHEN Status = '分派' THEN 'Assigned'  -- 9字符
			WHEN Status = '隐藏' THEN 'Hided'  -- 9字符
			ELSE Status
			END;

			UPDATE T_Requirement
			SET Status =
			CASE
			WHEN Status = '新建' THEN 'New'
			WHEN Status = '评审' THEN 'Review'
			WHEN Status = '批准' THEN 'Approved'
			WHEN Status = '受理' THEN 'Accepted'
			WHEN Status = '驳回' THEN 'Rejected'
			WHEN Status = '处理中' THEN 'InProgress'  -- 10字符
			WHEN Status = '测试' THEN 'Testing'
			WHEN Status = '完成' THEN 'Completed'
			WHEN Status = '转项' THEN 'ToProject'  -- 9字符
			WHEN Status = '通过' THEN 'Passed'
			WHEN Status = '转任' THEN 'ToTask'  -- 6字符
			WHEN Status = '审核中' THEN 'Reviewing'  -- 9字符
			WHEN Status = '验收' THEN 'Acceptance'  -- 10字符
			WHEN Status = '会签中' THEN 'Signing'  -- 7字符
			WHEN Status = '修改中' THEN 'Updating'  -- 8字符
			WHEN Status = '延期' THEN 'Postponed'  -- 9字符
			WHEN Status = '拖期' THEN 'Delayed'  -- 7字符
			WHEN Status = '复核中' THEN 'ReReview'  -- 8字符
			WHEN Status = '挂起' THEN 'Suspended'  -- 9字符
			WHEN Status = '关闭' THEN 'Closed'
			WHEN Status = '结案' THEN 'CaseClosed'  -- 10字符
			WHEN Status = '拒绝' THEN 'Rejected'
			WHEN Status = '删除' THEN 'Deleted'
			WHEN Status = '归档' THEN 'Archived'
			WHEN Status = '分派' THEN 'Assigned'  -- 9字符
			WHEN Status = '隐藏' THEN 'Hided'  -- 9字符
			ELSE Status
			END;

			UPDATE T_Plan
			SET Status =
			CASE
			WHEN Status = '新建' THEN 'New'
			WHEN Status = '评审' THEN 'Review'
			WHEN Status = '批准' THEN 'Approved'
			WHEN Status = '受理' THEN 'Accepted'
			WHEN Status = '驳回' THEN 'Rejected'
			WHEN Status = '处理中' THEN 'InProgress'  -- 10字符
			WHEN Status = '测试' THEN 'Testing'
			WHEN Status = '完成' THEN 'Completed'
			WHEN Status = '转项' THEN 'ToProject'  -- 9字符
			WHEN Status = '通过' THEN 'Passed'
			WHEN Status = '转任' THEN 'ToTask'  -- 6字符
			WHEN Status = '审核中' THEN 'Reviewing'  -- 9字符
			WHEN Status = '验收' THEN 'Acceptance'  -- 10字符
			WHEN Status = '会签中' THEN 'Signing'  -- 7字符
			WHEN Status = '修改中' THEN 'Updating'  -- 8字符
			WHEN Status = '延期' THEN 'Postponed'  -- 9字符
			WHEN Status = '拖期' THEN 'Delayed'  -- 7字符
			WHEN Status = '复核中' THEN 'ReReview'  -- 8字符
			WHEN Status = '挂起' THEN 'Suspended'  -- 9字符
			WHEN Status = '关闭' THEN 'Closed'
			WHEN Status = '结案' THEN 'CaseClosed'  -- 10字符
			WHEN Status = '拒绝' THEN 'Rejected'
			WHEN Status = '删除' THEN 'Deleted'
			WHEN Status = '归档' THEN 'Archived'
			WHEN Status = '分派' THEN 'Assigned'  -- 9字符
			WHEN Status = '隐藏' THEN 'Hided'  -- 9字符
			ELSE Status
			END;


			UPDATE T_Workflow
			SET Status =
			CASE
			WHEN Status = '新建' THEN 'New'
			WHEN Status = '评审' THEN 'Review'
			WHEN Status = '批准' THEN 'Approved'
			WHEN Status = '受理' THEN 'Accepted'
			WHEN Status = '驳回' THEN 'Rejected'
			WHEN Status = '处理中' THEN 'InProgress'  -- 10字符
			WHEN Status = '测试' THEN 'Testing'
			WHEN Status = '完成' THEN 'Completed'
			WHEN Status = '转项' THEN 'ToProject'  -- 9字符
			WHEN Status = '通过' THEN 'Passed'
			WHEN Status = '转任' THEN 'ToTask'  -- 6字符
			WHEN Status = '审核中' THEN 'Reviewing'  -- 9字符
			WHEN Status = '验收' THEN 'Acceptance'  -- 10字符
			WHEN Status = '会签中' THEN 'Signing'  -- 7字符
			WHEN Status = '修改中' THEN 'Updating'  -- 8字符
			WHEN Status = '延期' THEN 'Postponed'  -- 9字符
			WHEN Status = '拖期' THEN 'Delayed'  -- 7字符
			WHEN Status = '复核中' THEN 'ReReview'  -- 8字符
			WHEN Status = '挂起' THEN 'Suspended'  -- 9字符
			WHEN Status = '关闭' THEN 'Closed'
			WHEN Status = '结案' THEN 'CaseClosed'  -- 10字符
			WHEN Status = '拒绝' THEN 'Rejected'
			WHEN Status = '删除' THEN 'Deleted'
			WHEN Status = '归档' THEN 'Archived'
			WHEN Status = '分派' THEN 'Assigned'  -- 9字符
			WHEN Status = '隐藏' THEN 'Hided'  -- 9字符
			ELSE Status
			END;


			UPDATE T_WorkflowStepDetail
			SET Status =
			CASE
			WHEN Status = '新建' THEN 'New'
			WHEN Status = '评审' THEN 'Review'
			WHEN Status = '批准' THEN 'Approved'
			WHEN Status = '受理' THEN 'Accepted'
			WHEN Status = '驳回' THEN 'Rejected'
			WHEN Status = '处理中' THEN 'InProgress'  -- 10字符
			WHEN Status = '测试' THEN 'Testing'
			WHEN Status = '完成' THEN 'Completed'
			WHEN Status = '转项' THEN 'ToProject'  -- 9字符
			WHEN Status = '通过' THEN 'Passed'
			WHEN Status = '转任' THEN 'ToTask'  -- 6字符
			WHEN Status = '审核中' THEN 'Reviewing'  -- 9字符
			WHEN Status = '验收' THEN 'Acceptance'  -- 10字符
			WHEN Status = '会签中' THEN 'Signing'  -- 7字符
			WHEN Status = '修改中' THEN 'Updating'  -- 8字符
			WHEN Status = '延期' THEN 'Postponed'  -- 9字符
			WHEN Status = '拖期' THEN 'Delayed'  -- 7字符
			WHEN Status = '复核中' THEN 'ReReview'  -- 8字符
			WHEN Status = '挂起' THEN 'Suspended'  -- 9字符
			WHEN Status = '关闭' THEN 'Closed'
			WHEN Status = '结案' THEN 'CaseClosed'  -- 10字符
			WHEN Status = '拒绝' THEN 'Rejected'
			WHEN Status = '删除' THEN 'Deleted'
			WHEN Status = '归档' THEN 'Archived'
			WHEN Status = '分派' THEN 'Assigned'  -- 9字符
			WHEN Status = '隐藏' THEN 'Hided'  -- 9字符
			ELSE Status
			END;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3575</ID>
    <SQLText>
			UPDATE t_funinfordialbox
			SET SqlCode = REPLACE(
			REPLACE(
			REPLACE(
			REPLACE(
			REPLACE(
			REPLACE(
			REPLACE(
			REPLACE(
			SqlCode,
			'新建', 'New'
			),
			'评审', 'Review'
			),
			'批准', 'Approved'
			),
			'受理', 'Accepted'
			),
			'驳回', 'Rejected'
			),
			'测试', 'Testing'
			),
			'完成', 'Completed'
			),
			'转项', 'ToProject'
			)
			WHERE SqlCode LIKE '%新建%'
			OR SqlCode LIKE '%评审%'
			OR SqlCode LIKE '%批准%'
			OR SqlCode LIKE '%受理%'
			OR SqlCode LIKE '%驳回%'
			OR SqlCode LIKE '%测试%'
			OR SqlCode LIKE '%完成%'
			OR SqlCode LIKE '%转项%';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3576</ID>
    <SQLText>
			UPDATE t_funinfordialbox
			SET SqlCode = REPLACE(
			REPLACE(
			REPLACE(
			REPLACE(
			REPLACE(
			REPLACE(
			REPLACE(
			REPLACE(
			SqlCode,
			'通过', 'Passed'
			),
			'转任', 'ToTask'
			),
			'审核中', 'Reviewing'
			),
			'验收', 'Acceptance'
			),
			'会签中', 'Signing'
			),
			'修改中', 'Updating'
			),
			'延期', 'Postponed'
			),
			'拖期', 'Delayed'
			)
			WHERE SqlCode LIKE '%通过%'
			OR SqlCode LIKE '%转任%'
			OR SqlCode LIKE '%审核中%'
			OR SqlCode LIKE '%验收%'
			OR SqlCode LIKE '%会签中%'
			OR SqlCode LIKE '%修改中%'
			OR SqlCode LIKE '%延期%'
			OR SqlCode LIKE '%拖期%'
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3577</ID>
    <SQLText>
			UPDATE t_funinfordialbox
			SET SqlCode = REPLACE(
			REPLACE(
			REPLACE(
			REPLACE(
			REPLACE(
			REPLACE(
			REPLACE(
			REPLACE(
			SqlCode,
			'复核中', 'ReReview'
			),
			'挂起', 'Suspended'
			),
			'关闭', 'Closed'
			),
			'结案', 'CaseClosed'
			),
			'拒绝', 'Rejected'
			),
			'删除', 'Deleted'
			),
			'归档', 'Archived'
			),
			'分派', 'Assigned'
			)
			WHERE SqlCode LIKE '%复核中%'
			OR SqlCode LIKE '%挂起%'
			OR SqlCode LIKE '%关闭%'
			OR SqlCode LIKE '%结案%'
			OR SqlCode LIKE '%拒绝%'
			OR SqlCode LIKE '%删除%'
			OR SqlCode LIKE '%归档%'
			OR SqlCode LIKE '%分派%'
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3578</ID>
    <SQLText>
			UPDATE t_funinfordialbox
			SET SqlCode = REPLACE(
			REPLACE(
			REPLACE(
			REPLACE(
			REPLACE(
			REPLACE(
			REPLACE(
			REPLACE(
			SqlCode,
			'复核中', 'ReReview'
			),
			'挂起', 'Suspended'
			),
			'关闭', 'Closed'
			),
			'结案', 'CaseClosed'
			),
			'拒绝', 'Rejected'
			),
			'删除', 'Deleted'
			),
			'归档', 'Archived'
			),
			'隐藏', 'Hided'
			)
			WHERE SqlCode LIKE '%复核中%'
			OR SqlCode LIKE '%挂起%'
			OR SqlCode LIKE '%关闭%'
			OR SqlCode LIKE '%结案%'
			OR SqlCode LIKE '%拒绝%'
			OR SqlCode LIKE '%删除%'
			OR SqlCode LIKE '%归档%'
			OR SqlCode LIKE '%隐藏%'
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3579</ID>
    <SQLText>
			UPDATE t_funinfordialbox
			SET SqlCode = REPLACE(
			REPLACE(
			REPLACE(
			REPLACE(
			REPLACE(
			REPLACE(
			REPLACE(
			REPLACE(
			SqlCode,
			'取消', 'Cancel'
			),
			'Plan', 'Plan'
			),
			'ToHandle', 'ToHandle'
			),
			'结案', 'CaseClosed'
			),
			'拒绝', 'Rejected'
			),
			'删除', 'Deleted'
			),
			'归档', 'Archived'
			),
			'隐藏', 'Hided'
			)
			WHERE SqlCode LIKE '%取消%'
			OR SqlCode LIKE '%计划%'
			OR SqlCode LIKE '%待处理%'
			OR SqlCode LIKE '%结案%'
			OR SqlCode LIKE '%拒绝%'
			OR SqlCode LIKE '%删除%'
			OR SqlCode LIKE '%归档%'
			OR SqlCode LIKE '%隐藏%'
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3580</ID>
    <SQLText>
			UPDATE t_funinfordialbox
			SET SqlCode = REPLACE(
			REPLACE(
			REPLACE(
			REPLACE(
			REPLACE(
			REPLACE(
			REPLACE(
			REPLACE(
			SqlCode,
			'取消', 'Cancel'
			),
			'Plan', 'Plan'
			),
			'ToHandle', 'ToHandle'
			),
			'解除', 'ReMoved'
			),
			'发生', 'Happen'
			),
			'删除', 'Deleted'
			),
			'归档', 'Archived'
			),
			'隐藏', 'Hided'
			)
			WHERE SqlCode LIKE '%取消%'
			OR SqlCode LIKE '%计划%'
			OR SqlCode LIKE '%待处理%'
			OR SqlCode LIKE '%解除%'
			OR SqlCode LIKE '%发生%'
			OR SqlCode LIKE '%删除%'
			OR SqlCode LIKE '%归档%'
			OR SqlCode LIKE '%隐藏%'
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3581</ID>
    <SQLText>
			UPDATE t_systemanalystchartmanagement
			SET SqlCode = REPLACE(
			REPLACE(
			REPLACE(
			REPLACE(
			REPLACE(
			REPLACE(
			REPLACE(
			REPLACE(
			SqlCode,
			'取消', 'Cancel'
			),
			'Plan', 'Plan'
			),
			'ToHandle', 'ToHandle'
			),
			'解除', 'ReMoved'
			),
			'发生', 'Happen'
			),
			'删除', 'Deleted'
			),
			'归档', 'Archived'
			),
			'隐藏', 'Hided'
			)
			WHERE SqlCode LIKE '%取消%'
			OR SqlCode LIKE '%计划%'
			OR SqlCode LIKE '%待处理%'
			OR SqlCode LIKE '%解除%'
			OR SqlCode LIKE '%发生%'
			OR SqlCode LIKE '%删除%'
			OR SqlCode LIKE '%归档%'
			OR SqlCode LIKE '%隐藏%'
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3582</ID>
    <SQLText>
			UPDATE t_systemanalystchartmanagement SET SqlCode = REPLACE( REPLACE( REPLACE( REPLACE( REPLACE( REPLACE( REPLACE( REPLACE( SqlCode, '取消', 'Cancel' ), 'Plan', 'Plan' ), 'ToHandle', 'ToHandle' ), '结案', 'CaseClosed' ), '拒绝', 'Rejected' ), '删除', 'Deleted' ), '归档', 'Archived' ), '隐藏', 'Hided' ) WHERE SqlCode LIKE '%取消%' OR SqlCode LIKE '%计划%' OR SqlCode LIKE '%待处理%' OR SqlCode LIKE '%结案%' OR SqlCode LIKE '%拒绝%' OR SqlCode LIKE '%删除%' OR SqlCode LIKE '%归档%' OR SqlCode LIKE '%隐藏%';

			UPDATE t_systemanalystchartmanagement SET SqlCode = REPLACE( REPLACE( REPLACE( REPLACE( REPLACE( REPLACE( REPLACE( REPLACE( SqlCode, '复核中', 'ReReview' ), '挂起', 'Suspended' ), '关闭', 'Closed' ), '结案', 'CaseClosed' ), '拒绝', 'Rejected' ), '删除', 'Deleted' ), '归档', 'Archived' ), '隐藏', 'Hided' ) WHERE SqlCode LIKE '%复核中%' OR SqlCode LIKE '%挂起%' OR SqlCode LIKE '%关闭%' OR SqlCode LIKE '%结案%' OR SqlCode LIKE '%拒绝%' OR SqlCode LIKE '%删除%' OR SqlCode LIKE '%归档%' OR SqlCode LIKE '%隐藏%';

			UPDATE t_systemanalystchartmanagement SET SqlCode = REPLACE( REPLACE( REPLACE( REPLACE( REPLACE( REPLACE( REPLACE( REPLACE( SqlCode, '复核中', 'ReReview' ), '挂起', 'Suspended' ), '关闭', 'Closed' ), '结案', 'CaseClosed' ), '拒绝', 'Rejected' ), '删除', 'Deleted' ), '归档', 'Archived' ), '分派', 'Assigned' ) WHERE SqlCode LIKE '%复核中%' OR SqlCode LIKE '%挂起%' OR SqlCode LIKE '%关闭%' OR SqlCode LIKE '%结案%' OR SqlCode LIKE '%拒绝%' OR SqlCode LIKE '%删除%' OR SqlCode LIKE '%归档%' OR SqlCode LIKE '%分派%';

			UPDATE t_systemanalystchartmanagement SET SqlCode = REPLACE( REPLACE( REPLACE( REPLACE( REPLACE( REPLACE( REPLACE( REPLACE( SqlCode, '通过', 'Passed' ), '转任', 'ToTask' ), '审核中', 'Reviewing' ), '验收', 'Acceptance' ), '会签中', 'Signing' ), '修改中', 'Updating' ), '延期', 'Postponed' ), '拖期', 'Delayed' ) WHERE SqlCode LIKE '%通过%' OR SqlCode LIKE '%转任%' OR SqlCode LIKE '%审核中%' OR SqlCode LIKE '%验收%' OR SqlCode LIKE '%会签中%' OR SqlCode LIKE '%修改中%' OR SqlCode LIKE '%延期%' OR SqlCode LIKE '%拖期%';

			UPDATE t_systemanalystchartmanagement SET SqlCode = REPLACE( REPLACE( REPLACE( REPLACE( REPLACE( REPLACE( REPLACE( REPLACE( SqlCode, '新建', 'New' ), '评审', 'Review' ), '批准', 'Approved' ), '受理', 'Accepted' ), '驳回', 'Rejected' ), '测试', 'Testing' ), '完成', 'Completed' ), '转项', 'ToProject' ) WHERE SqlCode LIKE '%新建%' OR SqlCode LIKE '%评审%' OR SqlCode LIKE '%批准%' OR SqlCode LIKE '%受理%' OR SqlCode LIKE '%驳回%' OR SqlCode LIKE '%测试%' OR SqlCode LIKE '%完成%' OR SqlCode LIKE '%转项%';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3583</ID>
    <SQLText>
			--T_ProjectStatus,T_TaskStatus,T_ReqStatus,T_PlanStatus,T_WLStatus,T_TestStatus,T_OtherStatus


			UPDATE T_Project
			SET Status =
			CASE

			WHEN Status = '计划' THEN 'Plan'
			WHEN Status = '取消' THEN 'Cancel'
			WHEN Status = '待处理' THEN 'ToHandle'
			ELSE Status
			END;


			UPDATE T_ProjectTask
			SET Status =
			CASE
			WHEN Status = '计划' THEN 'Plan'
			WHEN Status = '取消' THEN 'Cancel'
			WHEN Status = '待处理' THEN 'ToHandle'
			ELSE Status
			END;

			UPDATE T_Requirement
			SET Status =
			CASE
			WHEN Status = '计划' THEN 'Plan'
			WHEN Status = '取消' THEN 'Cancel'
			WHEN Status = '待处理' THEN 'ToHandle'
			ELSE Status
			END;

			UPDATE T_Plan
			SET Status =
			CASE
			WHEN Status = '计划' THEN 'Plan'
			WHEN Status = '取消' THEN 'Cancel'
			WHEN Status = '待处理' THEN 'ToHandle'
			ELSE Status
			END;


			UPDATE T_Workflow
			SET Status =
			CASE
			WHEN Status = '计划' THEN 'Plan'
			WHEN Status = '取消' THEN 'Cancel'
			WHEN Status = '待处理' THEN 'ToHandle'
			ELSE Status
			END;


			UPDATE T_WorkflowStepDetail
			SET Status =
			CASE
			WHEN Status = '计划' THEN 'Plan'
			WHEN Status = '取消' THEN 'Cancel'
			WHEN Status = '待处理' THEN 'ToHandle'
			ELSE Status
			END;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3584</ID>
    <SQLText>
			--T_ProjectStatus,T_TaskStatus,T_ReqStatus,T_PlanStatus,T_WLStatus,T_TestStatus,T_OtherStatus

			UPDATE T_ProjectStatus
			SET Status =
			CASE
			WHEN Status = '计划' THEN 'Plan'
			WHEN Status = '取消' THEN 'Cancel'
			WHEN Status = '待处理' THEN 'ToHandle'
			ELSE Status
			END;


			UPDATE T_TaskStatus
			SET Status =
			CASE
			WHEN Status = '计划' THEN 'Plan'
			WHEN Status = '取消' THEN 'Cancel'
			WHEN Status = '待处理' THEN 'ToHandle'
			ELSE Status
			END;

			UPDATE T_TaskStatus
			SET Status =
			CASE
			WHEN Status = '计划' THEN 'Plan'
			WHEN Status = '取消' THEN 'Cancel'
			WHEN Status = '待处理' THEN 'ToHandle'
			ELSE Status
			END;

			UPDATE T_ReqStatus
			SET Status =
			CASE
			WHEN Status = '计划' THEN 'Plan'
			WHEN Status = '取消' THEN 'Cancel'
			WHEN Status = '待处理' THEN 'ToHandle'
			ELSE Status
			END;

			UPDATE T_PlanStatus
			SET Status =
			CASE
			WHEN Status = '计划' THEN 'Plan'
			WHEN Status = '取消' THEN 'Cancel'
			WHEN Status = '待处理' THEN 'ToHandle'
			ELSE Status
			END;

			UPDATE T_WLStatus
			SET Status =
			CASE
			WHEN Status = '计划' THEN 'Plan'
			WHEN Status = '取消' THEN 'Cancel'
			WHEN Status = '待处理' THEN 'ToHandle'
			ELSE Status
			END;

			UPDATE T_TestStatus
			SET Status =
			CASE
			WHEN Status = '计划' THEN 'Plan'
			WHEN Status = '取消' THEN 'Cancel'
			WHEN Status = '待处理' THEN 'ToHandle'
			ELSE Status
			END;

			UPDATE T_OtherStatus
			SET Status =
			CASE
			WHEN Status = '计划' THEN 'Plan'
			WHEN Status = '取消' THEN 'Cancel'
			WHEN Status = '待处理' THEN 'ToHandle'
			ELSE Status
			END;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3585</ID>
    <SQLText>
			UPDATE t_systemanalystchartmanagement SET SqlCode = REPLACE( REPLACE( REPLACE( REPLACE( REPLACE( REPLACE( REPLACE( REPLACE( SqlCode, '取消', 'Cancel' ), '计划', 'Plan' ), '处理中', 'InProgress' ), '结案', 'CaseClosed' ), '拒绝', 'Rejected' ), '删除', 'Deleted' ), '归档', 'Archived' ), '隐藏', 'Hided' ) WHERE SqlCode LIKE '%取消%' OR SqlCode LIKE '%计划%' OR SqlCode LIKE '%处理中%' OR SqlCode LIKE '%结案%' OR SqlCode LIKE '%拒绝%' OR SqlCode LIKE '%删除%' OR SqlCode LIKE '%归档%' OR SqlCode LIKE '%隐藏%';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3586</ID>
    <SQLText>
			ALTER TABLE public.t_approveflow
			ALTER COLUMN operation TYPE VARCHAR(200);
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3587</ID>
    <SQLText>
			-- FUNCTION: public.Func_TG_InsertWLStepByStatus()

			-- DROP FUNCTION IF EXISTS public."Func_TG_InsertWLStepByStatus"();

			CREATE OR REPLACE FUNCTION public."Func_TG_InsertWLStepByStatus"()
			RETURNS trigger
			LANGUAGE 'plpgsql'
			COST 100
			VOLATILE NOT LEAKPROOF
			AS $BODY$
			declare intCount bigint;
			declare chrNewStatus char(10);
			declare chrAutoActive char(10);
			declare chrTemName char(100);

			begin

			select rtrim(ltrim(TemName)) into chrTemName from T_WorkFlow  Where WLID = NEW.WLID ;
			Select rtrim(ltrim(AutoActive)) into chrAutoActive from T_WorkflowTemplate Where TemName = chrTemName;

			IF (TG_OP='UPDATE' or chrAutoActive='YES') THEN

			if ((NEW.Status &lt;&gt; Old.Status) Or (chrAutoActive='YES')) then

			select rtrim(ltrim(Status)) into chrNewStatus from T_WorkFlow  Where WLID = NEW.WLID ;

			select Count(*) into intCount From T_WorkFlowStep Where WLID = new.WLID ;

			if(intCount = 0 and (chrNewStatus = 'InProgress' or chrAutoActive='YES'))  then

			insert into T_WorkFlowStep(WLID,SortNumber,StepName,LimitedOperator,LimitedTime,DepartRelated,Status)
			select new.WLID,SortNumber,StepName,LimitedOperator,LimitedTime,DepartRelated, 'New'
			from T_WorkFlowTStep where TemName = new.TemName and SortNumber = 1 ;


			Update T_WorkFlowStep set Status = 'InProgress',ActiveTime = now() where SortNumber = 1 and WLID = new.WLID;
			Update T_WorkFlow Set Status = 'InProgress' Where WLID = new.WLID;

			end if;

			end if;

			END IF;
			return new;

			end
			$BODY$;

			ALTER FUNCTION public."Func_TG_InsertWLStepByStatus"()
			OWNER TO postgres;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3588</ID>
    <SQLText>
			-- FUNCTION: public.Func_TG_InsertWLStepDetail()

			-- DROP FUNCTION IF EXISTS public."Func_TG_InsertWLStepDetail"();

			CREATE OR REPLACE FUNCTION public."Func_TG_InsertWLStepDetail"()
			RETURNS trigger
			LANGUAGE 'plpgsql'
			COST 100
			VOLATILE NOT LEAKPROOF
			AS $BODY$
			declare intStepID bigint;
			declare intSortNumber bigint;
			declare intWLID bigint;
			declare chrTemName varchar(50);
			declare chrCreatorCode varchar(20);
			declare chrCreatorName varchar(20);
			declare chrCreatorDepartCode varchar(20);
			declare chrDepartRelated char(10);
			declare intDepartRelatedLevelNumber bigint;
			declare chrPartTimeReview char(10);
			declare chrSMSSend varchar(1000);
			declare chrMailSend varchar(1000);
			declare chrOperatorSelect char(10);
			declare chrPriorOperatorSelect char(10);
			declare chrIsSelect char(10);
			declare chrProjectRelated char(10);
			declare intProjectID bigint;

			declare chrRelatedType char(20);
			declare intRelatedID bigint;

			declare chrSelfReview char(10);

			declare chrAdminEMail varchar(200);
			declare intFolderID bigint;

			Begin

			select  EMail into chrAdminEMail From T_ProjectMember Where UserCode = 'ADMIN';
			select FolderID into intFolderID From T_MailFolder Where OwnerCode = 'ADMIN' and KeyWord = 'Waiting';

			select StepID,SortNumber,WLID,rtrim(DepartRelated) into intStepID,intSortNumber,intWLID,chrDepartRelated  from T_WorkFlowStep Where StepID = new.StepID;

			select CreatorCode,CreatorName,RelatedType,RelatedID into chrCreatorCode,chrCreatorName,chrRelatedType,intRelatedID from T_WorkFlow where WLID = new.WLID;

			select rtrim(DepartCode) into chrCreatorDepartCode  from T_ProjectMember where UserCode = chrCreatorCode;

			select TemName into chrTemName from T_WorkFlow where WLID = intWLID;

			--select @chrSMSSend = rtrim(ltrim(ReceiveSMS)) from T_WorkFlow where WLID = @intWLID

			select rtrim(SelfReview) into chrSelfReview from T_WorkFlowTStep where SortNumber = intSortNumber and TemName = chrTemName;
			select rtrim(OperatorSelect) into chrOperatorSelect  from T_WorkFlowTStep where SortNumber = @intSortNumber and TemName = chrTemName;
			select rtrim(IsPriorStepSelect) into chrPriorOperatorSelect from T_WorkFlowTStep where SortNumber = intSortNumber and TemName = chrTemName;

			select rtrim(PartTimeReview) into chrPartTimeReview  from T_WorkFlowTStep where SortNumber = intSortNumber and TemName = chrTemName;
			select rtrim(ProjectRelated) into chrProjectRelated from T_WorkFlowTStep where SortNumber = intSortNumber and TemName = chrTemName;
			select DepartRelatedLevelNumber into intDepartRelatedLevelNumber  from T_WorkFlowTStep where SortNumber = intSortNumber and TemName = chrTemName;

			select rtrim(SendSMS) into chrSMSSend  from T_WorkFlowTStep where SortNumber = intSortNumber and TemName = chrTemName;
			select rtrim(SendEMail) into chrMailSend  from T_WorkFlowTStep where SortNumber = intSortNumber and TemName = chrTemName;
			select '"ADMIN"' || '&amp;amp;amp;lt;' || chrMailSend || '&amp;amp;amp;gt;' into chrMailSend;

			----------以下中文短语和语句都不能改，信息发送时要进行其它语言的替换，以实现多语言功能，改了就可能替换不了---------

			--如果此步骤项目相关，则取得相关的项目号-------------------------------------------
			if(chrProjectRelated = 'YES')  Then

			if(chrRelatedType = '项目')   Then

			select   intRelatedID into intProjectID ;

			End If;

			if(chrRelatedType = '需求')   Then

			Select ProjectID into intProjectID  From T_RelatedReq Where ReqID = intRelatedID;

			End If;

			if(chrRelatedType = '缺陷')   Then

			Select ProjectID into intProjectID  From T_RelatedDefect Where DefectID = intRelatedID;

			End If;

			if(chrRelatedType = '计划')  Then

			Select iProjectID into intProjectID From T_ImplePlan Where ID = intRelatedID;

			End If;

			if(chrRelatedType = '任务')   Then

			Select ProjectID into intProjectID From T_ProjectTask Where TaskID = intRelatedID;

			End If;

			if(chrRelatedType = '风险')  Then

			Select ProjectID into intProjectID From T_ProjectRisk Where ID = intRelatedID;

			End If;

			End If;

			--如果申请者或前步审批者自选下一步审批者
			If(chrOperatorSelect = 'YES' or chrPriorOperatorSelect = 'YES')
			Then
			select  'NO' into chrIsSelect ;

			Else

			select  'YES' into chrIsSelect ;

			End If;

			if(chrSelfReview = 'YES')
			Then

			insert into T_WorkFlowStepDetail(StepID,WLID,OperatorCode,OperatorName,Actor,WorkDetail,FinishedTime,Requisite,FieldList,AllowFullEdit,EditFieldList,CanNotNullFieldList,SignPictureField,IsOperator,ManHour,Expense,Status)
			select intStepID,intWLID,chrCreatorCode,chrCreatorName,'主办者','发起人自审',1,'YES',A.FieldList,A.AllowFullEdit,A.EditFieldList,A.CanNotNullFieldList,A.SignPictureField, chrIsSelect,0,0,'InProgress'
			from T_WorkFlowTStepOperator A,T_WorkFlowTStep B
			where A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber;

			raise notice '1';

			If(chrSMSSend = 'YES' )
			Then

			insert into Sms_Send(UserCode,Mobile,Msg,UserRTXCode)
			SELECT chrCreatorCode,MobilePhone,'通知：你好，你有工作，内容：自审 ，请及时登录管理平台打开工作流模块进行处理，此信息来自：系统管理员！',coalesce(UserRTXCode,'')
			from T_ProjectMember
			where UserCode = chrCreatorCode;
			End If;

			If(chrMailSend = 'YES' )
			Then
			insert into T_Mail(Title,Body,FromAddress,ToAddress,CCAddress,HTMLFormat,SenderDate,contain,AttachmentFlag,ReaderFlag,FolderID,UserCode)
			select '审批通知','通知：你好，你有工作，内容：自审，请及时登录管理平台打开工作流模块进行处理，此信息来自：系统管理员！',
			chrAdminEMail,EMail,'',1,getdate(),100,0,0,intFolderID,'ADMIN'
			from T_ProjectMember
			where UserCode = chrCreatorCode;
			End If;

			Else

			If(chrDepartRelated = 'NO' )
			Then

			if(chrProjectRelated = 'NO')
			Then
			insert into T_WorkFlowStepDetail(StepID,WLID,OperatorCode,OperatorName,Actor,WorkDetail,FinishedTime,Requisite,FieldList,AllowFullEdit,EditFieldList,CanNotNullFieldList,SignPictureField, IsOperator,ManHour,Expense,Status)
			select intStepID,intWLID,C.UserCode,C.UserName,A.Actor,A.WorkDetail,A.LimitedTime,A.Requisite,A.FieldList,A.AllowFullEdit,A.EditFieldList,A.CanNotNullFieldList,A.SignPictureField,chrIsSelect,0,0,'InProgress'
			from T_ActorGroupDetail C,T_WorkFlowTStepOperator A,T_WorkFlowTStep B
			where C.GroupName = A.ActorGroup and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber;

			raise notice '2';

			If(chrSMSSend = 'YES' and chrOperatorSelect = 'NO')
			Then
			insert into Sms_Send(UserCode,Mobile,Msg,UserRTXCode)
			SELECT D.UserCode, D.MobilePhone,'通知：你好，你有工作，内容： ' || A.WorkDetail || '，请及时登录管理平台打开工作流模块进行处理，此信息来自：系统管理员！',coalesce(D.UserRTXCode,'')
			from T_ActorGroupDetail C,T_WorkFlowTStepOperator A,T_WorkFlowTStep B,T_ProjectMember D
			where C.GroupName = A.ActorGroup and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and C.UserCode = D.UserCode;
			End If;

			If(chrMailSend = 'YES' and chrOperatorSelect = 'NO')
			Then
			insert into T_Mail(Title,Body,FromAddress,ToAddress,CCAddress,HTMLFormat,SenderDate,contain,AttachmentFlag,ReaderFlag,FolderID,UserCode)
			select '审批通知','通知：你好，你有工作，内容： ' || A.WorkDetail || '，请及时登录管理平台打开工作流模块进行处理，此信息来自：系统管理员！',
			chrAdminEMail,D.EMail,'',1,getdate(),100,0,0,intFolderID,'ADMIN'
			from T_ActorGroupDetail C,T_WorkFlowTStepOperator A,T_WorkFlowTStep B,T_ProjectMember D
			where C.GroupName = A.ActorGroup and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and C.UserCode = D.UserCode;
			End If;

			Else

			insert into T_WorkFlowStepDetail(StepID,WLID,OperatorCode,OperatorName,Actor,WorkDetail,FinishedTime,Requisite,FieldList,AllowFullEdit,EditFieldList,CanNotNullFieldList,SignPictureField,IsOperator,ManHour,Expense,Status)
			select intStepID,intWLID,C.UserCode,C.UserName,A.Actor,A.WorkDetail,A.LimitedTime,A.Requisite,A.FieldList,A.AllowFullEdit,A.EditFieldList,A.CanNotNullFieldList,A.SignPictureField, chrIsSelect,0,0,'InProgress'
			from T_ActorGroupDetail C,T_RelatedUser D, T_WorkFlowTStepOperator A,T_WorkFlowTStep B
			where C.GroupName = A.ActorGroup and C.UserCode = D.UserCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber  and D.ProjectID = intProjectID;

			raise notice '3';

			If(chrSMSSend = 'YES' and chrOperatorSelect = 'NO')
			Then
			insert into Sms_Send(UserCode,Mobile,Msg,UserRTXCode)
			SELECT D.UserCode, D.MobilePhone,'通知：你好，你有工作，内容： ' || A.WorkDetail || '，请及时登录管理平台打开工作流模块进行处理，此信息来自：系统管理员！',coalesce(D.UserRTXCode,'')
			from T_ActorGroupDetail C,T_RelatedUser E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B,T_ProjectMember D
			where C.GroupName = A.ActorGroup and C.UserCode = E.UserCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and C.UserCode = D.UserCode and E.ProjectID = intRelatedID;
			End If;

			If(chrMailSend = 'YES' and chrOperatorSelect = 'NO')
			Then
			insert into T_Mail(Title,Body,FromAddress,ToAddress,CCAddress,HTMLFormat,SenderDate,contain,AttachmentFlag,ReaderFlag,FolderID,UserCode)
			select '审批通知','通知：你好，你有工作，内容： ' || A.WorkDetail || '，请及时登录管理平台打开工作流模块进行处理，此信息来自：系统管理员！',
			chrAdminEMail,D.EMail,'',1,getdate(),100,0,0,intFolderID,'ADMIN'
			from T_ActorGroupDetail C,T_RelatedUser E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B,T_ProjectMember D
			where C.GroupName = A.ActorGroup and C.UserCode = E.UserCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and C.UserCode = D.UserCode and E.ProjectID = intRelatedID;
			End If;

			End If;

			Else

			if(chrPartTimeReview = 'YES')
			Then

			if(chrProjectRelated = 'NO')
			Then

			insert into T_WorkFlowStepDetail(StepID,WLID,OperatorCode,OperatorName,WorkDetail,Actor,FinishedTime,Requisite,FieldList,AllowFullEdit,EditFieldList,CanNotNullFieldList,SignPictureField, IsOperator,ManHour,Expense,Status)
			select intStepID,intWLID,C.UserCode,C.UserName,A.WorkDetail,A.Actor,A.LimitedTime,A.Requisite,A.FieldList,A.AllowFullEdit,A.EditFieldList,A.CanNotNullFieldList,A.SignPictureField, chrIsSelect,0,0,'InProgress'
			from T_ActorGroupDetail C,T_ProjectMember D,T_Department E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B
			where C.GroupName = A.ActorGroup and C.UserCode = D.UserCode and D.DepartCode = E.DepartCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and (( D.DepartCode = chrCreatorDepartCode ) or (D.DepartCode in (select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber))
			or ( C.UserCode in ( Select UserCode From T_PartTimeJob Where DepartCode in ( select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber))));

			raise notice '4';

			If(chrSMSSend = 'YES' and chrOperatorSelect = 'NO')
			Then
			insert into Sms_Send(UserCode,Mobile,Msg,UserRTXCode)
			SELECT F.UserCode, F.MobilePhone,'通知：你好，你有工作，内容： ' || A.WorkDetail || '，请及时登录管理平台打开工作流模块进行处理，此信息来自：系统管理员！',coalesce(F.UserRTXCode,'')
			from T_ActorGroupDetail C,T_ProjectMember D,T_Department E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B,T_ProjectMember F
			where C.GroupName = A.ActorGroup and C.UserCode = D.UserCode and D.DepartCode = E.DepartCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and (( D.DepartCode = chrCreatorDepartCode ) or (D.DepartCode in (select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber))
			or ( C.UserCode in ( Select UserCode From T_PartTimeJob Where DepartCode in ( select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber))))
			and C.UserCode = F.UserCode;

			End If;

			If(chrMailSend = 'YES' and chrOperatorSelect = 'NO')
			Then
			insert into T_Mail(Title,Body,FromAddress,ToAddress,CCAddress,HTMLFormat,SenderDate,contain,AttachmentFlag,ReaderFlag,FolderID,UserCode)
			select '审批通知','通知：你好，你有工作，内容： ' || A.WorkDetail || '，请及时登录管理平台打开工作流模块进行处理，此信息来自：系统管理员！',
			chrAdminEMail,D.EMail,'',1,getdate(),100,0,0,intFolderID,'ADMIN'
			from T_ActorGroupDetail C,T_ProjectMember D,T_Department E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B,T_ProjectMember F
			where C.GroupName = A.ActorGroup and C.UserCode = D.UserCode and D.DepartCode = E.DepartCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and (( D.DepartCode = chrCreatorDepartCode ) or (D.DepartCode in (select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber))
			or ( C.UserCode in ( Select UserCode From T_PartTimeJob Where DepartCode in ( select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber))))
			and C.UserCode = F.UserCode;
			End If;

			Else

			insert into T_WorkFlowStepDetail(StepID,WLID,OperatorCode,OperatorName,WorkDetail,Actor,FinishedTime,Requisite,FieldList,AllowFullEdit,EditFieldList,CanNotNullFieldList,SignPictureField, IsOperator,ManHour,Expense,Status)
			select intStepID,intWLID,C.UserCode,C.UserName,A.WorkDetail,A.Actor,A.LimitedTime,A.Requisite,A.FieldList,A.AllowFullEdit,A.EditFieldList,A.CanNotNullFieldList,A.SignPictureField, chrIsSelect,0,0,'InProgress'
			from T_ActorGroupDetail C,T_RelatedUser F,T_ProjectMember D,T_Department E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B
			where C.GroupName = A.ActorGroup and C.UserCode = F.UserCode and  C.UserCode = D.UserCode and D.DepartCode = E.DepartCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and F.ProjectID = intProjectID and (( D.DepartCode = chrCreatorDepartCode ) or (D.DepartCode in (select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber))
			or ( C.UserCode in ( Select UserCode From T_PartTimeJob Where DepartCode in ( select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber))));

			raise notice '5';

			If(chrSMSSend = 'YES' and chrOperatorSelect = 'NO')
			Then
			insert into Sms_Send(UserCode,Mobile,Msg,UserRTXCode)
			SELECT F.UserCode, F.MobilePhone,'通知：你好，你有工作，内容： ' || A.WorkDetail || '，请及时登录管理平台打开工作流模块进行处理，此信息来自：系统管理员！',coalesce(F.UserRTXCode,'')
			from T_ActorGroupDetail C,T_RelatedUser G,T_ProjectMember D,T_Department E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B,T_ProjectMember F
			where C.GroupName = A.ActorGroup and C.UserCode = G.UserCode and C.UserCode = D.UserCode and D.DepartCode = E.DepartCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and G.ProjectID = intRelatedID and (( D.DepartCode = chrCreatorDepartCode ) or (D.DepartCode in (select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber))
			or ( C.UserCode in ( Select UserCode From T_PartTimeJob Where DepartCode in ( select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber))))
			and C.UserCode = F.UserCode;
			End If;

			If(chrMailSend = 'YES' and chrOperatorSelect = 'NO')
			Then
			insert into T_Mail(Title,Body,FromAddress,ToAddress,CCAddress,HTMLFormat,SenderDate,contain,AttachmentFlag,ReaderFlag,FolderID,UserCode)
			select '审批通知','通知：你好，你有工作，内容： ' || A.WorkDetail || '，请及时登录管理平台打开工作流模块进行处理，此信息来自：系统管理员！',
			chrAdminEMail,D.EMail,'',1,getdate(),100,0,0,intFolderID,'ADMIN'
			from T_ActorGroupDetail C,T_RelatedUser G,T_ProjectMember D,T_Department E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B,T_ProjectMember F
			where C.GroupName = A.ActorGroup and C.UserCode = G.UserCode and C.UserCode = D.UserCode and D.DepartCode = E.DepartCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and G.ProjectID = intRelatedID and (( D.DepartCode = chrCreatorDepartCode ) or (D.DepartCode in (select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber))
			or ( C.UserCode in ( Select UserCode From T_PartTimeJob Where DepartCode in ( select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber))))
			and C.UserCode = F.UserCode;
			End If;

			End If;

			Else

			if(chrProjectRelated = 'NO')
			Then

			insert into T_WorkFlowStepDetail(StepID,WLID,OperatorCode,OperatorName,WorkDetail,Actor,FinishedTime,Requisite,FieldList,AllowFullEdit,EditFieldList,CanNotNullFieldList,SignPictureField,IsOperator,ManHour,Expense,Status)
			select intStepID,intWLID,C.UserCode,C.UserName,A.WorkDetail,A.Actor,A.LimitedTime,A.Requisite,A.FieldList,A.AllowFullEdit,A.EditFieldList,A.CanNotNullFieldList,A.SignPictureField,chrIsSelect,0,0,'InProgress'
			from T_ActorGroupDetail C,T_ProjectMember D,T_Department E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B
			where C.GroupName = A.ActorGroup and C.UserCode = D.UserCode and D.DepartCode = E.DepartCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and (( D.DepartCode = chrCreatorDepartCode ) or (D.DepartCode in (select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber)));

			raise notice '6';

			If(chrSMSSend = 'YES' and chrOperatorSelect = 'NO')
			Then
			insert into Sms_Send(UserCode,Mobile,Msg,UserRTXCode)
			SELECT F.UserCode, F.MobilePhone,'通知：你好，你有工作，内容： ' || A.WorkDetail ||  '，请及时登录管理平台打开工作流模块进行处理，此信息来自：系统管理员！',coalesce(F.UserRTXCode,'')
			from T_ActorGroupDetail C,T_ProjectMember D,T_Department E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B,T_ProjectMember F
			where C.GroupName = A.ActorGroup and C.UserCode = D.UserCode and D.DepartCode = E.DepartCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and (( D.DepartCode = chrCreatorDepartCode ) or (D.DepartCode in (select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber)))
			and C.UserCode = F.UserCode;
			End If;

			If(chrMailSend = 'YES' and chrOperatorSelect = 'NO')
			Then
			insert into T_Mail(Title,Body,FromAddress,ToAddress,CCAddress,HTMLFormat,SenderDate,contain,AttachmentFlag,ReaderFlag,FolderID,UserCode)
			select '审批通知','通知：你好，你有工作，内容： ' || A.WorkDetail || '，请及时登录管理平台打开工作流模块进行处理，此信息来自：系统管理员！',
			chrAdminEMail,D.EMail,'',1,getdate(),100,0,0,intFolderID,'ADMIN'
			from T_ActorGroupDetail C,T_ProjectMember D,T_Department E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B,T_ProjectMember F
			where C.GroupName = A.ActorGroup and C.UserCode = D.UserCode and D.DepartCode = E.DepartCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and (( D.DepartCode = chrCreatorDepartCode ) or (D.DepartCode in (select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber)))
			and C.UserCode = F.UserCode;
			End If;

			Else

			insert into T_WorkFlowStepDetail(StepID,WLID,OperatorCode,OperatorName,WorkDetail,Actor,FinishedTime,Requisite,FieldList,AllowFullEdit,EditFieldList,CanNotNullFieldList,SignPictureField,IsOperator,ManHour,Expense,Status)
			select intStepID,intWLID,C.UserCode,C.UserName,A.WorkDetail,A.Actor,A.LimitedTime,A.Requisite,A.FieldList,A.AllowFullEdit,A.EditFieldList,A.CanNotNullFieldList,A.SignPictureField,chrIsSelect,0,0,'处理中'
			from T_ActorGroupDetail C,T_RelatedUser F,T_ProjectMember D,T_Department E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B
			where C.GroupName = A.ActorGroup and C.UserCode = F.UserCode and C.UserCode = D.UserCode and D.DepartCode = E.DepartCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and F.ProjectID = intProjectID and (( D.DepartCode = chrCreatorDepartCode ) or (D.DepartCode in (select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber)));

			raise notice 'intStepID: %,intWLID: %,chrTemName: %, intSortNumber: %,chrCreatorDepartCode:%,intDepartRelatedLevelNumber:%',cast(intStepID as char(8)),intWLID,chrTemName,intSortNumber,chrCreatorDepartCode,intDepartRelatedLevelNumber;

			If(chrSMSSend = 'YES' and chrOperatorSelect = 'NO')
			Then
			insert into Sms_Send(UserCode,Mobile,Msg,UserRTXCode)
			SELECT F.UserCode, F.MobilePhone,'通知：你好，你有工作，内容： ' || A.WorkDetail || '，请及时登录管理平台打开工作流模块进行处理，此信息来自：系统管理员！',coalesce(F.UserRTXCode,'')
			from T_ActorGroupDetail C,T_RelatedUser G,T_ProjectMember D,T_Department E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B,T_ProjectMember F
			where C.GroupName = A.ActorGroup and C.UserCode = G.UserCode and C.UserCode = D.UserCode and D.DepartCode = E.DepartCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and (( D.DepartCode = chrCreatorDepartCode ) or (D.DepartCode in (select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber)))
			and C.UserCode = F.UserCode and G.ProjectID = intRelatedID;
			End If;

			If(chrMailSend = 'YES' and chrOperatorSelect = 'NO')
			Then
			insert into T_Mail(Title,Body,FromAddress,ToAddress,CCAddress,HTMLFormat,SenderDate,contain,AttachmentFlag,ReaderFlag,FolderID,UserCode)
			select '审批通知','通知：你好，你有工作，内容： ' || A.WorkDetail || '，请及时登录管理平台打开工作流模块进行处理，此信息来自：系统管理员！',
			chrAdminEMail,D.EMail,'',1,getdate(),100,0,0,intFolderID,'ADMIN'
			from T_ActorGroupDetail C,T_RelatedUser G,T_ProjectMember D,T_Department E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B,T_ProjectMember F
			where C.GroupName = A.ActorGroup and C.UserCode = G.UserCode and C.UserCode = D.UserCode and D.DepartCode = E.DepartCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and (( D.DepartCode = chrCreatorDepartCode ) or (D.DepartCode in (select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber)))
			and C.UserCode = F.UserCode and G.ProjectID = intRelatedID;
			End If;
			End If;

			End If;
			End If;

			End If;
			return new;
			end
			$BODY$;

			ALTER FUNCTION public."Func_TG_InsertWLStepDetail"()
			OWNER TO postgres;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3589</ID>
    <SQLText>
			-- FUNCTION: public.Func_TG_DeleteWorkFlow()

			-- DROP FUNCTION IF EXISTS public."Func_TG_DeleteWorkFlow"();

			CREATE OR REPLACE FUNCTION public."Func_TG_DeleteWorkFlow"()
			RETURNS trigger
			LANGUAGE 'plpgsql'
			COST 100
			VOLATILE NOT LEAKPROOF
			AS $BODY$
			declare charWLType char(20);
			begin

			select rtrim(old.WLType) into charWLType;

			delete from T_WorkFlowStep where WLID = old.WLID;
			delete from T_WorkFlowStepDetail where WLID = old.WLID;

			delete from T_WorkFlowStepOperation where StepID
			in ( Select StepID from T_WorkFlowStep where WLID = old.WLID);

			delete from T_WorkFlowStepBusinessMember where StepID
			in ( Select StepID from T_WorkFlowStep where WLID = old.WLID);

			delete From T_ApproveFlow Where Type = 'Workflow'
			and RelatedID = old.WLID;

			if(charWLType = '费用报销') then
			update T_ExpenseClaim Set Status = 'New' where ECID = old.RelatedID;
			End if;

			if(charWLType = '费用申请') then
			update T_ExpenseApplyWL set Status = 'New' where ID = old.RelatedID;
			End if;

			if(charWLType = '资产采购') then
			update T_AssetPurchaseOrder set Status = 'New' where POID = old.RelatedID;
			End if;

			if(charWLType = '资产领用') then
			update T_AssetApplication set Status = 'New' where AAID = old.RelatedID;
			End if;

			if(charWLType = '合同评审') then
			update T_Constract set Status = 'New' where ConstractID = old.RelatedID;
			End if;

			return old;
			end
			$BODY$;

			ALTER FUNCTION public."Func_TG_DeleteWorkFlow"()
			OWNER TO postgres;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3590</ID>
    <SQLText>
			DO $$
			DECLARE
			tbl_name text;  -- 表名
			col_name text;  -- 字段名
			col_type text;  -- 字段类型
			query text;     -- 动态生成的查询语句
			update_query text; -- 动态生成的更新语句
			BEGIN
			-- 遍历所有表和字段
			FOR tbl_name, col_name, col_type IN
			SELECT table_name, column_name, data_type
			FROM information_schema.columns
			WHERE table_schema = 'public'  -- 假设表在 public schema 中
			LOOP
			-- 根据字段类型生成查询语句
			IF col_type IN ('text', 'varchar', 'character varying') THEN
			-- 文本类型字段：检查字段值是否为“Yes”或“No”
			query := format(
			'SELECT TRUE FROM %I WHERE %I = ''Yes'' OR %I = ''No'' LIMIT 1',
			tbl_name, col_name, col_name
			);

			-- 执行查询
			BEGIN
			EXECUTE query;
			IF FOUND THEN
			-- 如果找到匹配的记录，生成更新语句
			update_query := format(
			'UPDATE %I SET %I = CASE WHEN %I = ''Yes'' THEN ''YES'' WHEN %I = ''No'' THEN ''NO'' ELSE %I END',
			tbl_name, col_name, col_name, col_name, col_name
			);

			-- 执行更新
			EXECUTE update_query;

			-- 输出更新信息
			RAISE NOTICE 'Updated Table: %, Column: %', tbl_name, col_name;
			END IF;
			EXCEPTION
			WHEN others THEN
			-- 如果查询出错（例如类型不匹配），跳过该字段
			CONTINUE;
			END;
			END IF;
			END LOOP;
			END $$;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3591</ID>
    <SQLText>
			DO $$
			DECLARE
			tbl_name text;  -- 表名
			col_name text;  -- 字段名
			col_type text;  -- 字段类型
			query text;     -- 动态生成的查询语句
			update_query text; -- 动态生成的更新语句
			BEGIN
			-- 遍历所有表和字段
			FOR tbl_name, col_name, col_type IN
			SELECT table_name, column_name, data_type
			FROM information_schema.columns
			WHERE table_schema = 'public'  -- 假设表在 public schema 中
			LOOP
			-- 根据字段类型生成查询语句
			IF col_type IN ('text', 'varchar', 'character varying') THEN
			-- 文本类型字段：检查字段值是否为“是”或“否”
			query := format(
			'SELECT TRUE FROM %I WHERE %I = ''是'' OR %I = ''否'' LIMIT 1',
			tbl_name, col_name, col_name
			);

			-- 执行查询
			BEGIN
			EXECUTE query;
			IF FOUND THEN
			-- 如果找到匹配的记录，生成更新语句
			update_query := format(
			'UPDATE %I SET %I = CASE WHEN %I = ''是'' THEN ''YES'' WHEN %I = ''否'' THEN ''NO'' ELSE %I END',
			tbl_name, col_name, col_name, col_name, col_name
			);

			-- 执行更新
			EXECUTE update_query;

			-- 输出更新信息
			RAISE NOTICE 'Updated Table: %, Column: %', tbl_name, col_name;
			END IF;
			EXCEPTION
			WHEN others THEN
			-- 如果查询出错（例如类型不匹配），跳过该字段
			CONTINUE;
			END;
			END IF;
			END LOOP;
			END $$;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3592</ID>
    <SQLText>Update T_Project Set StatusValue = 'InProgress' Where StatusValue = '进行中';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3593</ID>
    <SQLText>
			-- FUNCTION: public.Func_TG_InsertWLStepDetail()

			-- DROP FUNCTION IF EXISTS public."Func_TG_InsertWLStepDetail"();

			CREATE OR REPLACE FUNCTION public."Func_TG_InsertWLStepDetail"()
			RETURNS trigger
			LANGUAGE 'plpgsql'
			COST 100
			VOLATILE NOT LEAKPROOF
			AS $BODY$
			declare intStepID bigint;
			declare intSortNumber bigint;
			declare intWLID bigint;
			declare chrTemName varchar(50);
			declare chrCreatorCode varchar(20);
			declare chrCreatorName varchar(20);
			declare chrCreatorDepartCode varchar(20);
			declare chrDepartRelated char(10);
			declare intDepartRelatedLevelNumber bigint;
			declare chrPartTimeReview char(10);
			declare chrSMSSend varchar(1000);
			declare chrMailSend varchar(1000);
			declare chrOperatorSelect char(10);
			declare chrPriorOperatorSelect char(10);
			declare chrIsSelect char(10);
			declare chrProjectRelated char(10);
			declare intProjectID bigint;

			declare chrRelatedType char(20);
			declare intRelatedID bigint;

			declare chrSelfReview char(10);

			declare chrAdminEMail varchar(200);
			declare intFolderID bigint;

			Begin

			select  EMail into chrAdminEMail From T_ProjectMember Where UserCode = 'ADMIN';
			select FolderID into intFolderID From T_MailFolder Where OwnerCode = 'ADMIN' and KeyWord = 'Waiting';

			select StepID,SortNumber,WLID,rtrim(DepartRelated) into intStepID,intSortNumber,intWLID,chrDepartRelated  from T_WorkFlowStep Where StepID = new.StepID;

			select CreatorCode,CreatorName,RelatedType,RelatedID into chrCreatorCode,chrCreatorName,chrRelatedType,intRelatedID from T_WorkFlow where WLID = new.WLID;

			select rtrim(DepartCode) into chrCreatorDepartCode  from T_ProjectMember where UserCode = chrCreatorCode;

			select TemName into chrTemName from T_WorkFlow where WLID = intWLID;

			--select @chrSMSSend = rtrim(ltrim(ReceiveSMS)) from T_WorkFlow where WLID = @intWLID

			select rtrim(SelfReview) into chrSelfReview from T_WorkFlowTStep where SortNumber = intSortNumber and TemName = chrTemName;
			select rtrim(OperatorSelect) into chrOperatorSelect  from T_WorkFlowTStep where SortNumber = @intSortNumber and TemName = chrTemName;
			select rtrim(IsPriorStepSelect) into chrPriorOperatorSelect from T_WorkFlowTStep where SortNumber = intSortNumber and TemName = chrTemName;

			select rtrim(PartTimeReview) into chrPartTimeReview  from T_WorkFlowTStep where SortNumber = intSortNumber and TemName = chrTemName;
			select rtrim(ProjectRelated) into chrProjectRelated from T_WorkFlowTStep where SortNumber = intSortNumber and TemName = chrTemName;
			select DepartRelatedLevelNumber into intDepartRelatedLevelNumber  from T_WorkFlowTStep where SortNumber = intSortNumber and TemName = chrTemName;

			select rtrim(SendSMS) into chrSMSSend  from T_WorkFlowTStep where SortNumber = intSortNumber and TemName = chrTemName;
			select rtrim(SendEMail) into chrMailSend  from T_WorkFlowTStep where SortNumber = intSortNumber and TemName = chrTemName;
			select '"ADMIN"' || '&amp;amp;amp;lt;' || chrMailSend || '&amp;amp;amp;gt;' into chrMailSend;

			----------以下中文短语和语句都不能改，信息发送时要进行其它语言的替换，以实现多语言功能，改了就可能替换不了---------

			--如果此步骤项目相关，则取得相关的项目号-------------------------------------------
			if(chrProjectRelated = 'YES')  Then

			if(chrRelatedType = 'Project')   Then

			select   intRelatedID into intProjectID ;

			End If;

			if(chrRelatedType = 'Requirement')   Then

			Select ProjectID into intProjectID  From T_RelatedReq Where ReqID = intRelatedID;

			End If;

			if(chrRelatedType = 'Defect')   Then

			Select ProjectID into intProjectID  From T_RelatedDefect Where DefectID = intRelatedID;

			End If;

			if(chrRelatedType = 'Plan')  Then

			Select iProjectID into intProjectID From T_ImplePlan Where ID = intRelatedID;

			End If;

			if(chrRelatedType = 'Task')   Then

			Select ProjectID into intProjectID From T_ProjectTask Where TaskID = intRelatedID;

			End If;

			if(chrRelatedType = 'Risk')  Then

			Select ProjectID into intProjectID From T_ProjectRisk Where ID = intRelatedID;

			End If;

			End If;

			--如果申请者或前步审批者自选下一步审批者
			If(chrOperatorSelect = 'YES' or chrPriorOperatorSelect = 'YES')
			Then
			select  'NO' into chrIsSelect ;

			Else

			select  'YES' into chrIsSelect ;

			End If;

			if(chrSelfReview = 'YES')
			Then

			insert into T_WorkFlowStepDetail(StepID,WLID,OperatorCode,OperatorName,Actor,WorkDetail,FinishedTime,Requisite,FieldList,AllowFullEdit,EditFieldList,CanNotNullFieldList,SignPictureField,IsOperator,ManHour,Expense,Status)
			select intStepID,intWLID,chrCreatorCode,chrCreatorName,'主办者','发起人自审',1,'YES',A.FieldList,A.AllowFullEdit,A.EditFieldList,A.CanNotNullFieldList,A.SignPictureField, chrIsSelect,0,0,'InProgress'
			from T_WorkFlowTStepOperator A,T_WorkFlowTStep B
			where A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber;

			raise notice '1';

			If(chrSMSSend = 'YES' )
			Then

			insert into Sms_Send(UserCode,Mobile,Msg,UserRTXCode)
			SELECT chrCreatorCode,MobilePhone,'通知：你好，你有工作，内容：自审 ，请及时登录管理平台打开工作流模块进行处理，此信息来自：系统管理员！',coalesce(UserRTXCode,'')
			from T_ProjectMember
			where UserCode = chrCreatorCode;
			End If;

			If(chrMailSend = 'YES' )
			Then
			insert into T_Mail(Title,Body,FromAddress,ToAddress,CCAddress,HTMLFormat,SenderDate,contain,AttachmentFlag,ReaderFlag,FolderID,UserCode)
			select '审批通知','通知：你好，你有工作，内容：自审，请及时登录管理平台打开工作流模块进行处理，此信息来自：系统管理员！',
			chrAdminEMail,EMail,'',1,getdate(),100,0,0,intFolderID,'ADMIN'
			from T_ProjectMember
			where UserCode = chrCreatorCode;
			End If;

			Else

			If(chrDepartRelated = 'NO' )
			Then

			if(chrProjectRelated = 'NO')
			Then
			insert into T_WorkFlowStepDetail(StepID,WLID,OperatorCode,OperatorName,Actor,WorkDetail,FinishedTime,Requisite,FieldList,AllowFullEdit,EditFieldList,CanNotNullFieldList,SignPictureField, IsOperator,ManHour,Expense,Status)
			select intStepID,intWLID,C.UserCode,C.UserName,A.Actor,A.WorkDetail,A.LimitedTime,A.Requisite,A.FieldList,A.AllowFullEdit,A.EditFieldList,A.CanNotNullFieldList,A.SignPictureField,chrIsSelect,0,0,'InProgress'
			from T_ActorGroupDetail C,T_WorkFlowTStepOperator A,T_WorkFlowTStep B
			where C.GroupName = A.ActorGroup and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber;

			raise notice '2';

			If(chrSMSSend = 'YES' and chrOperatorSelect = 'NO')
			Then
			insert into Sms_Send(UserCode,Mobile,Msg,UserRTXCode)
			SELECT D.UserCode, D.MobilePhone,'通知：你好，你有工作，内容： ' || A.WorkDetail || '，请及时登录管理平台打开工作流模块进行处理，此信息来自：系统管理员！',coalesce(D.UserRTXCode,'')
			from T_ActorGroupDetail C,T_WorkFlowTStepOperator A,T_WorkFlowTStep B,T_ProjectMember D
			where C.GroupName = A.ActorGroup and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and C.UserCode = D.UserCode;
			End If;

			If(chrMailSend = 'YES' and chrOperatorSelect = 'NO')
			Then
			insert into T_Mail(Title,Body,FromAddress,ToAddress,CCAddress,HTMLFormat,SenderDate,contain,AttachmentFlag,ReaderFlag,FolderID,UserCode)
			select '审批通知','通知：你好，你有工作，内容： ' || A.WorkDetail || '，请及时登录管理平台打开工作流模块进行处理，此信息来自：系统管理员！',
			chrAdminEMail,D.EMail,'',1,getdate(),100,0,0,intFolderID,'ADMIN'
			from T_ActorGroupDetail C,T_WorkFlowTStepOperator A,T_WorkFlowTStep B,T_ProjectMember D
			where C.GroupName = A.ActorGroup and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and C.UserCode = D.UserCode;
			End If;

			Else

			insert into T_WorkFlowStepDetail(StepID,WLID,OperatorCode,OperatorName,Actor,WorkDetail,FinishedTime,Requisite,FieldList,AllowFullEdit,EditFieldList,CanNotNullFieldList,SignPictureField,IsOperator,ManHour,Expense,Status)
			select intStepID,intWLID,C.UserCode,C.UserName,A.Actor,A.WorkDetail,A.LimitedTime,A.Requisite,A.FieldList,A.AllowFullEdit,A.EditFieldList,A.CanNotNullFieldList,A.SignPictureField, chrIsSelect,0,0,'InProgress'
			from T_ActorGroupDetail C,T_RelatedUser D, T_WorkFlowTStepOperator A,T_WorkFlowTStep B
			where C.GroupName = A.ActorGroup and C.UserCode = D.UserCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber  and D.ProjectID = intProjectID;

			raise notice '3';

			If(chrSMSSend = 'YES' and chrOperatorSelect = 'NO')
			Then
			insert into Sms_Send(UserCode,Mobile,Msg,UserRTXCode)
			SELECT D.UserCode, D.MobilePhone,'通知：你好，你有工作，内容： ' || A.WorkDetail || '，请及时登录管理平台打开工作流模块进行处理，此信息来自：系统管理员！',coalesce(D.UserRTXCode,'')
			from T_ActorGroupDetail C,T_RelatedUser E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B,T_ProjectMember D
			where C.GroupName = A.ActorGroup and C.UserCode = E.UserCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and C.UserCode = D.UserCode and E.ProjectID = intRelatedID;
			End If;

			If(chrMailSend = 'YES' and chrOperatorSelect = 'NO')
			Then
			insert into T_Mail(Title,Body,FromAddress,ToAddress,CCAddress,HTMLFormat,SenderDate,contain,AttachmentFlag,ReaderFlag,FolderID,UserCode)
			select '审批通知','通知：你好，你有工作，内容： ' || A.WorkDetail || '，请及时登录管理平台打开工作流模块进行处理，此信息来自：系统管理员！',
			chrAdminEMail,D.EMail,'',1,getdate(),100,0,0,intFolderID,'ADMIN'
			from T_ActorGroupDetail C,T_RelatedUser E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B,T_ProjectMember D
			where C.GroupName = A.ActorGroup and C.UserCode = E.UserCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and C.UserCode = D.UserCode and E.ProjectID = intRelatedID;
			End If;

			End If;

			Else

			if(chrPartTimeReview = 'YES')
			Then

			if(chrProjectRelated = 'NO')
			Then

			insert into T_WorkFlowStepDetail(StepID,WLID,OperatorCode,OperatorName,WorkDetail,Actor,FinishedTime,Requisite,FieldList,AllowFullEdit,EditFieldList,CanNotNullFieldList,SignPictureField, IsOperator,ManHour,Expense,Status)
			select intStepID,intWLID,C.UserCode,C.UserName,A.WorkDetail,A.Actor,A.LimitedTime,A.Requisite,A.FieldList,A.AllowFullEdit,A.EditFieldList,A.CanNotNullFieldList,A.SignPictureField, chrIsSelect,0,0,'InProgress'
			from T_ActorGroupDetail C,T_ProjectMember D,T_Department E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B
			where C.GroupName = A.ActorGroup and C.UserCode = D.UserCode and D.DepartCode = E.DepartCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and (( D.DepartCode = chrCreatorDepartCode ) or (D.DepartCode in (select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber))
			or ( C.UserCode in ( Select UserCode From T_PartTimeJob Where DepartCode in ( select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber))));

			raise notice '4';

			If(chrSMSSend = 'YES' and chrOperatorSelect = 'NO')
			Then
			insert into Sms_Send(UserCode,Mobile,Msg,UserRTXCode)
			SELECT F.UserCode, F.MobilePhone,'通知：你好，你有工作，内容： ' || A.WorkDetail || '，请及时登录管理平台打开工作流模块进行处理，此信息来自：系统管理员！',coalesce(F.UserRTXCode,'')
			from T_ActorGroupDetail C,T_ProjectMember D,T_Department E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B,T_ProjectMember F
			where C.GroupName = A.ActorGroup and C.UserCode = D.UserCode and D.DepartCode = E.DepartCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and (( D.DepartCode = chrCreatorDepartCode ) or (D.DepartCode in (select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber))
			or ( C.UserCode in ( Select UserCode From T_PartTimeJob Where DepartCode in ( select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber))))
			and C.UserCode = F.UserCode;

			End If;

			If(chrMailSend = 'YES' and chrOperatorSelect = 'NO')
			Then
			insert into T_Mail(Title,Body,FromAddress,ToAddress,CCAddress,HTMLFormat,SenderDate,contain,AttachmentFlag,ReaderFlag,FolderID,UserCode)
			select '审批通知','通知：你好，你有工作，内容： ' || A.WorkDetail || '，请及时登录管理平台打开工作流模块进行处理，此信息来自：系统管理员！',
			chrAdminEMail,D.EMail,'',1,getdate(),100,0,0,intFolderID,'ADMIN'
			from T_ActorGroupDetail C,T_ProjectMember D,T_Department E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B,T_ProjectMember F
			where C.GroupName = A.ActorGroup and C.UserCode = D.UserCode and D.DepartCode = E.DepartCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and (( D.DepartCode = chrCreatorDepartCode ) or (D.DepartCode in (select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber))
			or ( C.UserCode in ( Select UserCode From T_PartTimeJob Where DepartCode in ( select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber))))
			and C.UserCode = F.UserCode;
			End If;

			Else

			insert into T_WorkFlowStepDetail(StepID,WLID,OperatorCode,OperatorName,WorkDetail,Actor,FinishedTime,Requisite,FieldList,AllowFullEdit,EditFieldList,CanNotNullFieldList,SignPictureField, IsOperator,ManHour,Expense,Status)
			select intStepID,intWLID,C.UserCode,C.UserName,A.WorkDetail,A.Actor,A.LimitedTime,A.Requisite,A.FieldList,A.AllowFullEdit,A.EditFieldList,A.CanNotNullFieldList,A.SignPictureField, chrIsSelect,0,0,'InProgress'
			from T_ActorGroupDetail C,T_RelatedUser F,T_ProjectMember D,T_Department E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B
			where C.GroupName = A.ActorGroup and C.UserCode = F.UserCode and  C.UserCode = D.UserCode and D.DepartCode = E.DepartCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and F.ProjectID = intProjectID and (( D.DepartCode = chrCreatorDepartCode ) or (D.DepartCode in (select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber))
			or ( C.UserCode in ( Select UserCode From T_PartTimeJob Where DepartCode in ( select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber))));

			raise notice '5';

			If(chrSMSSend = 'YES' and chrOperatorSelect = 'NO')
			Then
			insert into Sms_Send(UserCode,Mobile,Msg,UserRTXCode)
			SELECT F.UserCode, F.MobilePhone,'通知：你好，你有工作，内容： ' || A.WorkDetail || '，请及时登录管理平台打开工作流模块进行处理，此信息来自：系统管理员！',coalesce(F.UserRTXCode,'')
			from T_ActorGroupDetail C,T_RelatedUser G,T_ProjectMember D,T_Department E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B,T_ProjectMember F
			where C.GroupName = A.ActorGroup and C.UserCode = G.UserCode and C.UserCode = D.UserCode and D.DepartCode = E.DepartCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and G.ProjectID = intRelatedID and (( D.DepartCode = chrCreatorDepartCode ) or (D.DepartCode in (select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber))
			or ( C.UserCode in ( Select UserCode From T_PartTimeJob Where DepartCode in ( select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber))))
			and C.UserCode = F.UserCode;
			End If;

			If(chrMailSend = 'YES' and chrOperatorSelect = 'NO')
			Then
			insert into T_Mail(Title,Body,FromAddress,ToAddress,CCAddress,HTMLFormat,SenderDate,contain,AttachmentFlag,ReaderFlag,FolderID,UserCode)
			select '审批通知','通知：你好，你有工作，内容： ' || A.WorkDetail || '，请及时登录管理平台打开工作流模块进行处理，此信息来自：系统管理员！',
			chrAdminEMail,D.EMail,'',1,getdate(),100,0,0,intFolderID,'ADMIN'
			from T_ActorGroupDetail C,T_RelatedUser G,T_ProjectMember D,T_Department E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B,T_ProjectMember F
			where C.GroupName = A.ActorGroup and C.UserCode = G.UserCode and C.UserCode = D.UserCode and D.DepartCode = E.DepartCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and G.ProjectID = intRelatedID and (( D.DepartCode = chrCreatorDepartCode ) or (D.DepartCode in (select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber))
			or ( C.UserCode in ( Select UserCode From T_PartTimeJob Where DepartCode in ( select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber))))
			and C.UserCode = F.UserCode;
			End If;

			End If;

			Else

			if(chrProjectRelated = 'NO')
			Then

			insert into T_WorkFlowStepDetail(StepID,WLID,OperatorCode,OperatorName,WorkDetail,Actor,FinishedTime,Requisite,FieldList,AllowFullEdit,EditFieldList,CanNotNullFieldList,SignPictureField,IsOperator,ManHour,Expense,Status)
			select intStepID,intWLID,C.UserCode,C.UserName,A.WorkDetail,A.Actor,A.LimitedTime,A.Requisite,A.FieldList,A.AllowFullEdit,A.EditFieldList,A.CanNotNullFieldList,A.SignPictureField,chrIsSelect,0,0,'InProgress'
			from T_ActorGroupDetail C,T_ProjectMember D,T_Department E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B
			where C.GroupName = A.ActorGroup and C.UserCode = D.UserCode and D.DepartCode = E.DepartCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and (( D.DepartCode = chrCreatorDepartCode ) or (D.DepartCode in (select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber)));

			raise notice '6';

			If(chrSMSSend = 'YES' and chrOperatorSelect = 'NO')
			Then
			insert into Sms_Send(UserCode,Mobile,Msg,UserRTXCode)
			SELECT F.UserCode, F.MobilePhone,'通知：你好，你有工作，内容： ' || A.WorkDetail ||  '，请及时登录管理平台打开工作流模块进行处理，此信息来自：系统管理员！',coalesce(F.UserRTXCode,'')
			from T_ActorGroupDetail C,T_ProjectMember D,T_Department E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B,T_ProjectMember F
			where C.GroupName = A.ActorGroup and C.UserCode = D.UserCode and D.DepartCode = E.DepartCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and (( D.DepartCode = chrCreatorDepartCode ) or (D.DepartCode in (select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber)))
			and C.UserCode = F.UserCode;
			End If;

			If(chrMailSend = 'YES' and chrOperatorSelect = 'NO')
			Then
			insert into T_Mail(Title,Body,FromAddress,ToAddress,CCAddress,HTMLFormat,SenderDate,contain,AttachmentFlag,ReaderFlag,FolderID,UserCode)
			select '审批通知','通知：你好，你有工作，内容： ' || A.WorkDetail || '，请及时登录管理平台打开工作流模块进行处理，此信息来自：系统管理员！',
			chrAdminEMail,D.EMail,'',1,getdate(),100,0,0,intFolderID,'ADMIN'
			from T_ActorGroupDetail C,T_ProjectMember D,T_Department E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B,T_ProjectMember F
			where C.GroupName = A.ActorGroup and C.UserCode = D.UserCode and D.DepartCode = E.DepartCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and (( D.DepartCode = chrCreatorDepartCode ) or (D.DepartCode in (select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber)))
			and C.UserCode = F.UserCode;
			End If;

			Else

			insert into T_WorkFlowStepDetail(StepID,WLID,OperatorCode,OperatorName,WorkDetail,Actor,FinishedTime,Requisite,FieldList,AllowFullEdit,EditFieldList,CanNotNullFieldList,SignPictureField,IsOperator,ManHour,Expense,Status)
			select intStepID,intWLID,C.UserCode,C.UserName,A.WorkDetail,A.Actor,A.LimitedTime,A.Requisite,A.FieldList,A.AllowFullEdit,A.EditFieldList,A.CanNotNullFieldList,A.SignPictureField,chrIsSelect,0,0,'处理中'
			from T_ActorGroupDetail C,T_RelatedUser F,T_ProjectMember D,T_Department E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B
			where C.GroupName = A.ActorGroup and C.UserCode = F.UserCode and C.UserCode = D.UserCode and D.DepartCode = E.DepartCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and F.ProjectID = intProjectID and (( D.DepartCode = chrCreatorDepartCode ) or (D.DepartCode in (select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber)));

			raise notice 'intStepID: %,intWLID: %,chrTemName: %, intSortNumber: %,chrCreatorDepartCode:%,intDepartRelatedLevelNumber:%',cast(intStepID as char(8)),intWLID,chrTemName,intSortNumber,chrCreatorDepartCode,intDepartRelatedLevelNumber;

			If(chrSMSSend = 'YES' and chrOperatorSelect = 'NO')
			Then
			insert into Sms_Send(UserCode,Mobile,Msg,UserRTXCode)
			SELECT F.UserCode, F.MobilePhone,'通知：你好，你有工作，内容： ' || A.WorkDetail || '，请及时登录管理平台打开工作流模块进行处理，此信息来自：系统管理员！',coalesce(F.UserRTXCode,'')
			from T_ActorGroupDetail C,T_RelatedUser G,T_ProjectMember D,T_Department E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B,T_ProjectMember F
			where C.GroupName = A.ActorGroup and C.UserCode = G.UserCode and C.UserCode = D.UserCode and D.DepartCode = E.DepartCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and (( D.DepartCode = chrCreatorDepartCode ) or (D.DepartCode in (select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber)))
			and C.UserCode = F.UserCode and G.ProjectID = intRelatedID;
			End If;

			If(chrMailSend = 'YES' and chrOperatorSelect = 'NO')
			Then
			insert into T_Mail(Title,Body,FromAddress,ToAddress,CCAddress,HTMLFormat,SenderDate,contain,AttachmentFlag,ReaderFlag,FolderID,UserCode)
			select '审批通知','通知：你好，你有工作，内容： ' || A.WorkDetail || '，请及时登录管理平台打开工作流模块进行处理，此信息来自：系统管理员！',
			chrAdminEMail,D.EMail,'',1,getdate(),100,0,0,intFolderID,'ADMIN'
			from T_ActorGroupDetail C,T_RelatedUser G,T_ProjectMember D,T_Department E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B,T_ProjectMember F
			where C.GroupName = A.ActorGroup and C.UserCode = G.UserCode and C.UserCode = D.UserCode and D.DepartCode = E.DepartCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and (( D.DepartCode = chrCreatorDepartCode ) or (D.DepartCode in (select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber)))
			and C.UserCode = F.UserCode and G.ProjectID = intRelatedID;
			End If;
			End If;

			End If;
			End If;

			End If;
			return new;
			end
			$BODY$;

			ALTER FUNCTION public."Func_TG_InsertWLStepDetail"()
			OWNER TO postgres;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3594</ID>
    <SQLText>
			DO $$
			DECLARE
			table_name TEXT;
			column_name TEXT;
			BEGIN
			FOR table_name, column_name IN
			SELECT c.table_name, c.column_name
			FROM information_schema.columns c
			JOIN information_schema.tables t
			ON c.table_schema = t.table_schema
			AND c.table_name = t.table_name
			WHERE c.column_name LIKE '%type%'
			AND c.table_schema = 'public'
			AND t.table_type = 'BASE TABLE'
			AND c.table_name NOT IN ('pbcatvld', 'pbcatedt') -- 排除特定表
			LOOP
			BEGIN
			-- 尝试修改字段类型
			EXECUTE format('ALTER TABLE %I ALTER COLUMN %I TYPE VARCHAR(200);', table_name, column_name);
			RAISE NOTICE 'Changed column % in table % to VARCHAR(200)', column_name, table_name;
			EXCEPTION
			WHEN others THEN
			-- 捕获异常并跳过被视图依赖的字段
			RAISE NOTICE 'Skipped column % in table % due to dependency on a view or rule', column_name, table_name;
			END;
			END LOOP;
			END $$;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3595</ID>
    <SQLText>
			UPDATE t_funinfordialbox
			SET inforname = CASE
			WHEN inforname = '要审核的申请' THEN 'ApplicationToBeReviewed'
			WHEN inforname = '要处理的协作' THEN 'CollaborationToHandle'
			WHEN inforname = '拖期的项目计划' THEN 'DelayedProjectPlan'
			WHEN inforname = '待处理的缺陷' THEN 'DefectsToHandle'
			WHEN inforname = '未写本周计划' THEN 'WeeklyPlanNotWritten'
			WHEN inforname = '要参加的会议' THEN 'MeetingToAttend'
			WHEN inforname = '待阅读的报表' THEN 'ReportsToRead'
			WHEN inforname = '待批准的计划' THEN 'PlansForApproval'
			WHEN inforname = '待批核的绩效' THEN 'PerformanceForApproval'
			WHEN inforname = '合同预付预警' THEN 'ContractPrepaymentWarning'
			WHEN inforname = '待处理的项目' THEN 'ProjectsToHandle'
			WHEN inforname = '待处理的风险' THEN 'RisksToHandle'
			WHEN inforname = '待处理的需求' THEN 'RequirementsToHandle'
			WHEN inforname = '待处理的任务' THEN 'TasksToHandle'
			WHEN inforname = '未阅读的邮件' THEN 'EmailsUnread'
			WHEN inforname = '要处理的投标' THEN 'BidsToHandle'
			ELSE inforname -- 如果没有匹配，则保留原值
			END;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3596</ID>
    <SQLText>Update public.t_funinfordialbox Set HomeName = InforName Where LangCode = 'en';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3597</ID>
    <SQLText>Update public.t_wltype Set HomeName = type Where LangCode = 'en';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3598</ID>
    <SQLText>
			Update public.t_actorgroup Set HomeName = groupname Where LangCode = 'en';
			Update public.t_actorgroup Set type = '所有' Where LangCode = 'en';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3599</ID>
    <SQLText>
			Update public.t_projectstatus Set reviewcontrol = 'YES' Where reviewcontrol = '是';
			Update public.t_projectstatus Set reviewcontrol = 'NO' Where reviewcontrol = '否';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3600</ID>
    <SQLText>
			-- FUNCTION: public.f_getcustomerrelateduserstring(character varying)

			-- DROP FUNCTION IF EXISTS public.f_getcustomerrelateduserstring(character varying);

			CREATE OR REPLACE FUNCTION public.f_getcustomerrelateduserstring(
			varcharcustomercode character varying)
			RETURNS character varying
			LANGUAGE 'plpgsql'
			COST 100
			VOLATILE PARALLEL UNSAFE
			AS $BODY$
			declare varcharusernamestring varchar(1000);

			begin

			select coalesce(string_agg(username,','),'') into varcharusernamestring from t_customerrelateduser where customercode=varcharcustomercode;

			return varcharusernamestring;

			end
			$BODY$;

			ALTER FUNCTION public.f_getcustomerrelateduserstring(character varying)
			OWNER TO postgres;

			COMMENT ON FUNCTION public.f_getcustomerrelateduserstring(character varying)
			IS 'Retrieve all visible user strings for the client.';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3601</ID>
    <SQLText>
			-- FUNCTION: public.get_createdproject_info(text)

			-- DROP FUNCTION IF EXISTS public.get_createdproject_info(text);

			CREATE OR REPLACE FUNCTION public.get_createdproject_info(
			usercode text)
			RETURNS SETOF t_project
			LANGUAGE 'plpgsql'
			COST 100
			VOLATILE PARALLEL UNSAFE
			ROWS 1000

			AS $BODY$
			DECLARE
			rec T_Project%ROWTYPE;
			BEGIN
			FOR rec IN EXECUTE format('WITH Cost AS (%s),
			Rea AS (%s)
			SELECT *
			FROM T_Project C
			LEFT JOIN Rea ON C.ProjectID = Rea.ProjectID
			WHERE C.UserCode = %L
			AND C.Status NOT IN (%L)
			ORDER BY C.ProjectID DESC
			LIMIT 20;',
			'(SELECT ProjectID, SUM(CASE WHEN Type=''Base'' THEN Total ELSE 0 END) AS BaseCost,
			SUM(CASE WHEN Type=''Operation'' THEN Total ELSE 0 END) AS OpCost
			FROM T_ProjectCostManage
			GROUP BY ProjectID)',
			'(SELECT ProjectID, COALESCE(OpCost, 0) / NULLIF(BaseCost, 0) AS TotalBL
			FROM Cost)',
			UserCode,
			ARRAY['New', 'Hided', 'Deleted', 'Actived'])
			LOOP
			RETURN NEXT rec;
			END LOOP;
			RETURN;
			END;
			$BODY$;

			ALTER FUNCTION public.get_createdproject_info(text)
			OWNER TO postgres;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3602</ID>
    <SQLText>
			-- FUNCTION: public.get_involvedproject_info(text)

			-- DROP FUNCTION IF EXISTS public.get_involvedproject_info(text);

			CREATE OR REPLACE FUNCTION public.get_involvedproject_info(
			usercode text)
			RETURNS SETOF t_relateduser
			LANGUAGE 'plpgsql'
			COST 100
			VOLATILE PARALLEL UNSAFE
			ROWS 1000

			AS $BODY$
			DECLARE
			rec T_RelatedUser%ROWTYPE;
			BEGIN
			FOR rec IN EXECUTE format('WITH Cost AS (%s),
			Rea AS (%s)
			SELECT C.*, Rea.TotalBL AS PercentRea
			FROM V_ProRelatedUser C
			LEFT JOIN Rea ON C.ProjectID = Rea.ProjectID
			LEFT JOIN T_ProjectType E ON C.ProjectType = E.Type
			WHERE C.UserCode = %L
			AND ((E.ProjectStartupNeedSupperConfirm = ''YES'' AND C.ConfirmedBySupper = ''YES'')
			OR E.ProjectStartupNeedSupperConfirm = ''NO'')
			AND C.ProStatus NOT IN (%L)
			AND C.PMCode &lt;&gt; %L
			ORDER BY C.ProjectID DESC
			LIMIT 30;',
			'(SELECT ProjectID, SUM(CASE WHEN Type=''Base'' THEN Total ELSE 0 END) AS BaseCost,
			SUM(CASE WHEN Type=''Operation'' THEN Total ELSE 0 END) AS OpCost
			FROM T_ProjectCostManage
			GROUP BY ProjectID)',
			'(SELECT ProjectID, COALESCE(OpCost, 0) / NULLIF(BaseCost, 0) AS TotalBL
			FROM Cost)',
			UserCode,
			ARRAY['New', 'Reviewed', 'Hided', 'Delted', 'Arachived', 'Pause', 'Stop'],
			UserCode)
			LOOP
			RETURN NEXT rec;
			END LOOP;
			RETURN;
			END;
			$BODY$;

			ALTER FUNCTION public.get_involvedproject_info(text)
			OWNER TO postgres;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3603</ID>
    <SQLText>
			-- FUNCTION: public.get_undertakedproject_info(text)

			-- DROP FUNCTION IF EXISTS public.get_undertakedproject_info(text);

			CREATE OR REPLACE FUNCTION public.get_undertakedproject_info(
			pmcode text)
			RETURNS SETOF t_project
			LANGUAGE 'plpgsql'
			COST 100
			VOLATILE PARALLEL UNSAFE
			ROWS 1000

			AS $BODY$
			DECLARE
			rec T_Project%ROWTYPE;
			BEGIN
			FOR rec IN EXECUTE format('WITH Cost AS (%s),
			Rea AS (%s)
			SELECT C.*, Rea.TotalBL AS PercentRea
			FROM T_Project C
			LEFT JOIN Rea ON C.ProjectID = Rea.ProjectID
			LEFT JOIN T_ProjectType E ON C.ProjectType = E.Type
			WHERE C.PMCode = %L
			AND ((E.ProjectStartupNeedSupperConfirm = ''YES'' AND C.ConfirmedBySupper = ''YES'')
			OR E.ProjectStartupNeedSupperConfirm = ''NO'')
			AND C.Status NOT IN (%L)
			ORDER BY C.ProjectID DESC
			LIMIT 30;',
			'(SELECT ProjectID, SUM(CASE WHEN Type=''Base'' THEN Total ELSE 0 END) AS BaseCost,
			SUM(CASE WHEN Type=''Operation'' THEN Total ELSE 0 END) AS OpCost
			FROM T_ProjectCostManage
			GROUP BY ProjectID)',
			'(SELECT ProjectID, COALESCE(OpCost, 0) / NULLIF(BaseCost, 0) AS TotalBL
			FROM Cost)',
			PMCode,
			ARRAY['New', 'Hided', 'Delted', 'Archived'])
			LOOP
			RETURN NEXT rec;
			END LOOP;
			RETURN;
			END;
			$BODY$;

			ALTER FUNCTION public.get_undertakedproject_info(text)
			OWNER TO postgres;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3604</ID>
    <SQLText>
			-- PROCEDURE: public.pr_copyimpleplandependencyandresources(bigint, bigint)

			-- DROP PROCEDURE IF EXISTS public.pr_copyimpleplandependencyandresources(bigint, bigint);

			CREATE OR REPLACE PROCEDURE public.pr_copyimpleplandependencyandresources(
			intpid bigint,
			intnewpid bigint)
			LANGUAGE 'plpgsql'
			AS $BODY$
			declare intfromid bigint;
			declare inttoid bigint;
			declare inttype bigint;
			declare intnewfromid bigint;
			declare intnewtoid bigint;

			declare updatedependencyid_cursor cursor(intpid bigint) for select from_id,to_id,type from dependency where pid=intpid ;

			begin
			open updatedependencyid_cursor(intpid);

			loop
			fetch updatedependencyid_cursor into intfromid,inttoid,inttype;

			exit when not found;

			select id into intnewfromid from t_impleplan where fromplanid = intfromid and pid = intnewpid ;
			select id into intnewtoid from t_impleplan where fromplanid = inttoid and pid = intnewpid ;

			if intnewfromid &gt;= 0 and intnewtoid &gt; 0 then
			insert into dependency(pid,from_id,to_id,type) values(intnewpid,intnewfromid ,intnewtoid ,inttype );
			end if;

			end loop;

			close  updatedependencyid_cursor;
			end
			$BODY$;

			ALTER PROCEDURE public.pr_copyimpleplandependencyandresources(bigint, bigint)
			OWNER TO postgres;

			COMMENT ON PROCEDURE public.pr_copyimpleplandependencyandresources(bigint, bigint)
			IS 'Copy plan dependencies';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3605</ID>
    <SQLText>
			-- PROCEDURE: public.pr_creatertxaccountdata()

			-- DROP PROCEDURE IF EXISTS public.pr_creatertxaccountdata();

			CREATE OR REPLACE PROCEDURE public.pr_creatertxaccountdata(
			)
			LANGUAGE 'plpgsql'
			AS $BODY$
			declare chrusercode char(20);
			declare chrdepartcode char(20);
			declare chrdepartname varchar(40);
			declare chrdepartparentcode char(20);
			declare chrdepartparentname varchar(40);
			declare chrdepartparentnamestring varchar(1000);

			declare intcount bigint;
			declare rtx_cursor cursor for select usercode from t_projectmember where status = '在职' order by usercode asc;

			begin
			select 1 into intcount;
			delete from t_rtxaccountdata;

			open rtx_cursor;
			loop
			fetch next from rtx_cursor into chrusercode;

			exit when not found;

			select rtrim(departcode) ,rtrim(departname) into chrdepartcode,chrdepartname from t_projectmember where usercode = chrusercode;
			select rtrim(parentcode) into chrdepartparentcode from t_department where departcode = chrdepartcode;
			select rtrim(departname) into chrdepartparentname from t_department where departcode = chrdepartparentcode;
			select rtrim(chrdepartcode) || ' ' || rtrim(chrdepartname) into chrdepartparentnamestring;

			while intcount &lt;&gt; 0
			loop

			select rtrim(departname) into chrdepartparentname from t_department where departcode = chrdepartparentcode;
			select rtrim(chrdepartparentcode) || ' ' || rtrim(chrdepartparentname) || '\' || rtrim(chrdepartparentnamestring) into chrdepartparentnamestring;
			select rtrim(parentcode) into chrdepartparentcode from t_department where departcode = chrdepartparentcode ;
			select count(*) into intcount from t_department where departcode = chrdepartparentcode;

			end loop;

			insert into t_rtxaccountdata(rtxcode,usercode,username,departnamestring,rtxnumber,email,mbphonenumber)
			select rtrim(usercode) || rtrim(username),usercode,username,chrdepartparentnamestring,'null',email,mobilephone from t_projectmember where usercode = chrusercode;

			select 1 into intcount;
			end loop;

			close rtx_cursor;

			end
			$BODY$;

			ALTER PROCEDURE public.pr_creatertxaccountdata()
			OWNER TO postgres;

			COMMENT ON PROCEDURE public.pr_creatertxaccountdata()
			IS 'Retrieve the parent department string function, used for generating RTX account data.';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3606</ID>
    <SQLText>
			-- PROCEDURE: public.pr_initialmodules(character, character)

			-- DROP PROCEDURE IF EXISTS public.pr_initialmodules(character, character);

			CREATE OR REPLACE PROCEDURE public.pr_initialmodules(
			sampleusercode character,
			usercode character)
			LANGUAGE 'plpgsql'
			AS $BODY$
			begin

			insert into t_promodule(modulename,usercode,visible,moduletype,usertype)
			select a.modulename,sampleusercode,'NO',a.moduletype,a.usertype from t_promodule a
			where a.usercode = 'ADMIN' and rtrim(a.modulename) || rtrim(a.moduletype) || rtrim(a.usertype)
			not in (select rtrim(b.modulename)||rtrim(b.moduletype) || rtrim (b.usertype) from t_promodule b where b.usercode = sampleusercode and b.moduletype = a.moduletype and b.usertype = a.usertype);


			insert into t_promodule(modulename,usercode,visible,moduletype,usertype)
			select a.modulename,a.usercode,a.visible,a.moduletype,a.usertype from t_promodule a
			where a.usercode = sampleusercode
			and (rtrim(a.modulename) || rtrim(a.moduletype) || rtrim(a.usertype) not in (select rtrim(b.modulename)||rtrim(b.moduletype) || rtrim (b.usertype) from t_promodule b where a.usercode = b.usercode and b.moduletype = a.moduletype and b.usertype = a.usertype )
			and rtrim(a.modulename)||rtrim(a.moduletype) || rtrim(a.usertype) in (select rtrim(c.modulename)||rtrim(c.moduletype) || rtrim (c.usertype) from t_promodulelevel c where c.moduletype = a.moduletype and c.usertype = a.usertype  and c.visible = 'YES' and c.isdeleted = 'NO'));
			end
			$BODY$;

			ALTER PROCEDURE public.pr_initialmodules(character, character)
			OWNER TO postgres;

			COMMENT ON PROCEDURE public.pr_initialmodules(character, character)
			IS 'Modify the module initialization stored procedure.';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3607</ID>
    <SQLText>
			-- PROCEDURE: public.pro_deleteadminunvisiblemodule()

			-- DROP PROCEDURE IF EXISTS public.pro_deleteadminunvisiblemodule();

			CREATE OR REPLACE PROCEDURE public.pro_deleteadminunvisiblemodule(
			)
			LANGUAGE 'plpgsql'
			AS $BODY$
			begin
			delete from t_promodule where modulename in (select modulename from t_promodulelevel where visible = 'no');
			delete from t_promodule where  usercode ='admin' and visible ='no';
			delete from t_promodule where usercode &lt;&gt; 'admin' and modulename not in (select modulename from t_promodule where usercode ='admin' );
			delete from t_departrelatedmodule where  modulename not in (select modulename from t_promodule where usercode ='admin' );
			end
			$BODY$;

			ALTER PROCEDURE public.pro_deleteadminunvisiblemodule()
			OWNER TO postgres;

			COMMENT ON PROCEDURE public.pro_deleteadminunvisiblemodule()
			IS 'Delete the ADMIN invisible module.';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3608</ID>
    <SQLText>
			-- PROCEDURE: public.pro_deletedoublemodule()

			-- DROP PROCEDURE IF EXISTS public.pro_deletedoublemodule();

			CREATE OR REPLACE PROCEDURE public.pro_deletedoublemodule(
			)
			LANGUAGE 'plpgsql'
			AS $BODY$
			begin
			delete from t_promodulelevel where id not in (select max(id) from t_promodulelevel group by modulename,parentmodule,moduletype,usertype,langcode);
			delete from t_promodule where id not in (select max(a.id) from t_promodule a group by a.modulename,a.usercode,a.moduletype,a.usertype);
			delete from t_departrelatedmodule where id not in (select max(a.id) from t_departrelatedmodule a group by a.modulename,a.departcode,a.moduletype,a.usertype);
			end
			$BODY$;

			ALTER PROCEDURE public.pro_deletedoublemodule()
			OWNER TO postgres;

			COMMENT ON PROCEDURE public.pro_deletedoublemodule()
			IS 'Create a stored procedure to delete duplicate modules.';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3609</ID>
    <SQLText>
			-- PROCEDURE: public.pro_rcjauditfundstartplan(bigint, bigint, character varying, smallint, money, time without time zone, character varying)

			-- DROP PROCEDURE IF EXISTS public.pro_rcjauditfundstartplan(bigint, bigint, character varying, smallint, money, time without time zone, character varying);

			CREATE OR REPLACE PROCEDURE public.pro_rcjauditfundstartplan(
			mpid bigint,
			planid bigint,
			userno character varying,
			bagree smallint,
			amount money,
			approvetime time without time zone,
			memo character varying)
			LANGUAGE 'plpgsql'
			AS $BODY$
			begin
			--Insert record
			if not exists(select 1 from t_rcjprojectfundstartplanapprove where projectid=mpid and fundplanid=planid) then
			insert into t_rcjprojectfundstartplanapprove(projectid,fundplanid,approverer,ifagreed,actualamount,approvetime,memo)
			values(mpid,planid,userno,bagree,amount,approvetime,memo);
			else
			update t_rcjprojectfundstartplanapprove set approverer=userno,ifagreed=bagree,actualamount=amount,approvetime=approvetime,memo=memo where projectid=mpid and fundplanid=planid;
			end if;
			--Update
			update t_rcjprojectfundstartplan set isreviewed = 1 where projectid=mpid and id=planid;
			end
			$BODY$;

			ALTER PROCEDURE public.pro_rcjauditfundstartplan(bigint, bigint, character varying, smallint, money, time without time zone, character varying)
			OWNER TO postgres;

			COMMENT ON PROCEDURE public.pro_rcjauditfundstartplan(bigint, bigint, character varying, smallint, money, time without time zone, character varying)
			IS 'Review owner plan';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3610</ID>
    <SQLText>
			-- PROCEDURE: public.pro_rcjdeleteconfirmrelated(bigint, bigint)

			-- DROP PROCEDURE IF EXISTS public.pro_rcjdeleteconfirmrelated(bigint, bigint);

			CREATE OR REPLACE PROCEDURE public.pro_rcjdeleteconfirmrelated(
			mpid bigint,
			confirmid bigint)
			LANGUAGE 'plpgsql'
			AS $BODY$
			begin
			delete from t_rcjprojectworkconfirm where projectid=mpid and workconfirmid=confirmid;
			delete from t_rcjprojectworkmoney where projectid=mpid and workconfirmid=confirmid;
			end
			$BODY$;

			ALTER PROCEDURE public.pro_rcjdeleteconfirmrelated(bigint, bigint)
			OWNER TO postgres;

			COMMENT ON PROCEDURE public.pro_rcjdeleteconfirmrelated(bigint, bigint)
			IS 'Delete the corresponding work and payment confirmation records.';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3611</ID>
    <SQLText>
			-- PROCEDURE: public.pro_rcjupdateconfirmpercent(bigint, bigint, bigint, bigint, bigint)

			-- DROP PROCEDURE IF EXISTS public.pro_rcjupdateconfirmpercent(bigint, bigint, bigint, bigint, bigint);

			CREATE OR REPLACE PROCEDURE public.pro_rcjupdateconfirmpercent(
			mpid bigint,
			typeid bigint,
			titemno bigint,
			tadjustid bigint,
			confirmid bigint)
			LANGUAGE 'plpgsql'
			AS $BODY$
			declare hasinputnum float;
			declare totalnum float;
			declare totalbudget money;
			declare titemnum float; --Number
			declare totalmoney money;
			declare hasconfirmmoney money;

			begin
			select sum(COALESCE(worknum ,0)) into hasinputnum from v_rcjprojectworkconfirm where projectid=mpid and workconfirmid=confirmid;
			select worknum into totalnum from v_rcjprojectworkdetails where projectid=mpid and workconfirmid=confirmid;
			update t_rcjprojectworkdetails set comfirmpercent=COALESCE(hasinputnum*1.0/totalnum,0) where projectid=mpid and workconfirmid=confirmid;

			select projectbcws,itemnum into totalbudget,titemnum from t_rcjprojectadjustpricelist where projectid=mpid and itemtype=typeid and itemno=titemno and adjustid=tadjustid;

			select sum(worknum) into totalnum from v_rcjprojectworkconfirm where projectid=mpid and workconfirmid=confirmid;
			select totalbudget * totalnum / itemnum into totalmoney;
			select sum(COALESCE(moneynum ,0)) into hasconfirmmoney from v_rcjprojectworkmoney where projectid=mpid and workconfirmid=confirmid;
			update t_rcjprojectworkdetails set recievepercent=COALESCE(hasconfirmmoney/totalmoney ,0) where projectid=mpid and workconfirmid=confirmid;
			end
			$BODY$;

			ALTER PROCEDURE public.pro_rcjupdateconfirmpercent(bigint, bigint, bigint, bigint, bigint)
			OWNER TO postgres;

			COMMENT ON PROCEDURE public.pro_rcjupdateconfirmpercent(bigint, bigint, bigint, bigint, bigint)
			IS 'Update the confirmed workload ratio.';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3612</ID>
    <SQLText>
			-- PROCEDURE: public.pro_rcjupdatetotalworknum(bigint, bigint, bigint)

			-- DROP PROCEDURE IF EXISTS public.pro_rcjupdatetotalworknum(bigint, bigint, bigint);

			CREATE OR REPLACE PROCEDURE public.pro_rcjupdatetotalworknum(
			mpid bigint,
			typeid bigint,
			titemno bigint)
			LANGUAGE 'plpgsql'
			AS $BODY$
			declare hasinputnum bigint;
			declare totalnum bigint;

			begin
			select sum(COALESCE(worknum ,0)) into hasinputnum from v_rcjprojectworkconfirm where projectid=mpid and itemtype=typeid and itemno=titemno;

			select sum(worknum) into totalnum from v_rcjprojectworkdetails where projectid=mpid and itemtype=typeid and itemno=titemno;

			update t_rcjprojectcostperformancebenchmar set totalwork=COALESCE(totalnum,0),totalconfirmwork=COALESCE(hasinputnum,0) where projectid=mpid and itemtype=typeid and itemno=titemno;

			end
			$BODY$;

			ALTER PROCEDURE public.pro_rcjupdatetotalworknum(bigint, bigint, bigint)
			OWNER TO postgres;

			COMMENT ON PROCEDURE public.pro_rcjupdatetotalworknum(bigint, bigint, bigint)
			IS 'Update the confirmed workload ratio.';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3613</ID>
    <SQLText>
			-- FUNCTION: public.Func_Insert_T_TakeTopSalaryMain()

			-- DROP FUNCTION IF EXISTS public."Func_Insert_T_TakeTopSalaryMain"();

			CREATE OR REPLACE FUNCTION public."Func_Insert_T_TakeTopSalaryMain"()
			RETURNS trigger
			LANGUAGE 'plpgsql'
			COST 100
			VOLATILE NOT LEAKPROOF
			AS $BODY$
			begin

			insert into T_TriggerTableToFrom(Name,MainTable,FromTable,MainID,Status,CreateTime)
			values('SalaryReviewApplication','T_TakeTopSalaryMain','T_TakeTopSalaryMainDetail',new.Id,0,now());

			insert into T_TriggerTableToFrom(Name,MainTable,FromTable,MainID,Status,CreateTime)
			values('SalaryReviewApplication','T_TakeTopSalaryMain','T_TakeTopSalarySecondDetail',new.Id,0,now());

			return new;
			end
			$BODY$;

			ALTER FUNCTION public."Func_Insert_T_TakeTopSalaryMain"()
			OWNER TO postgres;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3614</ID>
    <SQLText>
			-- FUNCTION: public.Func_Insert_T_TestStudentInformation()

			-- DROP FUNCTION IF EXISTS public."Func_Insert_T_TestStudentInformation"();

			CREATE OR REPLACE FUNCTION public."Func_Insert_T_TestStudentInformation"()
			RETURNS trigger
			LANGUAGE 'plpgsql'
			COST 100
			VOLATILE NOT LEAKPROOF
			AS $BODY$
			begin
			insert into T_TriggerTableToFrom(Name,MainTable,FromTable,MainID,Status,CreateTime)
			values('StudentResumeAndAcademicRecordReviewProcess','T_TestStudentInformation','T_TestStudentBrief',new.Id,0,now());

			insert into T_TriggerTableToFrom(Name,MainTable,FromTable,MainID,Status,CreateTime)
			values('StudentResumeAndAcademicRecordReviewProcess','T_TestStudentInformation','T_TestStudentScoreDetail',new.Id,0,now());

			return new;
			end
			$BODY$;

			ALTER FUNCTION public."Func_Insert_T_TestStudentInformation"()
			OWNER TO postgres;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3615</ID>
    <SQLText>
			-- FUNCTION: public.Func_Insert_T_TestWuPingLingYongMain()

			-- DROP FUNCTION IF EXISTS public."Func_Insert_T_TestWuPingLingYongMain"();

			CREATE OR REPLACE FUNCTION public."Func_Insert_T_TestWuPingLingYongMain"()
			RETURNS trigger
			LANGUAGE 'plpgsql'
			COST 100
			VOLATILE NOT LEAKPROOF
			AS $BODY$
			begin

			insert into T_TriggerTableToFrom(Name,MainTable,FromTable,MainID,Status,CreateTime)
			values('ItemRequisitionApplication','T_TestWuPingLingYongMain','T_TestWuPIngLingYongDetail',new.Id,0,now());

			return new;
			end
			$BODY$;

			ALTER FUNCTION public."Func_Insert_T_TestWuPingLingYongMain"()
			OWNER TO postgres;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3616</ID>
    <SQLText>
			-- FUNCTION: public.Func_TG_DeleteWorkFlow()

			-- DROP FUNCTION IF EXISTS public."Func_TG_DeleteWorkFlow"();

			CREATE OR REPLACE FUNCTION public."Func_TG_DeleteWorkFlow"()
			RETURNS trigger
			LANGUAGE 'plpgsql'
			COST 100
			VOLATILE NOT LEAKPROOF
			AS $BODY$

			declare charWLType char(20);
			begin

			select rtrim(old.WLType) into charWLType;

			delete from T_WorkFlowStep where WLID = old.WLID;
			delete from T_WorkFlowStepDetail where WLID = old.WLID;

			delete from T_WorkFlowStepOperation where StepID
			in ( Select StepID from T_WorkFlowStep where WLID = old.WLID);

			delete from T_WorkFlowStepBusinessMember where StepID
			in ( Select StepID from T_WorkFlowStep where WLID = old.WLID);

			delete From T_ApproveFlow Where Type = 'Workflow'
			and RelatedID = old.WLID;

			if(charWLType = 'ExpenseReimbursement') then
			update T_ExpenseClaim Set Status = 'New' where ECID = old.RelatedID;
			End if;

			if(charWLType = 'ExpenseApplication') then
			update T_ExpenseApplyWL set Status = 'New' where ID = old.RelatedID;
			End if;

			if(charWLType = 'AssetProcurement') then
			update T_AssetPurchaseOrder set Status = 'New' where POID = old.RelatedID;
			End if;

			if(charWLType = 'AssetRequisition') then
			update T_AssetApplication set Status = 'New' where AAID = old.RelatedID;
			End if;

			if(charWLType = 'ContractReview') then
			update T_Constract set Status = 'New' where ConstractID = old.RelatedID;
			End if;

			return old;
			end
			$BODY$;

			ALTER FUNCTION public."Func_TG_DeleteWorkFlow"()
			OWNER TO postgres;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3617</ID>
    <SQLText>
			-- FUNCTION: public.Func_TG_InsertWLStepDetail()

			-- DROP FUNCTION IF EXISTS public."Func_TG_InsertWLStepDetail"();

			CREATE OR REPLACE FUNCTION public."Func_TG_InsertWLStepDetail"()
			RETURNS trigger
			LANGUAGE 'plpgsql'
			COST 100
			VOLATILE NOT LEAKPROOF
			AS $BODY$

			declare intStepID bigint;
			declare intSortNumber bigint;
			declare intWLID bigint;
			declare chrTemName varchar(50);
			declare chrCreatorCode varchar(20);
			declare chrCreatorName varchar(20);
			declare chrCreatorDepartCode varchar(20);
			declare chrDepartRelated char(10);
			declare intDepartRelatedLevelNumber bigint;
			declare chrPartTimeReview char(10);
			declare chrSMSSend varchar(1000);
			declare chrMailSend varchar(1000);
			declare chrOperatorSelect char(10);
			declare chrPriorOperatorSelect char(10);
			declare chrIsSelect char(10);
			declare chrProjectRelated char(10);
			declare intProjectID bigint;

			declare chrRelatedType char(20);
			declare intRelatedID bigint;

			declare chrSelfReview char(10);

			declare chrAdminEMail varchar(200);
			declare intFolderID bigint;

			Begin

			select  EMail into chrAdminEMail From T_ProjectMember Where UserCode = 'ADMIN';
			select FolderID into intFolderID From T_MailFolder Where OwnerCode = 'ADMIN' and KeyWord = 'Waiting';

			select StepID,SortNumber,WLID,rtrim(DepartRelated) into intStepID,intSortNumber,intWLID,chrDepartRelated  from T_WorkFlowStep Where StepID = new.StepID;

			select CreatorCode,CreatorName,RelatedType,RelatedID into chrCreatorCode,chrCreatorName,chrRelatedType,intRelatedID from T_WorkFlow where WLID = new.WLID;

			select rtrim(DepartCode) into chrCreatorDepartCode  from T_ProjectMember where UserCode = chrCreatorCode;

			select TemName into chrTemName from T_WorkFlow where WLID = intWLID;

			--select @chrSMSSend = rtrim(ltrim(ReceiveSMS)) from T_WorkFlow where WLID = @intWLID

			select rtrim(SelfReview) into chrSelfReview from T_WorkFlowTStep where SortNumber = intSortNumber and TemName = chrTemName;
			select rtrim(OperatorSelect) into chrOperatorSelect  from T_WorkFlowTStep where SortNumber = @intSortNumber and TemName = chrTemName;
			select rtrim(IsPriorStepSelect) into chrPriorOperatorSelect from T_WorkFlowTStep where SortNumber = intSortNumber and TemName = chrTemName;

			select rtrim(PartTimeReview) into chrPartTimeReview  from T_WorkFlowTStep where SortNumber = intSortNumber and TemName = chrTemName;
			select rtrim(ProjectRelated) into chrProjectRelated from T_WorkFlowTStep where SortNumber = intSortNumber and TemName = chrTemName;
			select DepartRelatedLevelNumber into intDepartRelatedLevelNumber  from T_WorkFlowTStep where SortNumber = intSortNumber and TemName = chrTemName;

			select rtrim(SendSMS) into chrSMSSend  from T_WorkFlowTStep where SortNumber = intSortNumber and TemName = chrTemName;
			select rtrim(SendEMail) into chrMailSend  from T_WorkFlowTStep where SortNumber = intSortNumber and TemName = chrTemName;
			select '"ADMIN"' || '&amp;amp;amp;lt;' || chrMailSend || '&amp;amp;amp;gt;' into chrMailSend;

			----------以下中文短语和语句都不能改，信息发送时要进行其它语言的替换，以实现多语言功能，改了就可能替换不了---------

			--如果此步骤项目相关，则取得相关的项目号-------------------------------------------
			if(chrProjectRelated = 'YES')  Then

			if(chrRelatedType = 'Project')   Then

			select   intRelatedID into intProjectID ;

			End If;

			if(chrRelatedType = 'Requirement')   Then

			Select ProjectID into intProjectID  From T_RelatedReq Where ReqID = intRelatedID;

			End If;

			if(chrRelatedType = 'Defect')   Then

			Select ProjectID into intProjectID  From T_RelatedDefect Where DefectID = intRelatedID;

			End If;

			if(chrRelatedType = 'Plan')  Then

			Select iProjectID into intProjectID From T_ImplePlan Where ID = intRelatedID;

			End If;

			if(chrRelatedType = 'Task')   Then

			Select ProjectID into intProjectID From T_ProjectTask Where TaskID = intRelatedID;

			End If;

			if(chrRelatedType = 'Risk')  Then

			Select ProjectID into intProjectID From T_ProjectRisk Where ID = intRelatedID;

			End If;

			End If;

			--如果申请者或前步审批者自选下一步审批者
			If(chrOperatorSelect = 'YES' or chrPriorOperatorSelect = 'YES')
			Then
			select  'NO' into chrIsSelect ;

			Else

			select  'YES' into chrIsSelect ;

			End If;

			if(chrSelfReview = 'YES')
			Then

			insert into T_WorkFlowStepDetail(StepID,WLID,OperatorCode,OperatorName,Actor,WorkDetail,FinishedTime,Requisite,FieldList,AllowFullEdit,EditFieldList,CanNotNullFieldList,SignPictureField,IsOperator,ManHour,Expense,Status)
			select intStepID,intWLID,chrCreatorCode,chrCreatorName,'主办者','发起人自审',1,'YES',A.FieldList,A.AllowFullEdit,A.EditFieldList,A.CanNotNullFieldList,A.SignPictureField, chrIsSelect,0,0,'InProgress'
			from T_WorkFlowTStepOperator A,T_WorkFlowTStep B
			where A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber;

			raise notice '1';

			If(chrSMSSend = 'YES' )
			Then

			insert into Sms_Send(UserCode,Mobile,Msg,UserRTXCode)
			SELECT chrCreatorCode,MobilePhone,'Notice:Hello, you have a new task assigned to you. The task content is: Self-Review.',coalesce(UserRTXCode,'')
			from T_ProjectMember
			where UserCode = chrCreatorCode;
			End If;

			If(chrMailSend = 'YES' )
			Then
			insert into T_Mail(Title,Body,FromAddress,ToAddress,CCAddress,HTMLFormat,SenderDate,contain,AttachmentFlag,ReaderFlag,FolderID,UserCode)
			select 'Review Notice','Notice:Hello, you have a new task assigned to you. The task content is: Self-Review.',
			chrAdminEMail,EMail,'',1,getdate(),100,0,0,intFolderID,'ADMIN'
			from T_ProjectMember
			where UserCode = chrCreatorCode;
			End If;

			Else

			If(chrDepartRelated = 'NO' )
			Then

			if(chrProjectRelated = 'NO')
			Then
			insert into T_WorkFlowStepDetail(StepID,WLID,OperatorCode,OperatorName,Actor,WorkDetail,FinishedTime,Requisite,FieldList,AllowFullEdit,EditFieldList,CanNotNullFieldList,SignPictureField, IsOperator,ManHour,Expense,Status)
			select intStepID,intWLID,C.UserCode,C.UserName,A.Actor,A.WorkDetail,A.LimitedTime,A.Requisite,A.FieldList,A.AllowFullEdit,A.EditFieldList,A.CanNotNullFieldList,A.SignPictureField,chrIsSelect,0,0,'InProgress'
			from T_ActorGroupDetail C,T_WorkFlowTStepOperator A,T_WorkFlowTStep B
			where C.GroupName = A.ActorGroup and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber;

			raise notice '2';

			If(chrSMSSend = 'YES' and chrOperatorSelect = 'NO')
			Then
			insert into Sms_Send(UserCode,Mobile,Msg,UserRTXCode)
			SELECT D.UserCode, D.MobilePhone,'Notice: Hello, you have a task, content: ' || A.WorkDetail || '，Please log in to the management platform and open the Workflow Module to process it as soon as possible. This message is from the System Administrator!',coalesce(D.UserRTXCode,'')
			from T_ActorGroupDetail C,T_WorkFlowTStepOperator A,T_WorkFlowTStep B,T_ProjectMember D
			where C.GroupName = A.ActorGroup and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and C.UserCode = D.UserCode;
			End If;

			If(chrMailSend = 'YES' and chrOperatorSelect = 'NO')
			Then
			insert into T_Mail(Title,Body,FromAddress,ToAddress,CCAddress,HTMLFormat,SenderDate,contain,AttachmentFlag,ReaderFlag,FolderID,UserCode)
			select 'Review Notice','Notice: Hello, you have a task, content: ' || A.WorkDetail || '，Please log in to the management platform and open the Workflow Module to process it as soon as possible. This message is from the System Administrator!',
			chrAdminEMail,D.EMail,'',1,getdate(),100,0,0,intFolderID,'ADMIN'
			from T_ActorGroupDetail C,T_WorkFlowTStepOperator A,T_WorkFlowTStep B,T_ProjectMember D
			where C.GroupName = A.ActorGroup and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and C.UserCode = D.UserCode;
			End If;

			Else

			insert into T_WorkFlowStepDetail(StepID,WLID,OperatorCode,OperatorName,Actor,WorkDetail,FinishedTime,Requisite,FieldList,AllowFullEdit,EditFieldList,CanNotNullFieldList,SignPictureField,IsOperator,ManHour,Expense,Status)
			select intStepID,intWLID,C.UserCode,C.UserName,A.Actor,A.WorkDetail,A.LimitedTime,A.Requisite,A.FieldList,A.AllowFullEdit,A.EditFieldList,A.CanNotNullFieldList,A.SignPictureField, chrIsSelect,0,0,'InProgress'
			from T_ActorGroupDetail C,T_RelatedUser D, T_WorkFlowTStepOperator A,T_WorkFlowTStep B
			where C.GroupName = A.ActorGroup and C.UserCode = D.UserCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber  and D.ProjectID = intProjectID;

			raise notice '3';

			If(chrSMSSend = 'YES' and chrOperatorSelect = 'NO')
			Then
			insert into Sms_Send(UserCode,Mobile,Msg,UserRTXCode)
			SELECT D.UserCode, D.MobilePhone,'Notice: Hello, you have a task, content: ' || A.WorkDetail || '，Please log in to the management platform and open the Workflow Module to process it as soon as possible. This message is from the System Administrator!',coalesce(D.UserRTXCode,'')
			from T_ActorGroupDetail C,T_RelatedUser E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B,T_ProjectMember D
			where C.GroupName = A.ActorGroup and C.UserCode = E.UserCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and C.UserCode = D.UserCode and E.ProjectID = intRelatedID;
			End If;

			If(chrMailSend = 'YES' and chrOperatorSelect = 'NO')
			Then
			insert into T_Mail(Title,Body,FromAddress,ToAddress,CCAddress,HTMLFormat,SenderDate,contain,AttachmentFlag,ReaderFlag,FolderID,UserCode)
			select 'Review Notice','Notice: Hello, you have a task, content:： ' || A.WorkDetail || '，Please log in to the management platform and open the Workflow Module to process it as soon as possible. This message is from the System Administrator!',
			chrAdminEMail,D.EMail,'',1,getdate(),100,0,0,intFolderID,'ADMIN'
			from T_ActorGroupDetail C,T_RelatedUser E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B,T_ProjectMember D
			where C.GroupName = A.ActorGroup and C.UserCode = E.UserCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and C.UserCode = D.UserCode and E.ProjectID = intRelatedID;
			End If;

			End If;

			Else

			if(chrPartTimeReview = 'YES')
			Then

			if(chrProjectRelated = 'NO')
			Then

			insert into T_WorkFlowStepDetail(StepID,WLID,OperatorCode,OperatorName,WorkDetail,Actor,FinishedTime,Requisite,FieldList,AllowFullEdit,EditFieldList,CanNotNullFieldList,SignPictureField, IsOperator,ManHour,Expense,Status)
			select intStepID,intWLID,C.UserCode,C.UserName,A.WorkDetail,A.Actor,A.LimitedTime,A.Requisite,A.FieldList,A.AllowFullEdit,A.EditFieldList,A.CanNotNullFieldList,A.SignPictureField, chrIsSelect,0,0,'InProgress'
			from T_ActorGroupDetail C,T_ProjectMember D,T_Department E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B
			where C.GroupName = A.ActorGroup and C.UserCode = D.UserCode and D.DepartCode = E.DepartCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and (( D.DepartCode = chrCreatorDepartCode ) or (D.DepartCode in (select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber))
			or ( C.UserCode in ( Select UserCode From T_PartTimeJob Where DepartCode in ( select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber))));

			raise notice '4';

			If(chrSMSSend = 'YES' and chrOperatorSelect = 'NO')
			Then
			insert into Sms_Send(UserCode,Mobile,Msg,UserRTXCode)
			SELECT F.UserCode, F.MobilePhone,'Notice: Hello, you have a task, content: ' || A.WorkDetail || '，Please log in to the management platform and open the Workflow Module to process it as soon as possible. This message is from the System Administrator!',coalesce(F.UserRTXCode,'')
			from T_ActorGroupDetail C,T_ProjectMember D,T_Department E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B,T_ProjectMember F
			where C.GroupName = A.ActorGroup and C.UserCode = D.UserCode and D.DepartCode = E.DepartCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and (( D.DepartCode = chrCreatorDepartCode ) or (D.DepartCode in (select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber))
			or ( C.UserCode in ( Select UserCode From T_PartTimeJob Where DepartCode in ( select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber))))
			and C.UserCode = F.UserCode;

			End If;

			If(chrMailSend = 'YES' and chrOperatorSelect = 'NO')
			Then
			insert into T_Mail(Title,Body,FromAddress,ToAddress,CCAddress,HTMLFormat,SenderDate,contain,AttachmentFlag,ReaderFlag,FolderID,UserCode)
			select 'Review Notice','Notice: Hello, you have a task, content: ' || A.WorkDetail || '，Please log in to the management platform and open the Workflow Module to process it as soon as possible. This message is from the System Administrator!',
			chrAdminEMail,D.EMail,'',1,getdate(),100,0,0,intFolderID,'ADMIN'
			from T_ActorGroupDetail C,T_ProjectMember D,T_Department E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B,T_ProjectMember F
			where C.GroupName = A.ActorGroup and C.UserCode = D.UserCode and D.DepartCode = E.DepartCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and (( D.DepartCode = chrCreatorDepartCode ) or (D.DepartCode in (select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber))
			or ( C.UserCode in ( Select UserCode From T_PartTimeJob Where DepartCode in ( select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber))))
			and C.UserCode = F.UserCode;
			End If;

			Else

			insert into T_WorkFlowStepDetail(StepID,WLID,OperatorCode,OperatorName,WorkDetail,Actor,FinishedTime,Requisite,FieldList,AllowFullEdit,EditFieldList,CanNotNullFieldList,SignPictureField, IsOperator,ManHour,Expense,Status)
			select intStepID,intWLID,C.UserCode,C.UserName,A.WorkDetail,A.Actor,A.LimitedTime,A.Requisite,A.FieldList,A.AllowFullEdit,A.EditFieldList,A.CanNotNullFieldList,A.SignPictureField, chrIsSelect,0,0,'InProgress'
			from T_ActorGroupDetail C,T_RelatedUser F,T_ProjectMember D,T_Department E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B
			where C.GroupName = A.ActorGroup and C.UserCode = F.UserCode and  C.UserCode = D.UserCode and D.DepartCode = E.DepartCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and F.ProjectID = intProjectID and (( D.DepartCode = chrCreatorDepartCode ) or (D.DepartCode in (select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber))
			or ( C.UserCode in ( Select UserCode From T_PartTimeJob Where DepartCode in ( select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber))));

			raise notice '5';

			If(chrSMSSend = 'YES' and chrOperatorSelect = 'NO')
			Then
			insert into Sms_Send(UserCode,Mobile,Msg,UserRTXCode)
			SELECT F.UserCode, F.MobilePhone,'Notice: Hello, you have a task, content: ' || A.WorkDetail || '，Please log in to the management platform and open the Workflow Module to process it as soon as possible. This message is from the System Administrator!',coalesce(F.UserRTXCode,'')
			from T_ActorGroupDetail C,T_RelatedUser G,T_ProjectMember D,T_Department E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B,T_ProjectMember F
			where C.GroupName = A.ActorGroup and C.UserCode = G.UserCode and C.UserCode = D.UserCode and D.DepartCode = E.DepartCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and G.ProjectID = intRelatedID and (( D.DepartCode = chrCreatorDepartCode ) or (D.DepartCode in (select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber))
			or ( C.UserCode in ( Select UserCode From T_PartTimeJob Where DepartCode in ( select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber))))
			and C.UserCode = F.UserCode;
			End If;

			If(chrMailSend = 'YES' and chrOperatorSelect = 'NO')
			Then
			insert into T_Mail(Title,Body,FromAddress,ToAddress,CCAddress,HTMLFormat,SenderDate,contain,AttachmentFlag,ReaderFlag,FolderID,UserCode)
			select 'Review Notice','Notice: Hello, you have a task, content: ' || A.WorkDetail || '，Please log in to the management platform and open the Workflow Module to process it as soon as possible. This message is from the System Administrator!',
			chrAdminEMail,D.EMail,'',1,getdate(),100,0,0,intFolderID,'ADMIN'
			from T_ActorGroupDetail C,T_RelatedUser G,T_ProjectMember D,T_Department E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B,T_ProjectMember F
			where C.GroupName = A.ActorGroup and C.UserCode = G.UserCode and C.UserCode = D.UserCode and D.DepartCode = E.DepartCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and G.ProjectID = intRelatedID and (( D.DepartCode = chrCreatorDepartCode ) or (D.DepartCode in (select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber))
			or ( C.UserCode in ( Select UserCode From T_PartTimeJob Where DepartCode in ( select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber))))
			and C.UserCode = F.UserCode;
			End If;

			End If;

			Else

			if(chrProjectRelated = 'NO')
			Then

			insert into T_WorkFlowStepDetail(StepID,WLID,OperatorCode,OperatorName,WorkDetail,Actor,FinishedTime,Requisite,FieldList,AllowFullEdit,EditFieldList,CanNotNullFieldList,SignPictureField,IsOperator,ManHour,Expense,Status)
			select intStepID,intWLID,C.UserCode,C.UserName,A.WorkDetail,A.Actor,A.LimitedTime,A.Requisite,A.FieldList,A.AllowFullEdit,A.EditFieldList,A.CanNotNullFieldList,A.SignPictureField,chrIsSelect,0,0,'InProgress'
			from T_ActorGroupDetail C,T_ProjectMember D,T_Department E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B
			where C.GroupName = A.ActorGroup and C.UserCode = D.UserCode and D.DepartCode = E.DepartCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and (( D.DepartCode = chrCreatorDepartCode ) or (D.DepartCode in (select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber)));

			raise notice '6';

			If(chrSMSSend = 'YES' and chrOperatorSelect = 'NO')
			Then
			insert into Sms_Send(UserCode,Mobile,Msg,UserRTXCode)
			SELECT F.UserCode, F.MobilePhone,'Notice: Hello, you have a task, content: ' || A.WorkDetail ||  '，Please log in to the management platform and open the Workflow Module to process it as soon as possible. This message is from the System Administrator!',coalesce(F.UserRTXCode,'')
			from T_ActorGroupDetail C,T_ProjectMember D,T_Department E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B,T_ProjectMember F
			where C.GroupName = A.ActorGroup and C.UserCode = D.UserCode and D.DepartCode = E.DepartCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and (( D.DepartCode = chrCreatorDepartCode ) or (D.DepartCode in (select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber)))
			and C.UserCode = F.UserCode;
			End If;

			If(chrMailSend = 'YES' and chrOperatorSelect = 'NO')
			Then
			insert into T_Mail(Title,Body,FromAddress,ToAddress,CCAddress,HTMLFormat,SenderDate,contain,AttachmentFlag,ReaderFlag,FolderID,UserCode)
			select 'Review Notice','Notice: Hello, you have a task, content: ' || A.WorkDetail || '，Please log in to the management platform and open the Workflow Module to process it as soon as possible. This message is from the System Administrator!',
			chrAdminEMail,D.EMail,'',1,getdate(),100,0,0,intFolderID,'ADMIN'
			from T_ActorGroupDetail C,T_ProjectMember D,T_Department E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B,T_ProjectMember F
			where C.GroupName = A.ActorGroup and C.UserCode = D.UserCode and D.DepartCode = E.DepartCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and (( D.DepartCode = chrCreatorDepartCode ) or (D.DepartCode in (select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber)))
			and C.UserCode = F.UserCode;
			End If;

			Else

			insert into T_WorkFlowStepDetail(StepID,WLID,OperatorCode,OperatorName,WorkDetail,Actor,FinishedTime,Requisite,FieldList,AllowFullEdit,EditFieldList,CanNotNullFieldList,SignPictureField,IsOperator,ManHour,Expense,Status)
			select intStepID,intWLID,C.UserCode,C.UserName,A.WorkDetail,A.Actor,A.LimitedTime,A.Requisite,A.FieldList,A.AllowFullEdit,A.EditFieldList,A.CanNotNullFieldList,A.SignPictureField,chrIsSelect,0,0,'处理中'
			from T_ActorGroupDetail C,T_RelatedUser F,T_ProjectMember D,T_Department E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B
			where C.GroupName = A.ActorGroup and C.UserCode = F.UserCode and C.UserCode = D.UserCode and D.DepartCode = E.DepartCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and F.ProjectID = intProjectID and (( D.DepartCode = chrCreatorDepartCode ) or (D.DepartCode in (select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber)));

			raise notice 'intStepID: %,intWLID: %,chrTemName: %, intSortNumber: %,chrCreatorDepartCode:%,intDepartRelatedLevelNumber:%',cast(intStepID as char(8)),intWLID,chrTemName,intSortNumber,chrCreatorDepartCode,intDepartRelatedLevelNumber;

			If(chrSMSSend = 'YES' and chrOperatorSelect = 'NO')
			Then
			insert into Sms_Send(UserCode,Mobile,Msg,UserRTXCode)
			SELECT F.UserCode, F.MobilePhone,'Notice: Hello, you have a task, content: ' || A.WorkDetail || '，Please log in to the management platform and open the Workflow Module to process it as soon as possible. This message is from the System Administrator!',coalesce(F.UserRTXCode,'')
			from T_ActorGroupDetail C,T_RelatedUser G,T_ProjectMember D,T_Department E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B,T_ProjectMember F
			where C.GroupName = A.ActorGroup and C.UserCode = G.UserCode and C.UserCode = D.UserCode and D.DepartCode = E.DepartCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and (( D.DepartCode = chrCreatorDepartCode ) or (D.DepartCode in (select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber)))
			and C.UserCode = F.UserCode and G.ProjectID = intRelatedID;
			End If;

			If(chrMailSend = 'YES' and chrOperatorSelect = 'NO')
			Then
			insert into T_Mail(Title,Body,FromAddress,ToAddress,CCAddress,HTMLFormat,SenderDate,contain,AttachmentFlag,ReaderFlag,FolderID,UserCode)
			select 'Review Notice','Notice: Hello, you have a task, content: ' || A.WorkDetail || '，Please log in to the management platform and open the Workflow Module to process it as soon as possible. This message is from the System Administrator!',
			chrAdminEMail,D.EMail,'',1,getdate(),100,0,0,intFolderID,'ADMIN'
			from T_ActorGroupDetail C,T_RelatedUser G,T_ProjectMember D,T_Department E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B,T_ProjectMember F
			where C.GroupName = A.ActorGroup and C.UserCode = G.UserCode and C.UserCode = D.UserCode and D.DepartCode = E.DepartCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and (( D.DepartCode = chrCreatorDepartCode ) or (D.DepartCode in (select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber)))
			and C.UserCode = F.UserCode and G.ProjectID = intRelatedID;
			End If;
			End If;

			End If;
			End If;

			End If;
			return new;
			end
			$BODY$;

			ALTER FUNCTION public."Func_TG_InsertWLStepDetail"()
			OWNER TO postgres;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3618</ID>
    <SQLText>
			-- FUNCTION: public.Func_TG_Insert_T_ExpenseApplyWL()

			-- DROP FUNCTION IF EXISTS public."Func_TG_Insert_T_ExpenseApplyWL"();

			CREATE OR REPLACE FUNCTION public."Func_TG_Insert_T_ExpenseApplyWL"()
			RETURNS trigger
			LANGUAGE 'plpgsql'
			COST 100
			VOLATILE NOT LEAKPROOF
			AS $BODY$
			declare intAccountCode bigint;
			begin
			select AccountCode into intAccountCode From T_Account Where AccountName = new.Account;

			Update T_ExpenseApplyWL Set AccountCode = intAccountCode Where ID = new.ID;
			Update T_ExpenseApplyWL Set WorkFlowWLName = 'OfficeExpensesApplicationProcess' Where ID = new.ID;

			Insert Into T_TriggerTableToFrom(Name,MainTable,FromTable,MainID,Status,CreateTime)
			values(new.ExpenseName,'T_ExpenseApplyWL','T_ExpenseApplyWL',new.ID,0,now());

			return new;
			end
			$BODY$;

			ALTER FUNCTION public."Func_TG_Insert_T_ExpenseApplyWL"()
			OWNER TO postgres;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3619</ID>
    <SQLText>
			-- FUNCTION: public.Func_tg_ImplePlan_Insert()

			-- DROP FUNCTION IF EXISTS public."Func_tg_ImplePlan_Insert"();

			CREATE OR REPLACE FUNCTION public."Func_tg_ImplePlan_Insert"()
			RETURNS trigger
			LANGUAGE 'plpgsql'
			COST 100
			VOLATILE NOT LEAKPROOF
			AS $BODY$
			declare charCreatorCode char(20);
			declare charPlanOperatorCode char(20);
			declare charPlanOperatorName char(20);
			declare charBelongDepartCode char(20);
			declare charBelongDepartName varchar(40);
			declare charLeaderCode char(20);
			declare charLeaderName char(20);

			begin
			select rtrim(COALESCE(new.OperatorCode,'')),rtrim(COALESCE(new.OperatorName,'')),rtrim(COALESCE(new.BelongDepartCode,''))
			,rtrim(COALESCE(new.BelongDepartName,'')),rtrim(COALESCE(new.LeaderCode,'')),rtrim(COALESCE(new.leader,''))
			into charPlanOperatorCode,charPlanOperatorName,charBelongDepartCode ,charBelongDepartName,charLeaderCode,charLeaderName;

			--更新归属部门代码和名称
			if  length(charLeaderCode) &gt; 0  then

			select DepartCode,DepartName into charBelongDepartCode,charBelongDepartName From T_ProjectMember  Where UserCode = charLeaderCode;
			Update T_ImplePlan Set BelongDepartCode = charBelongDepartCode,BelongDepartName = charBelongDepartName Where ID = new.ID;

			End if;

			--增加小时，纠正日期
			update T_ImplePlan Set end_date = timeadd('hour',23, end_date) Where ID = new.ID and date_part('hour',end_date) = 0;

			--改变基准时间段和单位的值
			update T_ImplePlan Set BaseLine_Start_Date = new.Start_Date,BaseLine_End_Date = new.End_Date Where ID = new.ID;
			update T_ImplePlan Set Duration = F_WorkDay(new.Start_Date,new.End_Date)+1,Duration_Unit='d' Where ID = new.ID;

			if(new.ProjectID = 0 or new.ProjectID = null)
			then

			Select cast(substring(ltrim(rtrim(cast(new.PID as char(50)))) from 0  for char_length(ltrim(rtrim(cast(new.PID as char(50)))))-1) as int) into new.ProjectID;
			Select cast(substring(ltrim(rtrim(cast(new.PID as char(50)))) from char_length(ltrim(rtrim(cast (new.PID as char(50)))))-1 for 2) as int) into new.VerID;

			-- 		  --增加小时，纠正日期
			-- 		  update T_ImplePlan Set end_date = timeadd('hour',23, end_date) Where ID = new.ID and date_part('hour',end_date) = 0;

			-- 		  --改变基准时间段和单位的值
			-- 		  update T_ImplePlan Set BaseLine_Start_Date = new.Start_Date,BaseLine_End_Date = new.End_Date Where ID = new.ID;
			-- 		  update T_ImplePlan Set Duration = F_WorkDay(new.Start_Date,new.End_Date)+1,Duration_Unit='d' Where ID = new.ID;

			Update T_ImplePlan Set ProjectID = new.ProjectID Where ID = new.ID;
			Update T_ImplePlan Set VerID = new.VerID   Where ID = new.ID;

			Select CreatorCode into charCreatorCode From T_ProjectPlanVersion Where ProjectID = new.ProjectID and VerID = new.VerID;

			Update T_ImplePlan Set UpdateManCode = charCreatorCode  Where ID = new.ID;
			Update T_ImplePlan Set CreatorCode = charCreatorCode  Where ID = new.ID;

			Update T_ImplePlan Set Type = 'Plan'  Where ID = new.ID;
			Update T_ImplePlan Set Status = 'Plan'  Where ID = new.ID;
			Update T_ImplePlan Set PriorID = 0 Where Id = new.ID;
			Update T_ImplePlan Set FromPlanID = new.ID Where ID = new.ID;

			if(charPlanOperatorCode = null Or charPlanOperatorCode = '')
			then

			Select PMCode,PMName into charPlanOperatorCode , charPlanOperatorName From T_Project Where ProjectID = new.ProjectID;
			Update T_ImplePlan Set OperatorCode = charPlanOperatorCode,OperatorName =charPlanOperatorName Where ID = new.ID;

			end if;

			end if;

			return new;
			end
			$BODY$;

			ALTER FUNCTION public."Func_tg_ImplePlan_Insert"()
			OWNER TO postgres;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3620</ID>
    <SQLText>
			-- FUNCTION: public.Func_tg_ProjectPlanVersion_insert_impleplan()

			-- DROP FUNCTION IF EXISTS public."Func_tg_ProjectPlanVersion_insert_impleplan"();

			CREATE OR REPLACE FUNCTION public."Func_tg_ProjectPlanVersion_insert_impleplan"()
			RETURNS trigger
			LANGUAGE 'plpgsql'
			COST 100
			VOLATILE NOT LEAKPROOF
			AS $BODY$
			declare intWorkID bigint;
			declare chrProjectName varchar(200);
			declare dtBeginTime timestamp without time zone;
			declare dtEndTime timestamp without time zone;
			declare chrResource varchar(100);
			declare deBudget decimal;
			declare chrStatus char(10);
			declare chrPMCode char(20);
			declare intCount bigint;
			declare intPID bigint;

			begin
			if new.VerID &lt; 10 then
			select cast(ltrim(rtrim(cast(new.ProjectID as char(50)))) || '0' || ltrim(rtrim(cast(new.VerID as char(50)))) as bigint) into intPID;
			end if;
			if new.VerID &gt;= 10 then
			select cast(ltrim(rtrim(cast(new.ProjectID as char(50)))) || ltrim(rtrim(cast(new.VerID as char(50)))) as bigint) into intPID;
			end if;

			select 1,ProjectName,BeginDate,EndDate,PMCode,Budget,Status into intWorkID,chrProjectName,dtBeginTime,dtEndTime,chrPMCode,deBudget,chrStatus from T_Project where ProjectID = new.ProjectID;
			select UserName into chrResource from T_ProjectMember where UserCode = chrPMCode;
			select Count(*) into intCount from T_ProjectPlanVersion where ProjectID = new.ProjectID;
			if intCount &gt; 0 then
			insert into T_ImplePlan(VerID,ProjectID,WorkID,PriorID,Type,Name,Start_Date,End_Date,BaseLine_Start_Date,BaseLine_End_Date,Duration,Duration_Unit,Resource,Budget,Status,DefaultSchedule,DefaultCost,ParentID,BackupID,LockStatus,UpdateManCode,CreatorCode,UpdateTime,PID,Parent_ID)
			values(new.VerID,new.ProjectID,intWorkID,0,'Plan',chrProjectName,dtBeginTime,dtEndTime + '1 day',dtBeginTime,dtEndTime+'1 day',1,'d',chrResource,COALESCE(deBudget,0),'Plan',0,0,0,0,'Yes',new.CreatorCode,new.CreatorCode,now(),intPID,0);

			-- Update T_ImplePlan Set FromPlanID = PlanID Where PID = intPID;

			End if;

			return new;
			end
			$BODY$;

			ALTER FUNCTION public."Func_tg_ProjectPlanVersion_insert_impleplan"()
			OWNER TO postgres;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3621</ID>
    <SQLText>
			-- FUNCTION: public.Func_tg_insert_RelatedUser()

			-- DROP FUNCTION IF EXISTS public."Func_tg_insert_RelatedUser"();

			CREATE OR REPLACE FUNCTION public."Func_tg_insert_RelatedUser"()
			RETURNS trigger
			LANGUAGE 'plpgsql'
			COST 100
			VOLATILE NOT LEAKPROOF
			AS $BODY$
			declare chrPMDepartCode char(20);
			declare chrPMDepartName varchar(40);
			declare chrCreatorDepartCode char(20);
			declare chrCreatorDepartName varchar(40);

			begin

			select DepartCode into chrPMDepartCode from T_ProjectMember where UserCode = new.PMCode ;
			select DepartName into chrPMDepartName from T_Department where DepartCode = chrPMDepartCode;

			if(new.UserCode = new.PMCode) then


			insert into T_RelatedUser(ProjectID,ProjectName,UserCode,UserName,DepartCode,DepartName,Actor,JoinDate,WorkDetail,UnitHourSalary,ActorGroup,SMScount,Status,CanUpdatePlan,LeaveDate)
			Values(new.ProjectID,new.ProjectName,new.PMCode,new.PMName,chrPMDepartCode,chrPMDepartName,'Project manager,Initiator',now(),'Establish and manage projects',0,'',0,'Plan','YES',new.EndDate);

			else

			insert into T_RelatedUser(ProjectID,ProjectName,UserCode,UserName,DepartCode,DepartName,Actor,JoinDate,WorkDetail,UnitHourSalary,ActorGroup,SMScount,Status,CanUpdatePlan,LeaveDate)
			Values(new.ProjectID,new.ProjectName,new.PMCode,new.PMName,chrPMDepartCode,chrPMDepartName,'Project manager',now(),'Manage Projects',0,'',0,'Plan','YES',new.EndDate);

			select DepartCode into chrCreatorDepartCode from T_ProjectMember where UserCode = new.UserCode ;
			select DepartName into chrCreatorDepartName from T_Department where DepartCode = chrCreatorDepartCode;

			insert into T_RelatedUser(ProjectID,ProjectName,UserCode,UserName,DepartCode,DepartName,Actor,JoinDate,WorkDetail,UnitHourSalary,ActorGroup,SMScount,Status,CanUpdatePlan,LeaveDate)
			Values(new.ProjectID,new.ProjectName,new.UserCode,new.UserName,chrCreatorDepartCode,chrCreatorDepartName,'Project Initiator',now(),'Establish projects',0,'',0,'Plan','YES',new.EndDate);
			end if;

			return new;
			end
			$BODY$;

			ALTER FUNCTION public."Func_tg_insert_RelatedUser"()
			OWNER TO postgres;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3622</ID>
    <SQLText>ALTER TABLE public.sms_send ALTER COLUMN msg TYPE VARCHAR(1000);</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3623</ID>
    <SQLText>ALTER TABLE public.sms_accept ALTER COLUMN msg TYPE VARCHAR(1000);</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3624</ID>
    <SQLText>
			--T_ProjectStatus,T_TaskStatus,T_ReqStatus,T_PlanStatus,T_WLStatus,T_TestStatus,T_OtherStatus
			Update T_ProjectStatus Set HomeName= Status Where LangCode = 'en';
			Update T_TaskStatus Set HomeName= Status Where LangCode = 'en';
			Update T_ReqStatus Set HomeName= Status Where LangCode = 'en';
			Update T_DefectStatus Set HomeName= Status Where LangCode = 'en';

			Update T_WLStatus Set HomeName= Status Where LangCode = 'en';
			Update T_PlanStatus Set HomeName= Status Where LangCode = 'en';
			Update T_TestStatus Set HomeName= Status Where LangCode = 'en';
			Update T_OtherStatus Set HomeName= Status Where LangCode = 'en';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3625</ID>
    <SQLText>

			CREATE INDEX idx_module_level ON T_ProModuleLevel (ModuleName, ModuleType, UserType, Visible, IsDeleted, LangCode);
			CREATE INDEX idx_module ON T_ProModule (ModuleName, ModuleType, UserType, Visible, UserCode);
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3626</ID>
    <SQLText>

			Update T_ProModuleLevel Set PageName = 'Outer/TTDatabaseUpgrade.aspx' Where ModuleName = 'DatabaseUpgradeMaintenance';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3627</ID>
    <SQLText>Update T_ProModuleLevel Set PageName = 'TTDatabaseUpgrade.aspx' Where ModuleName = 'DatabaseUpgradeMaintenance';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3628</ID>
    <SQLText>
			Update T_NewsType Set SortNumber = 1 Where Type = '驾驶舱';
			Update T_NewsType Set SortNumber = 2 Where Type = '操作导航';
			Update T_NewsType Set SortNumber = 3 Where Type = '头条新闻';
			Update T_NewsType Set SortNumber = 4 Where Type = '公司动态';
			Update T_NewsType Set SortNumber = 5 Where Type = '综合信息';
			Update T_NewsType Set SortNumber = 6 Where Type = '公告通知';
			Update T_NewsType Set SortNumber = 7 Where Type = '项目地图';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3629</ID>
    <SQLText>
			Update T_ProModuleLevel Set ModuleName = 'OperateNavigation' Where ModuleName = '操作导航';
			Update T_ProModule Set ModuleName = 'OperateNavigation' Where ModuleName = '操作导航';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3630</ID>
    <SQLText>
			Insert Into T_ProModuleLevel(ModuleName,HomeModuleName,ParentModule,PageName,ModuleType,UserType,LangCode,IconURL,ModuleDefinition,DiyFlow,UpdateMark,SortNumber,IsDeleted,Visible)
			Select 'OperateNavigation','OperateNavigation','','','SYSTEM','INNER',LangCode,'ImagesSkin/OperateGuide.png','','YES',0,0,'NO','YES' From t_systemlanguage
			Where LangCode &lt;&gt; 'zh-CN';

			Insert Into T_ProModuleLevel(ModuleName,HomeModuleName,ParentModule,PageName,ModuleType,UserType,LangCode,IconURL,ModuleDefinition,DiyFlow,UpdateMark,SortNumber,IsDeleted,Visible)
			Select 'OperateNavigation','OperateNavigation','','','SYSTEM','OUTER',LangCode,'ImagesSkin/OperateGuide.png','','YES',0,0,'NO','YES' From t_systemlanguage
			Where LangCode &lt;&gt; 'zh-CN';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3631</ID>
    <SQLText>
			Update public.t_funinfordialbox Set InforName = 'DefectToBeHandled' Where InforName = '待处理的缺陷';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3632</ID>
    <SQLText>
			UPDATE t_funinfordialbox SET sqlcode = REPLACE(REPLACE(REPLACE(sqlcode, '处理中', 'InProgress'), '计划', 'Plan'), '待处理', 'ToHandle');
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3633</ID>
    <SQLText>
			UPDATE t_funinfordialbox SET sqlcode = REPLACE(REPLACE(REPLACE(sqlcode, '处理中', 'InProgress'), '计划', 'Plan'), '待处理', 'ToHandle');
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3634</ID>
    <SQLText>UPDATE t_funinfordialbox SET sqlcode = REPLACE(REPLACE(REPLACE(sqlcode, '处理中', 'InProgress'), '计划', 'Plan'), '待处理', 'ToHandle');</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3635</ID>
    <SQLText>
			CREATE TABLE IF NOT EXISTS public.t_OtherCodeRunMark
			(

			RunMark bigint DEFAULT 0
			)

			TABLESPACE pg_default;

			ALTER TABLE IF EXISTS public.t_OtherCodeRunMark
			OWNER to postgres;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3636</ID>
    <SQLText>Insert Into t_OtherCodeRunMark(RunMark) values(0);</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3637</ID>
    <SQLText>
			Update public.t_systemanalystchartrelateduser Set SortNumber = 1
			Where ChartName in (Select ChartName From public.t_systemanalystchartmanagement Where ChartType Like 'H%' );

			Update public.t_systemanalystchartrelateduser Set SortNumber = 13
			Where ChartName in (Select ChartName From public.t_systemanalystchartmanagement Where ChartType Not Like 'H%' );
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3638</ID>
    <SQLText>
			ALTER TABLE t_othercoderunmark
			RENAME COLUMN runmark TO NormalCodeRunmark;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3639</ID>
    <SQLText>
			ALTER TABLE t_othercoderunmark
			ADD COLUMN  ImportantCodeRunMark int default 0;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3640</ID>
    <SQLText>Update t_othercoderunmark Set ImportantCodeRunMark = 0</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3641</ID>
    <SQLText>
			ALTER TABLE t_othercoderunmark
			RENAME COLUMN ImportantCodeRunMark TO UpdateColumnValueCodeRunmark;

			ALTER TABLE t_othercoderunmark
			ADD COLUMN  UpdateModuleNameCodeRunMark int default 0;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3642</ID>
    <SQLText>
			Update t_othercoderunmark Set UpdateColumnValueCodeRunmark = 0;
			Update t_othercoderunmark Set UpdateModuleNameCodeRunMark = 0
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3643</ID>
    <SQLText>
			DO $$
			DECLARE
			table_name TEXT;
			column_name TEXT;
			BEGIN
			FOR table_name, column_name IN
			SELECT c.table_name, c.column_name
			FROM information_schema.columns c
			JOIN information_schema.tables t
			ON c.table_schema = t.table_schema
			AND c.table_name = t.table_name
			WHERE c.column_name LIKE '%status%'
			AND c.table_schema = 'public'
			AND t.table_type = 'BASE TABLE'
			AND c.table_name NOT IN ('pbcatvld', 'pbcatedt','t_memberlevel','t_triggertabletofrom','t_sendtask','t_sentrecord') AND C.column_name not like '%id%'
			LOOP
			BEGIN
			-- 尝试修改字段类型
			EXECUTE format('ALTER TABLE %I ALTER COLUMN %I TYPE VARCHAR(200);', table_name, column_name);
			--RAISE NOTICE 'Changed column % in table % to VARCHAR(200)', column_name, table_name;
			EXCEPTION
			WHEN others THEN
			-- 捕获异常并跳过被视图依赖的字段
			RAISE NOTICE 'Skipped column % in table % due to dependency on a view or rule', column_name, table_name;
			END;
			END LOOP;
			END $$;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3644</ID>
    <SQLText>ALTER TABLE t_memberlevel ALTER COLUMN agencystatus SET data TYPE char(100) USING agencystatus::int;</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3645</ID>
    <SQLText>
			-- 先更新数据，移除非数字字符
			UPDATE t_memberlevel
			SET agencystatus = regexp_replace(agencystatus, '[^0-9]', '', 'g')
			WHERE agencystatus ~ '[^0-9]';

			-- 然后更改列类型
			ALTER TABLE t_memberlevel
			ALTER COLUMN agencystatus TYPE int USING agencystatus::int;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3646</ID>
    <SQLText>DROP VIEW public.v_projectmember_workloadschedule;</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3647</ID>
    <SQLText>
			CREATE OR REPLACE VIEW public.v_projectmember_workload
			AS
			SELECT '项目'::text AS type,
			t_project.pmcode AS usercode,
			t_project.pmname AS username,
			t_project.projectid::character varying(30) AS projectid,
			t_project.projectname,
			t_project.begindate,
			t_project.enddate,
			t_project.status
			FROM t_project
			WHERE t_project.status &lt;&gt; ALL (ARRAY['关闭'::bpchar, '完成'::bpchar, '结案'::bpchar, '取消'::bpchar, '删除'::bpchar, '归档'::bpchar, '拒绝'::bpchar, '挂起'::bpchar])
			UNION
			SELECT '项目'::text AS type,
			a.usercode,
			a.username,
			a.projectid::character varying(30) AS projectid,
			a.projectname,
			b.begindate,
			b.enddate,
			b.status
			FROM t_relateduser a,
			t_project b
			WHERE a.projectid = b.projectid AND (a.projectid IN ( SELECT t_project.projectid
			FROM t_project
			WHERE t_project.status &lt;&gt; ALL (ARRAY['关闭'::bpchar, '完成'::bpchar, '结案'::bpchar, '取消'::bpchar, '删除'::bpchar, '归档'::bpchar, '拒绝'::bpchar, '挂起'::bpchar]))) AND (a.projectname::bpchar IN ( SELECT t_project.projectname
			FROM t_project
			WHERE t_project.status &lt;&gt; ALL (ARRAY['关闭'::bpchar, '完成'::bpchar, '结案'::bpchar, '取消'::bpchar, '删除'::bpchar, '归档'::bpchar, '拒绝'::bpchar, '挂起'::bpchar])))
			UNION
			SELECT '计划'::text AS type,
			a.usercode,
			a.username,
			(('Project:'::text || b.projectid::character varying(30)::text) || ' Plan:'::text) || b.id::character varying(30)::text AS projectid,
			b.name AS projectname,
			b.start_date AS begindate,
			b.end_date AS enddate,
			b.status
			FROM t_planmember a,
			t_impleplan b
			WHERE a.planid = b.id AND b.type = '在用'::bpchar

			UNION
			SELECT '任务'::text AS type,
			a.operatorcode AS usercode,
			a.operatorname AS username,
			(('Project:'::text || b.projectid::character varying(30)::text) || ' Task:'::text) || a.taskid::character varying(30)::text AS projectid,
			a.task AS projectname,
			a.begindate,
			a.enddate,
			b.status
			FROM t_taskassignrecord a,
			t_projecttask b
			WHERE a.taskid = b.taskid
			UNION
			SELECT '需求'::text AS type,
			t_reqassignrecord.operatorcode AS usercode,
			t_reqassignrecord.operatorname AS username,
			t_reqassignrecord.reqid::character varying(30) AS projectid,
			t_reqassignrecord.reqname AS projectname,
			t_reqassignrecord.begindate,
			t_reqassignrecord.enddate,
			t_reqassignrecord.status
			FROM t_reqassignrecord
			UNION
			SELECT '会议'::text AS type,
			a.usercode,
			a.username,
			a.meetingid::character varying(30) AS projectid,
			b.name AS projectname,
			b.begintime AS begindate,
			b.endtime AS enddate,
			b.status
			FROM t_meetingattendant a,
			t_meeting b
			WHERE a.meetingid = b.id;

			ALTER TABLE public.v_projectmember_workload
			OWNER TO postgres;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3648</ID>
    <SQLText>ALTER TABLE t_plan ALTER COLUMN status SET data TYPE char(100) USING status::char(100);</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3649</ID>
    <SQLText>ALTER TABLE t_plan ALTER COLUMN status SET data TYPE bpchar(100) USING status::bpchar(100)</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3650</ID>
    <SQLText>
			-- View: public.v_projectmember_workload

			-- DROP VIEW public.v_projectmember_workload;

			CREATE OR REPLACE VIEW public.v_projectmember_workload
			AS
			SELECT '项目'::text AS type,
			t_project.pmcode AS usercode,
			t_project.pmname AS username,
			t_project.projectid::character varying(30) AS projectid,
			t_project.projectname,
			t_project.begindate,
			t_project.enddate,
			t_project.status
			FROM t_project
			WHERE t_project.status &lt;&gt; ALL (ARRAY['关闭'::bpchar, '完成'::bpchar, '结案'::bpchar, '取消'::bpchar, '删除'::bpchar, '归档'::bpchar, '拒绝'::bpchar, '挂起'::bpchar])
			UNION
			SELECT '项目'::text AS type,
			a.usercode,
			a.username,
			a.projectid::character varying(30) AS projectid,
			a.projectname,
			b.begindate,
			b.enddate,
			b.status
			FROM t_relateduser a,
			t_project b
			WHERE a.projectid = b.projectid AND (a.projectid IN ( SELECT t_project.projectid
			FROM t_project
			WHERE t_project.status &lt;&gt; ALL (ARRAY['关闭'::bpchar, '完成'::bpchar, '结案'::bpchar, '取消'::bpchar, '删除'::bpchar, '归档'::bpchar, '拒绝'::bpchar, '挂起'::bpchar]))) AND (a.projectname::bpchar IN ( SELECT t_project.projectname
			FROM t_project
			WHERE t_project.status &lt;&gt; ALL (ARRAY['关闭'::bpchar, '完成'::bpchar, '结案'::bpchar, '取消'::bpchar, '删除'::bpchar, '归档'::bpchar, '拒绝'::bpchar, '挂起'::bpchar])))
			UNION
			SELECT '计划'::text AS type,
			a.usercode,
			a.username,
			(('Project:'::text || b.projectid::character varying(30)::text) || ' Plan:'::text) || b.id::character varying(30)::text AS projectid,
			b.name AS projectname,
			b.start_date AS begindate,
			b.end_date AS enddate,
			b.status
			FROM t_planmember a,
			t_impleplan b
			WHERE a.planid = b.id AND b.type = '在用'::bpchar
			-- UNION
			--  SELECT '计划'::text AS type,
			--     t_plan.usercode,
			--     t_plan.username,
			--     t_plan.planid::character varying(30) AS projectid,
			--     t_plan.planname AS projectname,
			--     t_plan.starttime AS begindate,
			--     t_plan.endtime AS enddate,
			--     t_plan.status
			--    FROM t_plan
			UNION
			SELECT '任务'::text AS type,
			a.operatorcode AS usercode,
			a.operatorname AS username,
			(('Project:'::text || b.projectid::character varying(30)::text) || ' Task:'::text) || a.taskid::character varying(30)::text AS projectid,
			a.task AS projectname,
			a.begindate,
			a.enddate,
			b.status
			FROM t_taskassignrecord a,
			t_projecttask b
			WHERE a.taskid = b.taskid
			UNION
			SELECT '需求'::text AS type,
			t_reqassignrecord.operatorcode AS usercode,
			t_reqassignrecord.operatorname AS username,
			t_reqassignrecord.reqid::character varying(30) AS projectid,
			t_reqassignrecord.reqname AS projectname,
			t_reqassignrecord.begindate,
			t_reqassignrecord.enddate,
			t_reqassignrecord.status
			FROM t_reqassignrecord
			UNION
			SELECT '会议'::text AS type,
			a.usercode,
			a.username,
			a.meetingid::character varying(30) AS projectid,
			b.name AS projectname,
			b.begintime AS begindate,
			b.endtime AS enddate,
			b.status
			FROM t_meetingattendant a,
			t_meeting b
			WHERE a.meetingid = b.id;

			ALTER TABLE public.v_projectmember_workload
			OWNER TO postgres;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3651</ID>
    <SQLText>
			CREATE OR REPLACE VIEW public.v_projectmember_workloadschedule
			AS
			SELECT '项目'::text AS type,
			t_project.pmcode AS usercode,
			t_project.pmname AS username,
			t_project.projectid::character varying(30) AS projectid,
			t_project.projectname,
			t_project.begindate,
			t_project.enddate,
			t_project.status
			FROM t_project
			WHERE t_project.status &lt;&gt; ALL (ARRAY['关闭'::bpchar, '完成'::bpchar, '结案'::bpchar, '取消'::bpchar, '删除'::bpchar, '归档'::bpchar, '拒绝'::bpchar, '挂起'::bpchar])
			UNION
			SELECT '项目'::text AS type,
			a.usercode,
			a.username,
			a.projectid::character varying(30) AS projectid,
			a.projectname,
			b.begindate,
			b.enddate,
			b.status
			FROM t_relateduser a,
			t_project b
			WHERE a.projectid = b.projectid AND (a.projectid IN ( SELECT t_project.projectid
			FROM t_project
			WHERE t_project.status &lt;&gt; ALL (ARRAY['关闭'::bpchar, '完成'::bpchar, '结案'::bpchar, '取消'::bpchar, '删除'::bpchar, '归档'::bpchar, '拒绝'::bpchar, '挂起'::bpchar]))) AND (a.projectname::bpchar IN ( SELECT t_project.projectname
			FROM t_project
			WHERE t_project.status &lt;&gt; ALL (ARRAY['关闭'::bpchar, '完成'::bpchar, '结案'::bpchar, '取消'::bpchar, '删除'::bpchar, '归档'::bpchar, '拒绝'::bpchar, '挂起'::bpchar])))
			UNION
			SELECT '计划'::text AS type,
			a.usercode,
			a.username,
			b.id::character varying(30) AS projectid,
			b.name AS projectname,
			b.start_date AS begindate,
			b.end_date AS enddate,
			b.status
			FROM t_planmember a,
			t_impleplan b
			WHERE a.planid = b.id AND b.type = '在用'::bpchar
			UNION
			SELECT '计划'::text AS type,
			t_plan.usercode,
			t_plan.username,
			t_plan.planid::character varying(30) AS projectid,
			t_plan.planname AS projectname,
			t_plan.starttime AS begindate,
			t_plan.endtime AS enddate,
			t_plan.status
			FROM t_plan
			UNION
			SELECT '任务'::text AS type,
			a.operatorcode AS usercode,
			a.operatorname AS username,
			a.taskid::character varying(30) AS projectid,
			a.task AS projectname,
			a.begindate,
			a.enddate,
			b.status
			FROM t_taskassignrecord a,
			t_projecttask b
			WHERE a.taskid = b.taskid
			UNION
			SELECT '需求'::text AS type,
			t_reqassignrecord.operatorcode AS usercode,
			t_reqassignrecord.operatorname AS username,
			t_reqassignrecord.reqid::character varying(30) AS projectid,
			t_reqassignrecord.reqname AS projectname,
			t_reqassignrecord.begindate,
			t_reqassignrecord.enddate,
			t_reqassignrecord.status
			FROM t_reqassignrecord
			UNION
			SELECT '会议'::text AS type,
			a.usercode,
			a.username,
			a.meetingid::character varying(30) AS projectid,
			b.name AS projectname,
			b.begintime AS begindate,
			b.endtime AS enddate,
			b.status
			FROM t_meetingattendant a,
			t_meeting b
			WHERE a.meetingid = b.id;

			ALTER TABLE public.v_projectmember_workloadschedule
			OWNER TO postgres;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3652</ID>
    <SQLText>ALTER TABLE public.t_bmsupplierlink ALTER COLUMN gender SET data TYPE char(100) USING gender::char(10)</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3653</ID>
    <SQLText>
			DO $$
			DECLARE
			tbl_name TEXT;
			col_name TEXT;
			v_name TEXT;  -- 修改循环变量名
			v_def TEXT;   -- 修改循环变量名
			BEGIN
			-- 创建临时表存储视图信息
			CREATE TEMP TABLE IF NOT EXISTS dropped_views (
			view_name TEXT PRIMARY KEY,
			view_definition TEXT  -- 修改列名
			) ON COMMIT DROP;

			-- 遍历需要修改的列
			FOR tbl_name, col_name IN
			SELECT c.table_name, c.column_name
			FROM information_schema.columns c
			JOIN information_schema.tables t
			ON c.table_schema = t.table_schema AND c.table_name = t.table_name
			WHERE c.column_name LIKE '%status%'
			AND c.table_schema = 'public'
			AND t.table_type = 'BASE TABLE'
			AND c.table_name NOT IN ('pbcatvld', 'pbcatedt','t_memberlevel','t_triggertabletofrom','t_sendtask','t_sentrecord')
			AND c.column_name NOT LIKE '%id%'
			LOOP
			-- 收集并删除依赖视图
			FOR v_name, v_def IN
			SELECT dep_view.relname, pg_get_viewdef(dep_view.oid)
			FROM pg_depend
			JOIN pg_rewrite ON pg_depend.objid = pg_rewrite.oid
			JOIN pg_class dep_view ON pg_rewrite.ev_class = dep_view.oid
			JOIN pg_class src_table ON pg_depend.refobjid = src_table.oid
			JOIN pg_attribute ON pg_depend.refobjid = pg_attribute.attrelid
			AND pg_depend.refobjsubid = pg_attribute.attnum
			WHERE src_table.relname = tbl_name
			AND pg_attribute.attname = col_name
			AND dep_view.relnamespace = 'public'::regnamespace
			AND dep_view.relkind = 'v'
			LOOP
			INSERT INTO dropped_views (view_name, view_definition)  -- 使用修改后的列名
			VALUES (v_name, v_def)
			ON CONFLICT (view_name) DO NOTHING;

			EXECUTE format('DROP VIEW IF EXISTS %I CASCADE', v_name);
			END LOOP;

			-- 修改字段类型
			BEGIN
			EXECUTE format('ALTER TABLE %I ALTER COLUMN %I TYPE VARCHAR(200)', tbl_name, col_name);
			EXCEPTION
			WHEN others THEN
			RAISE NOTICE '修改列 %.% 失败: %', tbl_name, col_name, SQLERRM;
			END;
			END LOOP;

			-- 重新创建所有视图
			FOR v_name, v_def IN
			SELECT view_name, view_definition FROM dropped_views  -- 使用修改后的列名
			LOOP
			BEGIN
			EXECUTE format('CREATE VIEW %I AS %s', v_name, v_def);
			EXCEPTION
			WHEN others THEN
			RAISE NOTICE '重建视图 % 失败: %', v_name, SQLERRM;
			END;
			END LOOP;
			END $$;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3654</ID>
    <SQLText>
			DO $$
			DECLARE
			tbl_name TEXT;
			col_name TEXT;
			v_name TEXT;  -- 修改循环变量名
			v_def TEXT;   -- 修改循环变量名
			BEGIN
			-- 创建临时表存储视图信息
			CREATE TEMP TABLE IF NOT EXISTS dropped_views (
			view_name TEXT PRIMARY KEY,
			view_definition TEXT  -- 修改列名
			) ON COMMIT DROP;

			-- 遍历需要修改的列
			FOR tbl_name, col_name IN
			SELECT c.table_name, c.column_name
			FROM information_schema.columns c
			JOIN information_schema.tables t
			ON c.table_schema = t.table_schema AND c.table_name = t.table_name
			WHERE c.column_name LIKE '%type%'
			AND c.table_schema = 'public'
			AND t.table_type = 'BASE TABLE'
			AND c.table_name NOT IN ('pbcatvld', 'pbcatedt')
			AND c.table_name NOT Like '%rcj%' AND C.column_name not like '%id%' and C.column_name &lt;&gt; 'warrantyperiod'
			LOOP
			-- 收集并删除依赖视图
			FOR v_name, v_def IN
			SELECT dep_view.relname, pg_get_viewdef(dep_view.oid)
			FROM pg_depend
			JOIN pg_rewrite ON pg_depend.objid = pg_rewrite.oid
			JOIN pg_class dep_view ON pg_rewrite.ev_class = dep_view.oid
			JOIN pg_class src_table ON pg_depend.refobjid = src_table.oid
			JOIN pg_attribute ON pg_depend.refobjid = pg_attribute.attrelid
			AND pg_depend.refobjsubid = pg_attribute.attnum
			WHERE src_table.relname = tbl_name
			AND pg_attribute.attname = col_name
			AND dep_view.relnamespace = 'public'::regnamespace
			AND dep_view.relkind = 'v'
			LOOP
			INSERT INTO dropped_views (view_name, view_definition)  -- 使用修改后的列名
			VALUES (v_name, v_def)
			ON CONFLICT (view_name) DO NOTHING;

			EXECUTE format('DROP VIEW IF EXISTS %I CASCADE', v_name);
			END LOOP;

			-- 修改字段类型
			BEGIN
			EXECUTE format('ALTER TABLE %I ALTER COLUMN %I TYPE VARCHAR(200)', tbl_name, col_name);
			EXCEPTION
			WHEN others THEN
			RAISE NOTICE '修改列 %.% 失败: %', tbl_name, col_name, SQLERRM;
			END;
			END LOOP;

			-- 重新创建所有视图
			FOR v_name, v_def IN
			SELECT view_name, view_definition FROM dropped_views  -- 使用修改后的列名
			LOOP
			BEGIN
			EXECUTE format('CREATE VIEW %I AS %s', v_name, v_def);
			EXCEPTION
			WHEN others THEN
			RAISE NOTICE '重建视图 % 失败: %', v_name, SQLERRM;
			END;
			END LOOP;
			END $$;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3655</ID>
    <SQLText>Delete from  t_funinfordialbox Where inforname = '待处理的缺陷'</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3656</ID>
    <SQLText>
			-- FUNCTION: public.Func_TG_InsertWLStepDetail()

			-- DROP FUNCTION IF EXISTS public."Func_TG_InsertWLStepDetail"();

			CREATE OR REPLACE FUNCTION public."Func_TG_InsertWLStepDetail"()
			RETURNS trigger
			LANGUAGE 'plpgsql'
			COST 100
			VOLATILE NOT LEAKPROOF
			AS $BODY$

			declare intStepID bigint;
			declare intSortNumber bigint;
			declare intWLID bigint;
			declare chrTemName varchar(50);
			declare chrCreatorCode varchar(20);
			declare chrCreatorName varchar(20);
			declare chrCreatorDepartCode varchar(20);
			declare chrDepartRelated char(10);
			declare intDepartRelatedLevelNumber bigint;
			declare chrPartTimeReview char(10);
			declare chrSMSSend varchar(1000);
			declare chrMailSend varchar(1000);
			declare chrOperatorSelect char(10);
			declare chrPriorOperatorSelect char(10);
			declare chrIsSelect char(10);
			declare chrProjectRelated char(10);
			declare intProjectID bigint;

			declare chrRelatedType char(20);
			declare intRelatedID bigint;

			declare chrSelfReview char(10);

			declare chrAdminEMail varchar(200);
			declare intFolderID bigint;

			Begin

			select  EMail into chrAdminEMail From T_ProjectMember Where UserCode = 'ADMIN';
			select FolderID into intFolderID From T_MailFolder Where OwnerCode = 'ADMIN' and KeyWord = 'Waiting';

			select StepID,SortNumber,WLID,rtrim(DepartRelated) into intStepID,intSortNumber,intWLID,chrDepartRelated  from T_WorkFlowStep Where StepID = new.StepID;

			select CreatorCode,CreatorName,RelatedType,RelatedID into chrCreatorCode,chrCreatorName,chrRelatedType,intRelatedID from T_WorkFlow where WLID = new.WLID;

			select rtrim(DepartCode) into chrCreatorDepartCode  from T_ProjectMember where UserCode = chrCreatorCode;

			select TemName into chrTemName from T_WorkFlow where WLID = intWLID;

			--select @chrSMSSend = rtrim(ltrim(ReceiveSMS)) from T_WorkFlow where WLID = @intWLID

			select rtrim(SelfReview) into chrSelfReview from T_WorkFlowTStep where SortNumber = intSortNumber and TemName = chrTemName;
			select rtrim(OperatorSelect) into chrOperatorSelect  from T_WorkFlowTStep where SortNumber = @intSortNumber and TemName = chrTemName;
			select rtrim(IsPriorStepSelect) into chrPriorOperatorSelect from T_WorkFlowTStep where SortNumber = intSortNumber and TemName = chrTemName;

			select rtrim(PartTimeReview) into chrPartTimeReview  from T_WorkFlowTStep where SortNumber = intSortNumber and TemName = chrTemName;
			select rtrim(ProjectRelated) into chrProjectRelated from T_WorkFlowTStep where SortNumber = intSortNumber and TemName = chrTemName;
			select DepartRelatedLevelNumber into intDepartRelatedLevelNumber  from T_WorkFlowTStep where SortNumber = intSortNumber and TemName = chrTemName;

			select rtrim(SendSMS) into chrSMSSend  from T_WorkFlowTStep where SortNumber = intSortNumber and TemName = chrTemName;
			select rtrim(SendEMail) into chrMailSend  from T_WorkFlowTStep where SortNumber = intSortNumber and TemName = chrTemName;
			select '"ADMIN"' || '&amp;amp;amp;lt;' || chrMailSend || '&amp;amp;amp;gt;' into chrMailSend;

			----------以下中文短语和语句都不能改，信息发送时要进行其它语言的替换，以实现多语言功能，改了就可能替换不了---------

			--如果此步骤项目相关，则取得相关的项目号-------------------------------------------
			if(chrProjectRelated = 'YES')  Then

			if(chrRelatedType = 'Project')   Then

			select   intRelatedID into intProjectID ;

			End If;

			if(chrRelatedType = 'Requirement')   Then

			Select ProjectID into intProjectID  From T_RelatedReq Where ReqID = intRelatedID;

			End If;

			if(chrRelatedType = 'Defect')   Then

			Select ProjectID into intProjectID  From T_RelatedDefect Where DefectID = intRelatedID;

			End If;

			if(chrRelatedType = 'Plan')  Then

			Select iProjectID into intProjectID From T_ImplePlan Where ID = intRelatedID;

			End If;

			if(chrRelatedType = 'Task')   Then

			Select ProjectID into intProjectID From T_ProjectTask Where TaskID = intRelatedID;

			End If;

			if(chrRelatedType = 'Risk')  Then

			Select ProjectID into intProjectID From T_ProjectRisk Where ID = intRelatedID;

			End If;

			End If;

			--如果申请者或前步审批者自选下一步审批者
			If(chrOperatorSelect = 'YES' or chrPriorOperatorSelect = 'YES')
			Then
			select  'NO' into chrIsSelect ;

			Else

			select  'YES' into chrIsSelect ;

			End If;

			if(chrSelfReview = 'YES')
			Then

			insert into T_WorkFlowStepDetail(StepID,WLID,OperatorCode,OperatorName,Actor,WorkDetail,FinishedTime,Requisite,FieldList,AllowFullEdit,EditFieldList,CanNotNullFieldList,SignPictureField,IsOperator,ManHour,Expense,Status)
			select intStepID,intWLID,chrCreatorCode,chrCreatorName,'Organizer','Self-Review by Initiator',1,'YES',A.FieldList,A.AllowFullEdit,A.EditFieldList,A.CanNotNullFieldList,A.SignPictureField, chrIsSelect,0,0,'InProgress'
			from T_WorkFlowTStepOperator A,T_WorkFlowTStep B
			where A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber;

			raise notice '1';

			If(chrSMSSend = 'YES' )
			Then

			insert into Sms_Send(UserCode,Mobile,Msg,UserRTXCode)
			SELECT chrCreatorCode,MobilePhone,'Notice:Hello, you have a new task assigned to you. The task content is: Self-Review.',coalesce(UserRTXCode,'')
			from T_ProjectMember
			where UserCode = chrCreatorCode;
			End If;

			If(chrMailSend = 'YES' )
			Then
			insert into T_Mail(Title,Body,FromAddress,ToAddress,CCAddress,HTMLFormat,SenderDate,contain,AttachmentFlag,ReaderFlag,FolderID,UserCode)
			select 'Review Notice','Notice:Hello, you have a new task assigned to you. The task content is: Self-Review.',
			chrAdminEMail,EMail,'',1,getdate(),100,0,0,intFolderID,'ADMIN'
			from T_ProjectMember
			where UserCode = chrCreatorCode;
			End If;

			Else

			If(chrDepartRelated = 'NO' )
			Then

			if(chrProjectRelated = 'NO')
			Then
			insert into T_WorkFlowStepDetail(StepID,WLID,OperatorCode,OperatorName,Actor,WorkDetail,FinishedTime,Requisite,FieldList,AllowFullEdit,EditFieldList,CanNotNullFieldList,SignPictureField, IsOperator,ManHour,Expense,Status)
			select intStepID,intWLID,C.UserCode,C.UserName,A.Actor,A.WorkDetail,A.LimitedTime,A.Requisite,A.FieldList,A.AllowFullEdit,A.EditFieldList,A.CanNotNullFieldList,A.SignPictureField,chrIsSelect,0,0,'InProgress'
			from T_ActorGroupDetail C,T_WorkFlowTStepOperator A,T_WorkFlowTStep B
			where C.GroupName = A.ActorGroup and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber;

			raise notice '2';

			If(chrSMSSend = 'YES' and chrOperatorSelect = 'NO')
			Then
			insert into Sms_Send(UserCode,Mobile,Msg,UserRTXCode)
			SELECT D.UserCode, D.MobilePhone,'Notice: Hello, you have a task, content: ' || A.WorkDetail || '，Please log in to the management platform and open the Workflow Module to process it as soon as possible. This message is from the System Administrator!',coalesce(D.UserRTXCode,'')
			from T_ActorGroupDetail C,T_WorkFlowTStepOperator A,T_WorkFlowTStep B,T_ProjectMember D
			where C.GroupName = A.ActorGroup and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and C.UserCode = D.UserCode;
			End If;

			If(chrMailSend = 'YES' and chrOperatorSelect = 'NO')
			Then
			insert into T_Mail(Title,Body,FromAddress,ToAddress,CCAddress,HTMLFormat,SenderDate,contain,AttachmentFlag,ReaderFlag,FolderID,UserCode)
			select 'Review Notice','Notice: Hello, you have a task, content: ' || A.WorkDetail || '，Please log in to the management platform and open the Workflow Module to process it as soon as possible. This message is from the System Administrator!',
			chrAdminEMail,D.EMail,'',1,getdate(),100,0,0,intFolderID,'ADMIN'
			from T_ActorGroupDetail C,T_WorkFlowTStepOperator A,T_WorkFlowTStep B,T_ProjectMember D
			where C.GroupName = A.ActorGroup and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and C.UserCode = D.UserCode;
			End If;

			Else

			insert into T_WorkFlowStepDetail(StepID,WLID,OperatorCode,OperatorName,Actor,WorkDetail,FinishedTime,Requisite,FieldList,AllowFullEdit,EditFieldList,CanNotNullFieldList,SignPictureField,IsOperator,ManHour,Expense,Status)
			select intStepID,intWLID,C.UserCode,C.UserName,A.Actor,A.WorkDetail,A.LimitedTime,A.Requisite,A.FieldList,A.AllowFullEdit,A.EditFieldList,A.CanNotNullFieldList,A.SignPictureField, chrIsSelect,0,0,'InProgress'
			from T_ActorGroupDetail C,T_RelatedUser D, T_WorkFlowTStepOperator A,T_WorkFlowTStep B
			where C.GroupName = A.ActorGroup and C.UserCode = D.UserCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber  and D.ProjectID = intProjectID;

			raise notice '3';

			If(chrSMSSend = 'YES' and chrOperatorSelect = 'NO')
			Then
			insert into Sms_Send(UserCode,Mobile,Msg,UserRTXCode)
			SELECT D.UserCode, D.MobilePhone,'Notice: Hello, you have a task, content: ' || A.WorkDetail || '，Please log in to the management platform and open the Workflow Module to process it as soon as possible. This message is from the System Administrator!',coalesce(D.UserRTXCode,'')
			from T_ActorGroupDetail C,T_RelatedUser E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B,T_ProjectMember D
			where C.GroupName = A.ActorGroup and C.UserCode = E.UserCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and C.UserCode = D.UserCode and E.ProjectID = intRelatedID;
			End If;

			If(chrMailSend = 'YES' and chrOperatorSelect = 'NO')
			Then
			insert into T_Mail(Title,Body,FromAddress,ToAddress,CCAddress,HTMLFormat,SenderDate,contain,AttachmentFlag,ReaderFlag,FolderID,UserCode)
			select 'Review Notice','Notice: Hello, you have a task, content:： ' || A.WorkDetail || '，Please log in to the management platform and open the Workflow Module to process it as soon as possible. This message is from the System Administrator!',
			chrAdminEMail,D.EMail,'',1,getdate(),100,0,0,intFolderID,'ADMIN'
			from T_ActorGroupDetail C,T_RelatedUser E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B,T_ProjectMember D
			where C.GroupName = A.ActorGroup and C.UserCode = E.UserCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and C.UserCode = D.UserCode and E.ProjectID = intRelatedID;
			End If;

			End If;

			Else

			if(chrPartTimeReview = 'YES')
			Then

			if(chrProjectRelated = 'NO')
			Then

			insert into T_WorkFlowStepDetail(StepID,WLID,OperatorCode,OperatorName,WorkDetail,Actor,FinishedTime,Requisite,FieldList,AllowFullEdit,EditFieldList,CanNotNullFieldList,SignPictureField, IsOperator,ManHour,Expense,Status)
			select intStepID,intWLID,C.UserCode,C.UserName,A.WorkDetail,A.Actor,A.LimitedTime,A.Requisite,A.FieldList,A.AllowFullEdit,A.EditFieldList,A.CanNotNullFieldList,A.SignPictureField, chrIsSelect,0,0,'InProgress'
			from T_ActorGroupDetail C,T_ProjectMember D,T_Department E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B
			where C.GroupName = A.ActorGroup and C.UserCode = D.UserCode and D.DepartCode = E.DepartCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and (( D.DepartCode = chrCreatorDepartCode ) or (D.DepartCode in (select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber))
			or ( C.UserCode in ( Select UserCode From T_PartTimeJob Where DepartCode in ( select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber))));

			raise notice '4';

			If(chrSMSSend = 'YES' and chrOperatorSelect = 'NO')
			Then
			insert into Sms_Send(UserCode,Mobile,Msg,UserRTXCode)
			SELECT F.UserCode, F.MobilePhone,'Notice: Hello, you have a task, content: ' || A.WorkDetail || '，Please log in to the management platform and open the Workflow Module to process it as soon as possible. This message is from the System Administrator!',coalesce(F.UserRTXCode,'')
			from T_ActorGroupDetail C,T_ProjectMember D,T_Department E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B,T_ProjectMember F
			where C.GroupName = A.ActorGroup and C.UserCode = D.UserCode and D.DepartCode = E.DepartCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and (( D.DepartCode = chrCreatorDepartCode ) or (D.DepartCode in (select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber))
			or ( C.UserCode in ( Select UserCode From T_PartTimeJob Where DepartCode in ( select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber))))
			and C.UserCode = F.UserCode;

			End If;

			If(chrMailSend = 'YES' and chrOperatorSelect = 'NO')
			Then
			insert into T_Mail(Title,Body,FromAddress,ToAddress,CCAddress,HTMLFormat,SenderDate,contain,AttachmentFlag,ReaderFlag,FolderID,UserCode)
			select 'Review Notice','Notice: Hello, you have a task, content: ' || A.WorkDetail || 'Please log in to the management platform and open the Workflow Module to process it as soon as possible. This message is from the System Administrator!',
			chrAdminEMail,D.EMail,'',1,getdate(),100,0,0,intFolderID,'ADMIN'
			from T_ActorGroupDetail C,T_ProjectMember D,T_Department E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B,T_ProjectMember F
			where C.GroupName = A.ActorGroup and C.UserCode = D.UserCode and D.DepartCode = E.DepartCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and (( D.DepartCode = chrCreatorDepartCode ) or (D.DepartCode in (select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber))
			or ( C.UserCode in ( Select UserCode From T_PartTimeJob Where DepartCode in ( select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber))))
			and C.UserCode = F.UserCode;
			End If;

			Else

			insert into T_WorkFlowStepDetail(StepID,WLID,OperatorCode,OperatorName,WorkDetail,Actor,FinishedTime,Requisite,FieldList,AllowFullEdit,EditFieldList,CanNotNullFieldList,SignPictureField, IsOperator,ManHour,Expense,Status)
			select intStepID,intWLID,C.UserCode,C.UserName,A.WorkDetail,A.Actor,A.LimitedTime,A.Requisite,A.FieldList,A.AllowFullEdit,A.EditFieldList,A.CanNotNullFieldList,A.SignPictureField, chrIsSelect,0,0,'InProgress'
			from T_ActorGroupDetail C,T_RelatedUser F,T_ProjectMember D,T_Department E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B
			where C.GroupName = A.ActorGroup and C.UserCode = F.UserCode and  C.UserCode = D.UserCode and D.DepartCode = E.DepartCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and F.ProjectID = intProjectID and (( D.DepartCode = chrCreatorDepartCode ) or (D.DepartCode in (select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber))
			or ( C.UserCode in ( Select UserCode From T_PartTimeJob Where DepartCode in ( select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber))));

			raise notice '5';

			If(chrSMSSend = 'YES' and chrOperatorSelect = 'NO')
			Then
			insert into Sms_Send(UserCode,Mobile,Msg,UserRTXCode)
			SELECT F.UserCode, F.MobilePhone,'Notice: Hello, you have a task, content: ' || A.WorkDetail || '，Please log in to the management platform and open the Workflow Module to process it as soon as possible. This message is from the System Administrator!',coalesce(F.UserRTXCode,'')
			from T_ActorGroupDetail C,T_RelatedUser G,T_ProjectMember D,T_Department E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B,T_ProjectMember F
			where C.GroupName = A.ActorGroup and C.UserCode = G.UserCode and C.UserCode = D.UserCode and D.DepartCode = E.DepartCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and G.ProjectID = intRelatedID and (( D.DepartCode = chrCreatorDepartCode ) or (D.DepartCode in (select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber))
			or ( C.UserCode in ( Select UserCode From T_PartTimeJob Where DepartCode in ( select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber))))
			and C.UserCode = F.UserCode;
			End If;

			If(chrMailSend = 'YES' and chrOperatorSelect = 'NO')
			Then
			insert into T_Mail(Title,Body,FromAddress,ToAddress,CCAddress,HTMLFormat,SenderDate,contain,AttachmentFlag,ReaderFlag,FolderID,UserCode)
			select 'Review Notice','Notice: Hello, you have a task, content: ' || A.WorkDetail || '，Please log in to the management platform and open the Workflow Module to process it as soon as possible. This message is from the System Administrator!',
			chrAdminEMail,D.EMail,'',1,getdate(),100,0,0,intFolderID,'ADMIN'
			from T_ActorGroupDetail C,T_RelatedUser G,T_ProjectMember D,T_Department E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B,T_ProjectMember F
			where C.GroupName = A.ActorGroup and C.UserCode = G.UserCode and C.UserCode = D.UserCode and D.DepartCode = E.DepartCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and G.ProjectID = intRelatedID and (( D.DepartCode = chrCreatorDepartCode ) or (D.DepartCode in (select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber))
			or ( C.UserCode in ( Select UserCode From T_PartTimeJob Where DepartCode in ( select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber))))
			and C.UserCode = F.UserCode;
			End If;

			End If;

			Else

			if(chrProjectRelated = 'NO')
			Then

			insert into T_WorkFlowStepDetail(StepID,WLID,OperatorCode,OperatorName,WorkDetail,Actor,FinishedTime,Requisite,FieldList,AllowFullEdit,EditFieldList,CanNotNullFieldList,SignPictureField,IsOperator,ManHour,Expense,Status)
			select intStepID,intWLID,C.UserCode,C.UserName,A.WorkDetail,A.Actor,A.LimitedTime,A.Requisite,A.FieldList,A.AllowFullEdit,A.EditFieldList,A.CanNotNullFieldList,A.SignPictureField,chrIsSelect,0,0,'InProgress'
			from T_ActorGroupDetail C,T_ProjectMember D,T_Department E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B
			where C.GroupName = A.ActorGroup and C.UserCode = D.UserCode and D.DepartCode = E.DepartCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and (( D.DepartCode = chrCreatorDepartCode ) or (D.DepartCode in (select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber)));

			raise notice '6';

			If(chrSMSSend = 'YES' and chrOperatorSelect = 'NO')
			Then
			insert into Sms_Send(UserCode,Mobile,Msg,UserRTXCode)
			SELECT F.UserCode, F.MobilePhone,'Notice: Hello, you have a task, content: ' || A.WorkDetail ||  '，Please log in to the management platform and open the Workflow Module to process it as soon as possible. This message is from the System Administrator!',coalesce(F.UserRTXCode,'')
			from T_ActorGroupDetail C,T_ProjectMember D,T_Department E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B,T_ProjectMember F
			where C.GroupName = A.ActorGroup and C.UserCode = D.UserCode and D.DepartCode = E.DepartCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and (( D.DepartCode = chrCreatorDepartCode ) or (D.DepartCode in (select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber)))
			and C.UserCode = F.UserCode;
			End If;

			If(chrMailSend = 'YES' and chrOperatorSelect = 'NO')
			Then
			insert into T_Mail(Title,Body,FromAddress,ToAddress,CCAddress,HTMLFormat,SenderDate,contain,AttachmentFlag,ReaderFlag,FolderID,UserCode)
			select 'Review Notice','Notice: Hello, you have a task, content: ' || A.WorkDetail || '，Please log in to the management platform and open the Workflow Module to process it as soon as possible. This message is from the System Administrator!',
			chrAdminEMail,D.EMail,'',1,getdate(),100,0,0,intFolderID,'ADMIN'
			from T_ActorGroupDetail C,T_ProjectMember D,T_Department E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B,T_ProjectMember F
			where C.GroupName = A.ActorGroup and C.UserCode = D.UserCode and D.DepartCode = E.DepartCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and (( D.DepartCode = chrCreatorDepartCode ) or (D.DepartCode in (select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber)))
			and C.UserCode = F.UserCode;
			End If;

			Else

			insert into T_WorkFlowStepDetail(StepID,WLID,OperatorCode,OperatorName,WorkDetail,Actor,FinishedTime,Requisite,FieldList,AllowFullEdit,EditFieldList,CanNotNullFieldList,SignPictureField,IsOperator,ManHour,Expense,Status)
			select intStepID,intWLID,C.UserCode,C.UserName,A.WorkDetail,A.Actor,A.LimitedTime,A.Requisite,A.FieldList,A.AllowFullEdit,A.EditFieldList,A.CanNotNullFieldList,A.SignPictureField,chrIsSelect,0,0,'处理中'
			from T_ActorGroupDetail C,T_RelatedUser F,T_ProjectMember D,T_Department E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B
			where C.GroupName = A.ActorGroup and C.UserCode = F.UserCode and C.UserCode = D.UserCode and D.DepartCode = E.DepartCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and F.ProjectID = intProjectID and (( D.DepartCode = chrCreatorDepartCode ) or (D.DepartCode in (select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber)));

			raise notice 'intStepID: %,intWLID: %,chrTemName: %, intSortNumber: %,chrCreatorDepartCode:%,intDepartRelatedLevelNumber:%',cast(intStepID as char(8)),intWLID,chrTemName,intSortNumber,chrCreatorDepartCode,intDepartRelatedLevelNumber;

			If(chrSMSSend = 'YES' and chrOperatorSelect = 'NO')
			Then
			insert into Sms_Send(UserCode,Mobile,Msg,UserRTXCode)
			SELECT F.UserCode, F.MobilePhone,'Notice: Hello, you have a task, content: ' || A.WorkDetail || '，Please log in to the management platform and open the Workflow Module to process it as soon as possible. This message is from the System Administrator!',coalesce(F.UserRTXCode,'')
			from T_ActorGroupDetail C,T_RelatedUser G,T_ProjectMember D,T_Department E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B,T_ProjectMember F
			where C.GroupName = A.ActorGroup and C.UserCode = G.UserCode and C.UserCode = D.UserCode and D.DepartCode = E.DepartCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and (( D.DepartCode = chrCreatorDepartCode ) or (D.DepartCode in (select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber)))
			and C.UserCode = F.UserCode and G.ProjectID = intRelatedID;
			End If;

			If(chrMailSend = 'YES' and chrOperatorSelect = 'NO')
			Then
			insert into T_Mail(Title,Body,FromAddress,ToAddress,CCAddress,HTMLFormat,SenderDate,contain,AttachmentFlag,ReaderFlag,FolderID,UserCode)
			select 'Review Notice','Notice: Hello, you have a task, content: ' || A.WorkDetail || '，Please log in to the management platform and open the Workflow Module to process it as soon as possible. This message is from the System Administrator!',
			chrAdminEMail,D.EMail,'',1,getdate(),100,0,0,intFolderID,'ADMIN'
			from T_ActorGroupDetail C,T_RelatedUser G,T_ProjectMember D,T_Department E,T_WorkFlowTStepOperator A,T_WorkFlowTStep B,T_ProjectMember F
			where C.GroupName = A.ActorGroup and C.UserCode = G.UserCode and C.UserCode = D.UserCode and D.DepartCode = E.DepartCode and A.StepID = B.StepID and A.TemName = chrTemName
			and B.SortNumber = intSortNumber and (( D.DepartCode = chrCreatorDepartCode ) or (D.DepartCode in (select ParentDepartCode from F_GetParentDepartCode(chrCreatorDepartCode) Where Level &lt;= intDepartRelatedLevelNumber)))
			and C.UserCode = F.UserCode and G.ProjectID = intRelatedID;
			End If;
			End If;

			End If;
			End If;

			End If;
			return new;
			end
			$BODY$;

			ALTER FUNCTION public."Func_TG_InsertWLStepDetail"()
			OWNER TO postgres;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3657</ID>
    <SQLText>
			-- View: public.v_projectplanlist

			-- DROP VIEW public.v_projectplanlist;

			CREATE OR REPLACE VIEW public.v_projectplanlist
			AS
			SELECT a.verid,
			a.planid,
			a.parentidgantt,
			a.workid,
			a.plandetail,
			a.type,
			a.begintime,
			a.endtime,
			a.expireday,
			a.leadercode,
			a.leader,
			a.resource,
			a.budget,
			a.makedate,
			a.parentid,
			a.priorid,
			a.defaultschedule,
			a.defaultcost,
			a.percent_done,
			a.expense,
			a.status,
			b.projectid,
			b.projectname,
			b.pmcode,
			b.pmname
			FROM v_projectplanforwanring a,
			t_project b
			WHERE a.projectid = b.projectid AND (a.status &lt;&gt; ALL (ARRAY['Completed'::bpchar, 'Cance'::bpchar])) AND b.projectid &gt; 1 AND b.projectclass &lt;&gt; 'TemplateProject'::bpchar AND (b.status &lt;&gt; ALL (ARRAY['Acceptance'::bpchar, 'CaseClosed'::bpchar, 'Archived'::bpchar, 'Deleted'::bpchar, 'Suspended'::bpchar, 'Cance'::bpchar]));

			ALTER TABLE public.v_projectplanlist
			OWNER TO postgres;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3658</ID>
    <SQLText>
			Update T_ProModuleLevel Set HomeModuleName = '操作導航' Where ModuleName = 'OperateNavigation' and LangCode = 'zh-tw';
			Update T_ProModuleLevel Set HomeModuleName = 'Operación de Navegación' Where ModuleName = 'OperateNavigation' and LangCode = 'es';
			Update T_ProModuleLevel Set HomeModuleName = 'Opération de Navigation' Where ModuleName = 'OperateNavigation' and LangCode = 'fr';
			Update T_ProModuleLevel Set HomeModuleName = 'Betriebsnavigation' Where ModuleName = 'OperateNavigation' and LangCode = 'de';
			Update T_ProModuleLevel Set HomeModuleName = 'Operazione di Navigazione' Where ModuleName = 'OperateNavigation' and LangCode = 'it';
			Update T_ProModuleLevel Set HomeModuleName = '操作ナビゲーション' Where ModuleName = 'OperateNavigation' and LangCode = 'ja';
			Update T_ProModuleLevel Set HomeModuleName = '조작 내비게이션 ' Where ModuleName = 'OperateNavigation' and LangCode = 'ko';
			Update T_ProModuleLevel Set HomeModuleName = 'Operação de Navegação' Where ModuleName = 'OperateNavigation' and LangCode = 'pt';
			Update T_ProModuleLevel Set HomeModuleName = 'Операция навигации' Where ModuleName = 'OperateNavigation' and LangCode = 'ru';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3659</ID>
    <SQLText>
			Update T_Project Set ProjectClass = 'Normal' Where ProjectClass = '常规项目 ';
			Update T_Project Set ProjectClass = 'Template' Where ProjectClass = '模板项目 '
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3660</ID>
    <SQLText>DROP VIEW public.v_projectplanlist;</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3661</ID>
    <SQLText>alter table public.t_project alter column projectclass type char(100);</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3662</ID>
    <SQLText>
			Update T_Project Set ProjectClass = 'NormalProject' Where ProjectClass = 'Normal';
			Update T_Project Set ProjectClass = 'TemplateProject' Where ProjectClass = 'Template'
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3663</ID>
    <SQLText>
			CREATE OR REPLACE VIEW public.v_projectplanlist
			AS
			SELECT a.verid,
			a.planid,
			a.parentidgantt,
			a.workid,
			a.plandetail,
			a.type,
			a.begintime,
			a.endtime,
			a.expireday,
			a.leadercode,
			a.leader,
			a.resource,
			a.budget,
			a.makedate,
			a.parentid,
			a.priorid,
			a.defaultschedule,
			a.defaultcost,
			a.percent_done,
			a.expense,
			a.status,
			b.projectid,
			b.projectname,
			b.pmcode,
			b.pmname
			FROM v_projectplanforwanring a,
			t_project b
			WHERE a.projectid = b.projectid AND (a.status::bpchar &lt;&gt; ALL (ARRAY['Completed'::bpchar, 'Cance'::bpchar])) AND b.projectid &gt; 1 AND b.projectclass &lt;&gt; 'TemplateProject'::bpchar AND (b.status::bpchar &lt;&gt; ALL (ARRAY['Acceptance'::bpchar, 'CaseClosed'::bpchar, 'Archived'::bpchar, 'Deleted'::bpchar, 'Suspended'::bpchar, 'Cance'::bpchar]));

			ALTER TABLE public.v_projectplanlist
			OWNER TO postgres;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3664</ID>
    <SQLText>
			Insert Into public.t_systemanalystchartrelateduser(UserCode,chartName,FormType,SortNumber)
			Select B.UserCode,A.chartName,'PersonalSpacePage',0 From t_systemanalystchartmanagement A,public.t_systemactiveuser B
			Where A.ChartName
			Not In (Select ChartName From t_systemanalystchartrelateduser Where UserCode = B.UserCode and FormType = 'PersonalSpacePage' )
			and A.ChartName in ('在执行项目状态','延误项目状态','年度项目工时状态','在执行任务状态','项目年度回款状态');
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3665</ID>
    <SQLText>
			Update t_systemanalystchartrelateduser Set SortNumber = 1 Where ChartName = '延误项目状态';
			Update t_systemanalystchartrelateduser Set SortNumber = 2 Where ChartName = '年度项目工时状态';
			Update t_systemanalystchartrelateduser Set SortNumber = 3 Where ChartName = '在执行任务状态';
			Update t_systemanalystchartrelateduser Set SortNumber = 4 Where ChartName = '项目年度回款状态';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3666</ID>
    <SQLText>
			-- View: public.v_projectmember_workload

			-- DROP VIEW public.v_projectmember_workload;

			CREATE OR REPLACE VIEW public.v_projectmember_workload
			AS
			SELECT 'Project'::text AS type,
			t_project.pmcode AS usercode,
			t_project.pmname AS username,
			t_project.projectid::character varying(30) AS projectid,
			t_project.projectname,
			t_project.begindate,
			t_project.enddate,
			t_project.status
			FROM t_project
			WHERE t_project.status::bpchar &lt;&gt; ALL (ARRAY['Closed'::bpchar, 'Completed'::bpchar, 'CaseClosed'::bpchar, 'Cancel'::bpchar, 'Deleted'::bpchar, 'Archived'::bpchar, 'Rejected'::bpchar, 'Suspended'::bpchar])
			UNION
			SELECT 'Project'::text AS type,
			a.usercode,
			a.username,
			a.projectid::character varying(30) AS projectid,
			a.projectname,
			b.begindate,
			b.enddate,
			b.status
			FROM t_relateduser a,
			t_project b
			WHERE a.projectid = b.projectid AND (a.projectid IN ( SELECT t_project.projectid
			FROM t_project
			WHERE t_project.status::bpchar &lt;&gt; ALL (ARRAY['Closed'::bpchar, 'Completed'::bpchar, 'CaseClosed'::bpchar, 'Cancel'::bpchar, 'Deleted'::bpchar, 'Archived'::bpchar, 'Rejected'::bpchar, 'Suspended'::bpchar]))) AND (a.projectname::bpchar IN ( SELECT t_project.projectname
			FROM t_project
			WHERE t_project.status::bpchar &lt;&gt; ALL (ARRAY['Closed'::bpchar, 'Completed'::bpchar, 'CaseClosed'::bpchar, 'Cancel'::bpchar, 'Deleted'::bpchar, 'Archived'::bpchar, 'Rejected'::bpchar, 'Suspended'::bpchar])))
			UNION
			SELECT 'Plan'::text AS type,
			a.usercode,
			a.username,
			(('Project:'::text || b.projectid::character varying(30)::text) || ' Plan:'::text) || b.id::character varying(30)::text AS projectid,
			b.name AS projectname,
			b.start_date AS begindate,
			b.end_date AS enddate,
			b.status
			FROM t_planmember a,
			t_impleplan b
			WHERE a.planid = b.id AND b.type::bpchar = 'InUse'::bpchar
			UNION
			SELECT 'Plan'::text AS type,
			t_plan.usercode,
			t_plan.username,
			t_plan.planid::character varying(30) AS projectid,
			t_plan.planname AS projectname,
			t_plan.starttime AS begindate,
			t_plan.endtime AS enddate,
			t_plan.status
			FROM t_plan
			UNION
			SELECT 'Task'::text AS type,
			a.operatorcode AS usercode,
			a.operatorname AS username,
			(('Project:'::text || b.projectid::character varying(30)::text) || ' Task:'::text) || a.taskid::character varying(30)::text AS projectid,
			a.task AS projectname,
			a.begindate,
			a.enddate,
			b.status
			FROM t_taskassignrecord a,
			t_projecttask b
			WHERE a.taskid = b.taskid
			UNION
			SELECT 'Requirement'::text AS type,
			t_reqassignrecord.operatorcode AS usercode,
			t_reqassignrecord.operatorname AS username,
			t_reqassignrecord.reqid::character varying(30) AS projectid,
			t_reqassignrecord.reqname AS projectname,
			t_reqassignrecord.begindate,
			t_reqassignrecord.enddate,
			t_reqassignrecord.status
			FROM t_reqassignrecord
			UNION
			SELECT 'Meeting'::text AS type,
			a.usercode,
			a.username,
			a.meetingid::character varying(30) AS projectid,
			b.name AS projectname,
			b.begintime AS begindate,
			b.endtime AS enddate,
			b.status
			FROM t_meetingattendant a,
			t_meeting b
			WHERE a.meetingid = b.id;

			ALTER TABLE public.v_projectmember_workload
			OWNER TO postgres;

			GRANT ALL ON TABLE public.v_projectmember_workload TO postgres;
			GRANT SELECT ON TABLE public.v_projectmember_workload TO taketoppgdbreadonlyuser;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3667</ID>
    <SQLText>
			-- View: public.v_projectmember_workloadbyprojecttask

			-- DROP VIEW public.v_projectmember_workloadbyprojecttask;

			CREATE OR REPLACE VIEW public.v_projectmember_workloadbyprojecttask
			AS
			SELECT 'Project'::text AS type,
			t_project.pmcode AS usercode,
			t_project.pmname AS username,
			t_project.projectid::character varying(30) AS projectid,
			t_project.projectname,
			t_project.begindate,
			t_project.enddate,
			t_project.projectid AS pjid,
			t_project.projectaddress AS taskid
			FROM t_project
			WHERE t_project.projectid = 0
			UNION
			SELECT 'Task'::text AS type,
			a.operatorcode AS usercode,
			a.operatorname AS username,
			(('Project:'::text || b.projectid::character varying(30)::text) || ' Task:'::text) || a.taskid::character varying(30)::text AS projectid,
			a.task AS projectname,
			a.begindate,
			a.enddate,
			b.projectid AS pjid,
			b.taskid::character varying(30) AS taskid
			FROM t_taskassignrecord a,
			t_projecttask b
			WHERE a.taskid = b.taskid AND (b.status::bpchar &lt;&gt; ALL (ARRAY['Closed'::bpchar, 'Completed'::bpchar, 'CaseClosed'::bpchar, 'Cancel'::bpchar, 'Deleted'::bpchar, 'Archived'::bpchar, 'Rejected'::bpchar, 'Suspended'::bpchar, 'ToProject'::bpchar, 'ToTask'::bpchar]));

			ALTER TABLE public.v_projectmember_workloadbyprojecttask
			OWNER TO postgres;

			GRANT ALL ON TABLE public.v_projectmember_workloadbyprojecttask TO postgres;
			GRANT SELECT ON TABLE public.v_projectmember_workloadbyprojecttask TO taketoppgdbreadonlyuser;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3668</ID>
    <SQLText>
			-- View: public.v_projectmember_workloadschedule

			-- DROP VIEW public.v_projectmember_workloadschedule;

			CREATE OR REPLACE VIEW public.v_projectmember_workloadschedule
			AS
			SELECT '项目'::text AS type,
			t_project.pmcode AS usercode,
			t_project.pmname AS username,
			t_project.projectid::character varying(30) AS projectid,
			t_project.projectname,
			t_project.begindate,
			t_project.enddate,
			t_project.status
			FROM t_project
			WHERE t_project.status::bpchar &lt;&gt; ALL (ARRAY['Closed'::bpchar, 'Completed'::bpchar, 'CaseClosed'::bpchar, 'Cancel'::bpchar, 'Deleted'::bpchar, 'Archived'::bpchar, 'Rejected'::bpchar, 'Suspended'::bpchar])
			UNION
			SELECT '项目'::text AS type,
			a.usercode,
			a.username,
			a.projectid::character varying(30) AS projectid,
			a.projectname,
			b.begindate,
			b.enddate,
			b.status
			FROM t_relateduser a,
			t_project b
			WHERE a.projectid = b.projectid AND (a.projectid IN ( SELECT t_project.projectid
			FROM t_project
			WHERE t_project.status::bpchar &lt;&gt; ALL (ARRAY['关闭'::bpchar, '完成'::bpchar, '结案'::bpchar, '取消'::bpchar, '删除'::bpchar, '归档'::bpchar, '拒绝'::bpchar, '挂起'::bpchar]))) AND (a.projectname::bpchar IN ( SELECT t_project.projectname
			FROM t_project
			WHERE t_project.status::bpchar &lt;&gt; ALL (ARRAY['关闭'::bpchar, '完成'::bpchar, '结案'::bpchar, '取消'::bpchar, '删除'::bpchar, '归档'::bpchar, '拒绝'::bpchar, '挂起'::bpchar])))
			UNION
			SELECT '计划'::text AS type,
			a.usercode,
			a.username,
			b.id::character varying(30) AS projectid,
			b.name AS projectname,
			b.start_date AS begindate,
			b.end_date AS enddate,
			b.status
			FROM t_planmember a,
			t_impleplan b
			WHERE a.planid = b.id AND b.type::bpchar = '在用'::bpchar
			UNION
			SELECT '计划'::text AS type,
			t_plan.usercode,
			t_plan.username,
			t_plan.planid::character varying(30) AS projectid,
			t_plan.planname AS projectname,
			t_plan.starttime AS begindate,
			t_plan.endtime AS enddate,
			t_plan.status
			FROM t_plan
			UNION
			SELECT '任务'::text AS type,
			a.operatorcode AS usercode,
			a.operatorname AS username,
			a.taskid::character varying(30) AS projectid,
			a.task AS projectname,
			a.begindate,
			a.enddate,
			b.status
			FROM t_taskassignrecord a,
			t_projecttask b
			WHERE a.taskid = b.taskid
			UNION
			SELECT '需求'::text AS type,
			t_reqassignrecord.operatorcode AS usercode,
			t_reqassignrecord.operatorname AS username,
			t_reqassignrecord.reqid::character varying(30) AS projectid,
			t_reqassignrecord.reqname AS projectname,
			t_reqassignrecord.begindate,
			t_reqassignrecord.enddate,
			t_reqassignrecord.status
			FROM t_reqassignrecord
			UNION
			SELECT '会议'::text AS type,
			a.usercode,
			a.username,
			a.meetingid::character varying(30) AS projectid,
			b.name AS projectname,
			b.begintime AS begindate,
			b.endtime AS enddate,
			b.status
			FROM t_meetingattendant a,
			t_meeting b
			WHERE a.meetingid = b.id;

			ALTER TABLE public.v_projectmember_workloadschedule
			OWNER TO postgres;

			GRANT ALL ON TABLE public.v_projectmember_workloadschedule TO postgres;
			GRANT SELECT ON TABLE public.v_projectmember_workloadschedule TO taketoppgdbreadonlyuser;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3669</ID>
    <SQLText>
			-- View: public.v_projectmembertaskdetailreport

			-- DROP VIEW public.v_projectmembertaskdetailreport;

			CREATE OR REPLACE VIEW public.v_projectmembertaskdetailreport
			AS
			SELECT COALESCE(f.departcode, ''::bpchar) AS departcode,
			COALESCE(f.departname, ''::character varying) AS departname,
			COALESCE(e.usercode, ''::bpchar) AS usercode,
			COALESCE(e.username, ''::bpchar) AS username,
			CASE b.projectid
			WHEN 1 THEN NULL::bigint
			ELSE b.projectid
			END AS projectid,
			COALESCE(b.projectcode, ''::character varying) AS projectcode,
			COALESCE(b.projectname, ''::bpchar) AS projectname,
			COALESCE(c.id::text, ''::text) AS planid,
			COALESCE(c.name, ''::character varying) AS planname,
			a.taskid,
			a.task AS taskname,
			c.start_date AS planbegintime,
			c.end_date AS planendtime,
			a.begindate AS taskbegindate,
			d.operationtime AS taskfirstoperatetime,
			a.enddate AS taskenddate,
			d.operationtime AS tasklastestoperatetime,
			a.status,
			f_getsumtasklog(a.taskid) AS tasklog,
			a.manhour,
			a.type AS tasktype
			FROM t_projecttask a
			LEFT JOIN t_project b ON a.projectid = b.projectid
			LEFT JOIN t_impleplan c ON a.planid = c.id AND (c.verid IN ( SELECT t_projectplanversion.verid
			FROM t_projectplanversion
			WHERE t_projectplanversion.type::bpchar = 'InUse'::bpchar))
			LEFT JOIN t_taskassignrecord d ON a.taskid = d.taskid AND (d.id IN ( SELECT min(t_taskassignrecord.id) AS min
			FROM t_taskassignrecord
			GROUP BY t_taskassignrecord.taskid))
			LEFT JOIN t_projectmember e ON d.operatorcode = e.usercode
			LEFT JOIN t_department f ON e.departcode = f.departcode
			LEFT JOIN t_taskassignrecord g ON a.taskid = g.taskid AND (g.id IN ( SELECT min(t_taskassignrecord.id) AS min
			FROM t_taskassignrecord
			GROUP BY t_taskassignrecord.taskid))
			WHERE (a.planid IN ( SELECT t_impleplan.id AS planid
			FROM t_impleplan)) AND (a.projectid IN ( SELECT t_project.projectid
			FROM t_project));

			ALTER TABLE public.v_projectmembertaskdetailreport
			OWNER TO postgres;

			GRANT ALL ON TABLE public.v_projectmembertaskdetailreport TO postgres;
			GRANT SELECT ON TABLE public.v_projectmembertaskdetailreport TO taketoppgdbreadonlyuser;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3670</ID>
    <SQLText>
			-- View: public.v_prorelateduser

			-- DROP VIEW public.v_prorelateduser;

			CREATE OR REPLACE VIEW public.v_prorelateduser
			AS
			SELECT a.id,
			a.projectid,
			b.projectcode,
			b.projectname,
			b.projecttype,
			b.status,
			b.begindate,
			b.enddate,
			b.parentid,
			b.customername,
			b.pingpai,
			b.productname,
			a.unithoursalary,
			a.actor,
			a.joindate,
			a.usercode,
			a.username,
			b.pmcode,
			b.pmname,
			b.priority,
			b.usercode AS makemancode,
			b.username AS makemanname,
			b.budget,
			b.manhour,
			b.mannumber,
			b.finishpercent,
			a.status AS mystatus,
			b.status AS prostatus,
			b.customerprojectcode,
			b.confirmedbysupper,
			b.makedate,
			b.projectstartupneedsupperconfirm
			FROM t_relateduser a
			JOIN t_project b ON a.projectid = b.projectid
			WHERE b.status::bpchar &lt;&gt; ALL (ARRAY['New'::bpchar, 'Review'::bpchar, 'Hidden'::bpchar, 'Deleted'::bpchar, 'Archived'::bpchar]);

			ALTER TABLE public.v_prorelateduser
			OWNER TO postgres;

			GRANT ALL ON TABLE public.v_prorelateduser TO postgres;
			GRANT SELECT ON TABLE public.v_prorelateduser TO taketoppgdbreadonlyuser;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3671</ID>
    <SQLText>
			-- View: public.v_projectstatusnumberchart

			-- DROP VIEW public.v_projectstatusnumberchart;

			CREATE OR REPLACE VIEW public.v_projectstatusnumberchart
			AS
			SELECT 'Normal'::text AS status,
			t_project.projectid,
			t_project.projectname,
			t_project.pmcode,
			t_project.pmname,
			t_project.begindate,
			t_project.enddate
			FROM t_project
			WHERE t_project.enddate &lt;= now() AND t_project.finishpercent = 100
			UNION
			SELECT 'Abnormal'::text AS status,
			t_project.projectid,
			t_project.projectname,
			t_project.pmcode,
			t_project.pmname,
			t_project.begindate,
			t_project.enddate
			FROM t_project
			WHERE t_project.enddate &lt; now() AND t_project.finishpercent &lt; 100;

			ALTER TABLE public.v_projectstatusnumberchart
			OWNER TO postgres;

			GRANT ALL ON TABLE public.v_projectstatusnumberchart TO postgres;
			GRANT SELECT ON TABLE public.v_projectstatusnumberchart TO taketoppgdbreadonlyuser;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3672</ID>
    <SQLText>
			-- View: public.v_projectprofitandcostchart

			-- DROP VIEW public.v_projectprofitandcostchart;

			CREATE OR REPLACE VIEW public.v_projectprofitandcostchart
			AS
			SELECT a.projectid,
			b.projectname,
			b.pmcode,
			b.pmname,
			b.begindate,
			b.enddate,
			a.account,
			COALESCE(a.amount, 0::numeric) AS amount
			FROM t_projectbudget a,
			t_project b
			WHERE a.projectid = b.projectid
			UNION
			SELECT b.projectid,
			b.projectname,
			b.pmcode,
			b.pmname,
			b.begindate,
			b.enddate,
			'Profit'::character varying AS account,
			COALESCE(b.projectamount, 0::numeric) - (( SELECT COALESCE(sum(a.amount), 0::numeric) AS "coalesce"
			FROM t_projectbudget a
			WHERE a.projectid = b.projectid)) AS amount
			FROM t_project b;

			ALTER TABLE public.v_projectprofitandcostchart
			OWNER TO postgres;

			GRANT ALL ON TABLE public.v_projectprofitandcostchart TO postgres;
			GRANT SELECT ON TABLE public.v_projectprofitandcostchart TO taketoppgdbreadonlyuser;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3673</ID>
    <SQLText>
			-- View: public.v_projectplanforwanring

			-- DROP VIEW public.v_projectplanforwanring;

			CREATE OR REPLACE VIEW public.v_projectplanforwanring
			AS
			SELECT DISTINCT a.verid,
			a.id AS planid,
			a.parent_id AS parentidgantt,
			a.workid,
			a.name AS plandetail,
			a.type,
			a.start_date AS begintime,
			a.end_date AS endtime,
			date_part('epoch'::text, age(now(), a.end_date::timestamp with time zone)) / 86400::double precision AS expireday,
			a.leadercode,
			a.leader,
			a.resource,
			a.budget,
			a.makedate,
			a.parentid,
			a.priorid,
			a.defaultschedule,
			a.defaultcost,
			a.expense,
			a.percent_done,
			a.status,
			a.projectid
			FROM t_impleplan a,
			t_projectplanversion b
			WHERE a.projectid = b.projectid AND a.verid = b.verid AND b.type::bpchar = 'InUse'::bpchar AND (a.status::bpchar &lt;&gt; ALL (ARRAY['Suspended'::bpchar, 'Cancel'::bpchar])) AND (a.projectid IN ( SELECT t_project.projectid
			FROM t_project
			WHERE t_project.status::bpchar &lt;&gt; ALL (ARRAY['Acceptance'::bpchar, 'CaseClosed'::bpchar, 'Archived'::bpchar, 'Deleted'::bpchar, 'Suspended'::bpchar, 'Cancel'::bpchar])));

			ALTER TABLE public.v_projectplanforwanring
			OWNER TO postgres;

			GRANT ALL ON TABLE public.v_projectplanforwanring TO postgres;
			GRANT SELECT ON TABLE public.v_projectplanforwanring TO taketoppgdbreadonlyuser;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3674</ID>
    <SQLText>
			-- View: public.v_projectbasedatasummaryreport

			-- DROP VIEW public.v_projectbasedatasummaryreport;

			CREATE OR REPLACE VIEW public.v_projectbasedatasummaryreport
			AS
			SELECT t_project.projectid,
			'Workload Estimation'::text AS title,
			t_project.mannumber AS summarynumber
			FROM t_project
			UNION
			SELECT t_relateduser.projectid,
			'Actual Workload'::text AS title,
			count(t_relateduser.usercode) AS summarynumber
			FROM t_relateduser
			GROUP BY t_relateduser.projectid
			UNION
			SELECT t_project.projectid,
			'Cost Estimation'::text AS title,
			t_project.budget AS summarynumber
			FROM t_project
			UNION
			SELECT t_proexpense.projectid,
			'Actual Cost'::text AS title,
			sum(t_proexpense.amount) AS summarynumber
			FROM t_proexpense
			GROUP BY t_proexpense.projectid
			UNION
			SELECT t_project.projectid,
			'Cycle Estimation'::text AS title,
			t_project.manhour AS summarynumber
			FROM t_project
			UNION
			SELECT t_dailywork.projectid,
			'Actual Cycle'::text AS title,
			sum(t_dailywork.confirmmanhour) AS summarynumber
			FROM t_dailywork
			GROUP BY t_dailywork.projectid;

			ALTER TABLE public.v_projectbasedatasummaryreport
			OWNER TO postgres;

			GRANT ALL ON TABLE public.v_projectbasedatasummaryreport TO postgres;
			GRANT SELECT ON TABLE public.v_projectbasedatasummaryreport TO taketoppgdbreadonlyuser;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3675</ID>
    <SQLText>
			-- View: public.v_mymember_workload

			-- DROP VIEW public.v_mymember_workload;

			CREATE OR REPLACE VIEW public.v_mymember_workload
			AS
			SELECT DISTINCT a.type,
			a.usercode,
			a.username,
			a.projectid,
			a.projectname,
			a.begindate,
			a.enddate,
			b.sortnumber,
			a.status
			FROM v_projectmember_workload a,
			t_memberlevel b
			WHERE a.usercode = b.usercode AND (a.status::bpchar &lt;&gt; ALL (ARRAY['Closed'::bpchar, 'Completed'::bpchar, 'CaseClosed'::bpchar, 'Cancel'::bpchar, 'Deleted'::bpchar, 'Archived'::bpchar, '拒绝'::bpchar, 'Rejusted'::bpchar, 'ToProject'::bpchar, 'ToTask'::bpchar]));

			ALTER TABLE public.v_mymember_workload
			OWNER TO postgres;

			GRANT ALL ON TABLE public.v_mymember_workload TO postgres;
			GRANT SELECT ON TABLE public.v_mymember_workload TO taketoppgdbreadonlyuser;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3676</ID>
    <SQLText>
			-- View: public.v_impleplanactive

			-- DROP VIEW public.v_impleplanactive;

			CREATE OR REPLACE VIEW public.v_impleplanactive
			AS
			SELECT a.id,
			a.projectid,
			a.workid,
			a.name,
			a.start_date,
			a.end_date,
			a.resource,
			a.budget,
			a.makedate,
			a.status,
			a.parentid,
			a.priorid,
			a.type,
			a.verid,
			a.defaultschedule,
			a.defaultcost,
			a.backupid,
			a.lockstatus,
			a.updatemancode,
			a.updatetime,
			a.fromprojectid,
			a.fromprojectplanverid,
			a.creatorcode,
			a.percent_done,
			a.priority,
			a.baseline_start_date,
			a.baseline_end_date,
			a.duration,
			a.duration_unit,
			a.other_field,
			a.index,
			a.pid,
			a.parent_id,
			a.fromplanid,
			a.operatorcode,
			a.operatorname,
			a.sortnumber,
			a.leader,
			a.remark,
			a.baseline_percent_done,
			a.taskcolor,
			a.leadercode,
			a.workhour,
			a.actualhour,
			a.expense,
			a.requirenumber,
			a.finishednumber,
			a.unitname,
			a.price,
			a.belongdepartcode,
			a.belongdepartname,
			b.beforetime
			FROM t_impleplan a
			LEFT JOIN ( SELECT a_1.id,
			max(b_1.start_date) AS beforetime
			FROM ( SELECT t_impleplan.id,
			t_impleplan.projectid,
			t_impleplan.workid,
			t_impleplan.name,
			t_impleplan.start_date,
			t_impleplan.end_date,
			t_impleplan.resource,
			t_impleplan.budget,
			t_impleplan.makedate,
			t_impleplan.status,
			t_impleplan.parentid,
			t_impleplan.priorid,
			t_impleplan.type,
			t_impleplan.verid,
			t_impleplan.defaultschedule,
			t_impleplan.defaultcost,
			t_impleplan.backupid,
			t_impleplan.lockstatus,
			t_impleplan.updatemancode,
			t_impleplan.updatetime,
			t_impleplan.fromprojectid,
			t_impleplan.fromprojectplanverid,
			t_impleplan.creatorcode,
			t_impleplan.percent_done,
			t_impleplan.priority,
			t_impleplan.baseline_start_date,
			t_impleplan.baseline_end_date,
			t_impleplan.duration,
			t_impleplan.duration_unit,
			t_impleplan.other_field,
			t_impleplan.index,
			t_impleplan.pid,
			t_impleplan.parent_id,
			t_impleplan.fromplanid,
			t_impleplan.operatorcode,
			t_impleplan.operatorname,
			t_impleplan.sortnumber,
			t_impleplan.leader,
			t_impleplan.remark,
			t_impleplan.baseline_percent_done,
			t_impleplan.taskcolor,
			t_impleplan.leadercode,
			t_impleplan.workhour,
			t_impleplan.actualhour,
			t_impleplan.expense,
			t_impleplan.requirenumber,
			t_impleplan.finishednumber,
			t_impleplan.unitname,
			t_impleplan.price,
			t_impleplan.belongdepartcode,
			t_impleplan.belongdepartname
			FROM t_impleplan
			WHERE (t_impleplan.verid IN ( SELECT t_projectplanversion.verid
			FROM t_projectplanversion
			WHERE t_projectplanversion.type::bpchar = 'InUse'::bpchar)) AND t_impleplan.start_date = t_impleplan.end_date) a_1
			LEFT JOIN ( SELECT t_impleplan.id,
			t_impleplan.projectid,
			t_impleplan.workid,
			t_impleplan.name,
			t_impleplan.start_date,
			t_impleplan.end_date,
			t_impleplan.resource,
			t_impleplan.budget,
			t_impleplan.makedate,
			t_impleplan.status,
			t_impleplan.parentid,
			t_impleplan.priorid,
			t_impleplan.type,
			t_impleplan.verid,
			t_impleplan.defaultschedule,
			t_impleplan.defaultcost,
			t_impleplan.backupid,
			t_impleplan.lockstatus,
			t_impleplan.updatemancode,
			t_impleplan.updatetime,
			t_impleplan.fromprojectid,
			t_impleplan.fromprojectplanverid,
			t_impleplan.creatorcode,
			t_impleplan.percent_done,
			t_impleplan.priority,
			t_impleplan.baseline_start_date,
			t_impleplan.baseline_end_date,
			t_impleplan.duration,
			t_impleplan.duration_unit,
			t_impleplan.other_field,
			t_impleplan.index,
			t_impleplan.pid,
			t_impleplan.parent_id,
			t_impleplan.fromplanid,
			t_impleplan.operatorcode,
			t_impleplan.operatorname,
			t_impleplan.sortnumber,
			t_impleplan.leader,
			t_impleplan.remark,
			t_impleplan.baseline_percent_done,
			t_impleplan.taskcolor,
			t_impleplan.leadercode,
			t_impleplan.workhour,
			t_impleplan.actualhour,
			t_impleplan.expense,
			t_impleplan.requirenumber,
			t_impleplan.finishednumber,
			t_impleplan.unitname,
			t_impleplan.price,
			t_impleplan.belongdepartcode,
			t_impleplan.belongdepartname
			FROM t_impleplan
			WHERE (t_impleplan.verid IN ( SELECT t_projectplanversion.verid
			FROM t_projectplanversion
			WHERE t_projectplanversion.type::bpchar = 'InUse'::bpchar)) AND t_impleplan.start_date = t_impleplan.end_date) b_1 ON a_1.projectid = b_1.projectid AND a_1.start_date &gt; b_1.start_date
			GROUP BY a_1.id) b ON a.id = b.id
			WHERE (a.verid IN ( SELECT t_projectplanversion.verid
			FROM t_projectplanversion
			WHERE t_projectplanversion.type::bpchar = 'InUse'::bpchar)) AND a.start_date = a.end_date;

			ALTER TABLE public.v_impleplanactive
			OWNER TO postgres;

			GRANT ALL ON TABLE public.v_impleplanactive TO postgres;
			GRANT SELECT ON TABLE public.v_impleplanactive TO taketoppgdbreadonlyuser;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3677</ID>
    <SQLText>
			-- View: public.v_documenttypefilter

			-- DROP VIEW public.v_documenttypefilter;

			CREATE OR REPLACE VIEW public.v_documenttypefilter
			AS
			SELECT DISTINCT t_document.doctype,
			t_document.doctypeid,
			t_document.relatedtype,
			t_document.relatedid
			FROM t_document
			WHERE t_document.status::bpchar &lt;&gt; 'Deleted'::bpchar;

			ALTER TABLE public.v_documenttypefilter
			OWNER TO postgres;

			GRANT ALL ON TABLE public.v_documenttypefilter TO postgres;
			GRANT SELECT ON TABLE public.v_documenttypefilter TO taketoppgdbreadonlyuser;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3678</ID>
    <SQLText>
			-- View: public.v_constractincomeexpensereport

			-- DROP VIEW public.v_constractincomeexpensereport;

			CREATE OR REPLACE VIEW public.v_constractincomeexpensereport
			AS
			SELECT a.parta,
			a.constractcode,
			a.signdate,
			to_char(a.signdate, 'yymmdd'::text) AS signdatestring,
			COALESCE(g.receivablesamount, 0::numeric) AS receivablesamount,
			COALESCE(h.payableamount, 0::numeric) AS payableamount,
			a.currency,
			a.status,
			COALESCE(b.totalreceiveramount, 0::numeric) AS totalreceiveramount,
			COALESCE(d.totalrecinvoiceamount, 0::numeric) AS totalrecinvoiceamount,
			COALESCE(c.totaloutofpocketamount, 0::numeric) AS totaloutofpocketamount,
			COALESCE(c.totaloutofpocketamounthome, 0::numeric) AS totaloutofpocketamounthome,
			COALESCE(e.totalpayinvoiceamount, 0::numeric) AS totalpayinvoiceamount,
			COALESCE(f.totaltax, 0::numeric) AS totaltax,
			COALESCE(f.totaladdedvaluetax, 0::numeric) AS totaladdedvaluetax,
			COALESCE(f.totalentrytax, 0::numeric) AS totalentrytax,
			COALESCE(g.receivablesamount, 0::numeric) - COALESCE(h.payableamount, 0::numeric) - COALESCE(f.totaladdedvaluetax, 0::numeric) - COALESCE(f.totalentrytax, 0::numeric) AS profits
			FROM t_constract a
			FULL JOIN v_constractreceivablesaccountsummary g ON a.constractcode::text = g.constractcode::text AND a.status::bpchar &lt;&gt; 'Deleted'::bpchar
			FULL JOIN v_constractpayableaccountsummary h ON a.constractcode::text = h.constractcode::text
			FULL JOIN v_constractreceivablesrecord b ON a.constractcode::text = b.constractcode::text
			FULL JOIN v_constractpayablerecord c ON a.constractcode::text = c.constractcode::text
			FULL JOIN v_constractrelatedinvoice_open d ON a.constractcode::text = d.constractcode::text
			FULL JOIN v_constractrelatedinvoice_receive e ON a.constractcode::text = e.constractcode::text
			FULL JOIN v_constractrelatedentryorderforinner f ON a.constractcode::text = f.constractcode::text
			WHERE char_length(rtrim(a.parta::text)) &gt; 0;

			ALTER TABLE public.v_constractincomeexpensereport
			OWNER TO postgres;

			GRANT ALL ON TABLE public.v_constractincomeexpensereport TO postgres;
			GRANT SELECT ON TABLE public.v_constractincomeexpensereport TO taketoppgdbreadonlyuser;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3679</ID>
    <SQLText>
			-- FUNCTION: public.Func_tg_ImplePlan_Update()

			-- DROP FUNCTION IF EXISTS public."Func_tg_ImplePlan_Update"();

			CREATE OR REPLACE FUNCTION public."Func_tg_ImplePlan_Update"()
			RETURNS trigger
			LANGUAGE 'plpgsql'
			COST 100
			VOLATILE NOT LEAKPROOF
			AS $BODY$
			declare chrPMCode varchar(20);
			declare chrPMName varchar(20);

			declare charBelongDepartCode char(20);
			declare charBelongDepartName varchar(40);

			declare charLeaderCode char(20);

			declare chrPlanVerType varchar(20);
			declare chrLeaderCode varchar(20);
			declare chrLeaderName varchar(20);
			declare chrProjectType char(20);
			declare chrImpactByDetail char(10);
			declare intWholePlanPercent_Done int;
			declare intParentIDGantt  int;

			begin

			--插入原来的数据作为日志
			Insert Into T_ImplePlan_UpdateLog(ID,ProjectID,WorkID,Name,Start_Date,End_Date,Resource
			,Budget
			,MakeDate
			,Status
			,ParentID
			,PriorID
			,Type
			,VerID
			,DefaultSchedule
			,DefaultCost
			,BackupID
			,LockStatus
			,UpdateManCode
			,UpdateTime
			,FromProjectID
			,FromProjectPlanVerID
			,CreatorCode
			,Percent_Done
			,priority
			,BaseLine_Start_Date
			,BaseLine_End_Date
			,Duration
			,Duration_Unit
			,Other_Field
			,Index
			,pid
			,Parent_ID
			,FromPlanID
			,OperatorCode
			,OperatorName
			,SortNumber
			,leader
			,remark
			,baseline_percent_done
			,taskcolor
			,LeaderCode
			,WorkHour
			,ActualHour
			,Expense
			,CreateLogTime
			,RequireNumber
			,FinishedNumber
			,UnitName
			,Price
			,BelongDepartCode
			,BelongDepartName) values(old.ID
			,old.ProjectID
			,old.WorkID
			,old.Name
			,old.Start_Date
			,old.End_Date
			,old.Resource
			,old.Budget
			,old.MakeDate
			,old.Status
			,old.ParentID
			,old.PriorID
			,old.Type
			,old.VerID
			,old.DefaultSchedule
			,old.DefaultCost
			,old.BackupID
			,old.LockStatus
			,old.UpdateManCode
			,old.UpdateTime
			,old.FromProjectID
			,old.FromProjectPlanVerID
			,old.CreatorCode
			,old.Percent_Done
			,old.priority
			,old.BaseLine_Start_Date
			,old.BaseLine_End_Date
			,old.Duration
			,old.Duration_Unit
			,old.Other_Field
			,old.Index
			,old.pid
			,old.Parent_ID
			,old.FromPlanID
			,old.OperatorCode
			,old.OperatorName
			,old.SortNumber
			,old.leader
			,old.remark
			,old.baseline_percent_done
			,old.taskcolor
			,old.LeaderCode
			,old.WorkHour
			,old.ActualHour
			,old.Expense
			,now()
			,old.RequireNumber
			,old.FinishedNumber
			,old.UnitName
			,old.Price
			,old.BelongDepartCode
			,old.BelongDepartName);

			select rtrim(COALESCE(new.BelongDepartCode,'')),rtrim(COALESCE(new.BelongDepartName,'')) into charBelongDepartCode,charBelongDepartName;

			Select Type into chrPlanVerType From T_ProjectPlanVersion Where ProjectID = new.ProjectID and VerID = new.VerID;

			Select Percent_Done into intWholePlanPercent_Done From T_ImplePlan Where ProjectID = new.ProjectID and VerID = new.VerID and Parent_ID = 0;

			select PMCode,PMName into chrPMCode,chrPMName From T_Project Where ProjectID = new.ProjectID;

			--更新归属部门代码和名称
			if new.leadercode != old.leadercode then

			-- 	    delete from t_sqlrunlog;
			--  	    insert into t_sqlrunlog(logcontent,createtime) values(new.leader|| '--' || old.leader,now());

			select new.leadercode into  charLeaderCode ;

			select DepartCode,DepartName into charBelongDepartCode,charBelongDepartName From T_ProjectMember  Where UserCode = charLeaderCode;
			Update T_ImplePlan Set BelongDepartCode = charBelongDepartCode,BelongDepartName = charBelongDepartName Where ID = new.ID ;

			End if;

			--依活动版计划进度更改项目总进度
			if new.percent_done!=old.percent_done then
			Select ProjectType into chrProjectType From T_Project Where ProjectID = new.ProjectID;
			Select ProgressByDetailImpact into chrImpactByDetail From T_ProjectType Where Type = chrProjectType;

			if chrImpactByDetail = 'YES' and new.parent_id = 0 and chrPlanVerType = 'InUse' then
			Update T_Project Set FinishPercent = intWholePlanPercent_Done Where ProjectID = new.ProjectID;
			End if;
			End if;

			--更改此计划转的任务的开始时间和结束时间
			if new.Start_Date!=old.Start_Date or new.End_Date !=old.End_Date then

			Update T_ProjectTask Set BeginDate = new.Start_Date,EndDate = new.End_Date Where PlanID = new.ID ;

			Update T_TaskAssignRecord Set BeginDate = new.Start_Date,EndDate = new.End_Date
			Where TaskID In (Select TaskID From T_ProjectTask Where PlanID = new.ID  and PriorID = 0);

			End if;

			return new;
			end
			$BODY$;

			ALTER FUNCTION public."Func_tg_ImplePlan_Update"()
			OWNER TO postgres;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3680</ID>
    <SQLText>
			-- FUNCTION: public.f_userattendancereport(text, text, text, text)

			-- DROP FUNCTION IF EXISTS public.f_userattendancereport(text, text, text, text);

			CREATE OR REPLACE FUNCTION public.f_userattendancereport(
			startdate text,
			enddate text,
			departcode text,
			username text)
			RETURNS text
			LANGUAGE 'plpgsql'
			COST 100
			VOLATILE PARALLEL UNSAFE
			AS $BODY$
			declare
			SqlCol text;
			MonthdaysSql VARCHAR(2000);
			UserAttendanceRecordSql VARCHAR(2000);
			Sql1 text;
			Sql2 text;
			Sql3 text;
			Sql4 text;
			LeaveSql text;
			OvertimeSql text;
			SqlDetail text;
			sqltotal text;
			recreport record;
			jsonreport text;
			BEGIN

			SELECT 'SELECT to_char(a.AttendanceDate, ''YYYY-MM-DD'') AttendanceDate,case WHEN c.Id is not null then 0
			when DATE_PART(''dow'',a.AttendanceDate) = 0 OR DATE_PART(''dow'',a.AttendanceDate)=6 OR b.ID IS NOT NULL THEN 1 ELSE 0 END IsHoliday
			FROM (SELECT generate_series(to_date('''||StartDate||''', ''YYYY-MM-DD''),to_date('''||EndDate||''', ''YYYY-MM-DD''),INTERVAL ''1 day'') as AttendanceDate) a
			LEFT JOIN T_FestivalsDaySet b ON a.AttendanceDate=b.FestivalsDate
			left join T_FestivalsExchangeDaySet c on a.AttendanceDate=c.ExchangeDate ' into MonthdaysSql;

			SELECT ' SELECT UserCode,to_char(AttendanceDate,''YYYY-MM-DD'') AttendanceDate,LateMinute,EarlyMinute,LargestDistance,
			CASE WHEN NCheckInIsMust=''YES'' THEN 1 ELSE 0 END NCheckInIsMust,CASE WHEN NCheckOutIsMust=''YES'' THEN 1 ELSE 0 END NCheckOutIsMust,
			CASE WHEN MCheckInIsMust=''YES'' THEN MCheckIn
			WHEN NCheckInIsMust=''YES'' THEN NCheckIn
			ELSE NULL END CheckIn,
			CASE WHEN ACheckOutIsMust=''YES'' THEN ACheckOut
			WHEN NCheckOutIsMust=''YES'' THEN NCheckOut
			ELSE NULL END CheckOut,
			CASE WHEN MCheckInIsMust=''YES'' THEN COALESCE(MCheckInAddress,'''')
			WHEN NCheckInIsMust=''YES'' THEN COALESCE(NCheckInAddress,'''')
			ELSE NULL END CheckInAddress,
			CASE WHEN MCheckInIsMust=''YES'' THEN COALESCE(char_length(MCheckInAddress),0)
			WHEN NCheckInIsMust=''YES'' THEN COALESCE(char_length(NCheckInAddress),0)
			ELSE 0 END CheckInAddressLen,
			CASE WHEN ACheckOutIsMust=''YES'' THEN COALESCE(ACheckOutAddress,'''')
			WHEN NCheckOutIsMust=''YES'' THEN COALESCE(NCheckOutAddress,'''')
			ELSE NULL END CheckOutAddress,
			CASE WHEN ACheckOutIsMust=''YES'' THEN COALESCE(char_length(ACheckOutAddress),0)
			WHEN NCheckOutIsMust=''YES'' THEN COALESCE(char_length(NCheckOutAddress),0)
			ELSE 0 END CheckOutAddressLen,
			CASE WHEN MCheckInIsMust=''YES'' THEN MCheckInDistance
			WHEN NCheckInIsMust=''YES'' THEN NCheckInDistance
			ELSE NULL END CheckInDistance,
			CASE WHEN ACheckOutIsMust=''YES'' THEN ACheckOutDistance
			WHEN NCheckOutIsMust=''YES'' THEN NCheckOutDistance
			ELSE NULL END CheckOutDistance
			FROM T_UserAttendanceRecord
			where AttendanceDate &gt;= '''||StartDate||''' AND  AttendanceDate&lt; to_date('''||EndDate||''',''YYYY-MM-DD'')+INTERVAL ''1 day''  '
			into UserAttendanceRecordSql;

			SELECT ' SELECT a.UserName,a.Department,a.EmployeeID,a.Position,b.*,
			CAST(a.AttendanceDays-COALESCE(f.HourNum,0)/8 as decimal(5,3)) AttendanceDays,a.ScheduledAttendanceDays,a.NumberOfLateArrivals,a.DurationOfLateArrival,a.AbsenteeismNumberOfLateArrivals,a.NumberOfEarlyDepartures,a.DurationOfEarlyDeparture,a.DaysOfAbsenteeism,a.NumberOfNightShifts,
			d.*,c.*
			FROM(SELECT MIN(a.UserName) UserName,MIN(a.DepartName)Department,MIN(a.UserCode)EmployeeID,MIN(a.Duty)Position,
			SUM(case when ((b.CheckInAddressLen&gt;0 AND (b.CheckInDistance&lt;=b.LargestDistance or b.CheckInDistance=0))
			and (b.CheckOutAddressLen&gt;0 AND (b.CheckOutDistance&lt;=b.LargestDistance or b.CheckOutDistance=0)) or l.HourNum&gt;=8) AND k.IsHoliday=0 then 1 else 0 end ) AttendanceDays,
			sum(case when k.IsHoliday=0 then 1 else 0 end) ScheduledAttendanceDays, SUM(CASE WHEN COALESCE(b.LateMinute,0)&gt;0 THEN 1 ELSE 0 end) NumberOfLateArrivals,
			SUM(COALESCE(b.LateMinute,0)) DurationOfLateArrival,SUM(case when (COALESCE(b.CheckInAddressLen,0)=0 OR  b.CheckInDistance&gt;b.LargestDistance) AND (COALESCE(b.CheckOutAddressLen,0)=0 or b.CheckOutDistance&gt;b.LargestDistance) AND k.IsHoliday=0 and l.Creator is null then 1 else 0 end )
			+SUM(CASE WHEN COALESCE(b.LateMinute,0)&gt;0 THEN 1 ELSE 0 end) AbsenteeismNumberOfLateArrivals,
			SUM(CASE WHEN COALESCE(b.EarlyMinute,0)&gt;0 THEN 1 ELSE 0 end) NumberOfEarlyDepartures,SUM(COALESCE(b.EarlyMinute,0)) DurationOfEarlyDeparture,
			SUM(case when (COALESCE(b.CheckInAddressLen,0)=0 OR  b.CheckInDistance&gt;b.LargestDistance) AND (COALESCE(b.CheckOutAddressLen,0)=0 or b.CheckOutDistance&gt;b.LargestDistance) AND k.IsHoliday=0 and l.Creator is null then 1 else 0 end ) DaysOfAbsenteeism,
			SUM(CASE WHEN b.NCheckInIsMust=1 AND COALESCE(b.LateMinute,0)=0 AND (b.CheckInDistance&lt;=b.LargestDistance OR b.CheckInDistance=0)
			AND b.NCheckOutIsMust=1 AND COALESCE(b.EarlyMinute,0)=0 AND (b.CheckOutDistance&lt;=b.LargestDistance OR b.CheckOutDistance=0) THEN 1 ELSE 0 END) NumberOfNightShifts
			FROM T_ProjectMember a
			cross join ('||MonthdaysSql||') k '
			into Sql1;

			SELECT  ' LEFT JOIN ( '||UserAttendanceRecordSql||' ) b ON a.UserCode=b.UserCode AND b.AttendanceDate=k.AttendanceDate
			left join(select a.Creator,to_char(a.StartTime,''YYYY-MM-DD'') LeaveDate,sum(a.HourNum) HourNum from T_LeaveApplyForm a inner join T_WorkFlow b on a.ID=b.RelatedID
			where b.Status in (''Passed'',''CaseClosed'') and b.WLType = ''AttendanceManagement'' and  b.RelatedType = ''LeaveOfAbsence''
			group by a.Creator,to_char(a.StartTime,''YYYY-MM-DD'')) l on l.Creator=a.UserCode and k.AttendanceDate=l.LeaveDate
			WHERE a.DepartCode = '''||DepartCode||''' AND a.UserName = '''||UserName||'''
			GROUP BY a.UserCode) a  ' into Sql2;

			SELECT array_to_string(ARRAY(SELECT Type || ' int' FROM T_LeaveType order by sortnumber),',') into LeaveSql;

			select ' LEFT JOIN (select * from crosstab(
			''SELECT a.UserCode EmployeeID1,c.Type LeaveType,COALESCE(b.HourNum,0) HourNum
			FROM T_ProjectMember a CROSS JOIN T_LeaveType c
			LEFT JOIN (select a.* from T_LeaveApplyForm a inner join T_WorkFlow b on a.ID=b.RelatedID
			where b.Status in (''''Passed'''',''''CaseClosed'''') and b.WLType = ''''AttendanceManagement'''' and  b.RelatedType = ''''LeaveOfAbsence'''') b ON a.UserCode=b.Creator AND c.Type=b.LeaveType AND to_date('''''||EndDate||''''',''''YYYY-MM-DD'''')&lt;b.EndTime AND to_date('''''||StartDate||''''',''''YYYY-MM-DD'''')&gt;=b.StartTime
			WHERE a.DepartCode = '''''||DepartCode||''''' AND a.UserName = '''''||UserName||''''' '', ''SELECT Type FROM T_LeaveType order by sortnumber'')
			as t(EmployeeID1 varchar(20),{0})
			) b ON a.EmployeeID=b.EmployeeID1
			LEFT JOIN ( ' into sql3;

			SELECT REPLACE(Sql3,'{0}',LeaveSql) into Sql3;

			select string_agg('"'||ex || '" text',',') from(
			select * from (SELECT EXTRACT(DAY FROM(generate_series(StartDate::date, EndDate::date, '1 day'::interval)::date)) as ex) a order by a.ex
			) itable into SqlCol;

			select 'select * from crosstab(''SELECT a.UserCode,DATE_PART(''''day'''',a.AttendanceDate::date) AttendanceDay,
			CASE WHEN a.IsHoliday=1 THEN CASE WHEN b.UserCode IS NOT NULL THEN ''''RestAndClockIn/Out'''' ELSE ''''Rest'''' END
			ELSE
			CASE WHEN a.LeaveDetail IS NOT NULL THEN a.LeaveDetail
			WHEN b.UserCode IS NULL THEN ''''Absenteeism''''
			WHEN (b.CheckInAddressLen&gt;0 AND b.LateMinute=0 AND (b.CheckInDistance&lt;=b.LargestDistance or b.CheckInDistance=0))
			THEN CASE WHEN (b.CheckOutAddressLen&gt;0 AND b.EarlyMinute=0 AND (b.CheckOutDistance&lt;=b.LargestDistance or b.CheckOutDistance=0))  THEN ''''Normal''''
			WHEN b.CheckOutAddressLen=0 THEN ''''Missed Clock-Out''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.EarlyMinute&gt;0 AND b.CheckOutDistance&gt;b.LargestDistance THEN ''''FieldWorkAfterHours，LeaveEarlyFromWork''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.EarlyMinute&gt;0 THEN ''''LeaveEarlyFromWork''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.CheckOutDistance&gt;b.LargestDistance THEN ''''FieldWorkAfterHours'''' END
			WHEN b.CheckInAddressLen=0
			THEN CASE WHEN (b.CheckOutAddressLen&gt;0 AND b.EarlyMinute=0 AND (b.CheckOutDistance&lt;=b.LargestDistance or b.CheckOutDistance=0))  THEN ''''MissedClock-In''''
			WHEN b.CheckOutAddressLen=0 THEN ''''Absenteeism''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.EarlyMinute&gt;0 AND b.CheckOutDistance&gt;b.LargestDistance THEN ''''MissedClock-In，FieldWorkAfterHours，LeaveEarlyFromWork''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.EarlyMinute&gt;0 THEN ''''MissedClock-In，LeaveEarlyFromWork''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.CheckOutDistance&gt;b.LargestDistance THEN ''''MissedClock-In，FieldWorkAfterHours'''' END
			WHEN b.CheckInAddressLen&gt;0 AND b.LateMinute&gt;0 AND b.CheckInDistance&gt;b.LargestDistance
			THEN CASE WHEN (b.CheckOutAddressLen&gt;0 AND b.EarlyMinute=0 AND (b.CheckOutDistance&lt;=b.LargestDistance or b.CheckOutDistance=0))  THEN ''''FieldWorkDuringOfficeHours''''
			WHEN b.CheckOutAddressLen=0 THEN ''''FieldWorkDuringOfficeHours，Missed Clock-Out''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.EarlyMinute&gt;0 AND b.CheckOutDistance&gt;b.LargestDistance THEN ''''FieldWorkDuringOfficeHours，FieldWorkAfterHours，LeaveEarlyFromWork''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.EarlyMinute&gt;0 THEN ''''FieldWorkDuringOfficeHours，LeaveEarlyFromWork''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.CheckOutDistance&gt;b.LargestDistance THEN ''''FieldWorkDuringOfficeHours，FieldWorkAfterHours'''' END
			WHEN b.CheckInAddressLen&gt;0 AND b.LateMinute&gt;0 AND (b.CheckInDistance&lt;=b.LargestDistance or b.CheckInDistance=0)
			THEN CASE WHEN (b.CheckOutAddressLen&gt;0 AND b.EarlyMinute=0 AND (b.CheckOutDistance&lt;=b.LargestDistance or b.CheckOutDistance=0))  THEN ''''LateArrivalToWork''''
			WHEN b.CheckOutAddressLen=0 THEN ''''LateArrivalToWork，Missed Clock-Out''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.EarlyMinute&gt;0 AND b.CheckOutDistance&gt;b.LargestDistance THEN ''''LateArrivalToWork，FieldWorkAfterHours，LeaveEarlyFromWork''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.EarlyMinute&gt;0 THEN ''''LateArrivalToWork，LeaveEarlyFromWork''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.CheckOutDistance&gt;b.LargestDistance THEN ''''LateArrivalToWork，FieldWorkAfterHours'''' END
			WHEN b.CheckInAddressLen&gt;0 AND b.LateMinute=0 AND b.CheckInDistance&gt;b.LargestDistance
			THEN CASE WHEN (b.CheckOutAddressLen&gt;0 AND b.EarlyMinute=0 AND (b.CheckOutDistance&lt;=b.LargestDistance or b.CheckOutDistance=0))  THEN ''''FieldWorkDuringOfficeHours''''
			WHEN b.CheckOutAddressLen=0 THEN ''''FieldWorkDuringOfficeHours，Missed Clock-Out''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.EarlyMinute&gt;0 AND b.CheckOutDistance&gt;b.LargestDistance THEN ''''FieldWorkDuringOfficeHours，FieldWorkAfterHours，LeaveEarlyFromWork''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.EarlyMinute&gt;0 THEN ''''FieldWorkDuringOfficeHours，LeaveEarlyFromWork''''
			WHEN b.CheckOutAddressLen&gt;0 AND b.CheckOutDistance&gt;b.LargestDistance THEN ''''FieldWorkDuringOfficeHours，FieldWorkAfterHours'''' END
			END
			END|| case when a.OvertimeDetail is not null then '''' ''''||a.OvertimeDetail else '''''''' end Detail  FROM (
			SELECT a.UserCode,k.AttendanceDate,MIN(k.IsHoliday)IsHoliday,
			trim(leading '''','''' from (
			select string_agg(qjia,'''''''') qjv from (
			select DISTINCT '''',''''||LeaveType||'''' ''''||to_char(StartTime,''''YYYY-MM-DD'''')||''''到''''||to_char(EndTime,''''YYYY-MM-DD'''') as qjia
			FROM (
			select a.* from T_LeaveApplyForm a inner join T_WorkFlow b on a.ID=b.RelatedID
			where b.Status in (''''Passed'''',''''CaseClosed'''') and b.WLType = ''''AttendanceManagement'''' and  b.RelatedType = ''''LeaveOfAbsence'''') m WHERE m.Creator = a.UserCode AND to_date(k.AttendanceDate,''''YYYY-MM-DD'''') BETWEEN m.StartTime AND m.EndTime) lty))LeaveDetail,
			trim(leading '''','''' from (
			select DISTINCT '''',''''||OvertimeType||'''' ''''||SUBSTRING(COALESCE(OverTimeCheckInTime,''''''''),1,16)||''''到''''||SUBSTRING(COALESCE(OverTimeCheckOutTime,''''''''),1,16)
			FROM (
			select a.* from T_OvertimeApplyForm a inner join T_WorkFlow b on a.ID=b.RelatedID
			where b.Status in (''''Passed'''',''''CaseClosed'''') and b.WLType = ''''AttendanceManagement'''' and  b.RelatedType = ''''Overtime'''') m WHERE m.Creator = a.UserCode AND to_date(k.AttendanceDate,''''YYYY-MM-DD'''') BETWEEN m.StartTime AND m.EndTime)) OvertimeDetail
			FROM T_ProjectMember a
			CROSS JOIN (
			SELECT to_char(a.AttendanceDate, ''''YYYY-MM-DD'''') AttendanceDate,case WHEN c.Id is not null then 0
			when DATE_PART(''''dow'''',a.AttendanceDate) = 0 OR DATE_PART(''''dow'''',a.AttendanceDate)=6 OR b.ID IS NOT NULL THEN 1 ELSE 0 END IsHoliday
			FROM (SELECT generate_series(to_date('''''||StartDate||''''', ''''YYYY-MM-DD''''),to_date('''''||EndDate||''''', ''''YYYY-MM-DD''''),INTERVAL ''''1 day'''') as AttendanceDate) a
			LEFT JOIN T_FestivalsDaySet b ON a.AttendanceDate=b.FestivalsDate
			left join T_FestivalsExchangeDaySet c on a.AttendanceDate=c.ExchangeDate ) k
			LEFT JOIN (select a.* from T_LeaveApplyForm a inner join T_WorkFlow b on a.ID=b.RelatedID
			where b.Status in (''''Passed'''',''''CaseClosed'''') and b.WLType = ''''AttendanceManagement'''' and  b.RelatedType = ''''LeaveOfAbsence'''') b
			ON a.UserCode=b.Creator AND to_date(k.AttendanceDate,''''YYYY-MM-DD'''') BETWEEN b.StartTime AND b.EndTime
			LEFT JOIN (select a.* from T_OvertimeApplyForm a inner join T_WorkFlow b on a.ID=b.RelatedID
			where b.Status in (''''Passed'''',''''CaseClosed'''') and b.WLType = ''''AttendanceManagement'''' and  b.RelatedType = ''''Overtime'''') c
			ON a.UserCode=c.Creator AND to_date(k.AttendanceDate,''''YYYY-MM-DD'''') BETWEEN c.StartTime AND c.EndTime
			WHERE a.DepartCode = '''''||DepartCode||''''' AND a.UserName = '''''||UserName||'''''
			GROUP BY a.UserCode,k.AttendanceDate) a
			LEFT JOIN (
			SELECT UserCode,to_char(AttendanceDate,''''YYYY-MM-DD'''') AttendanceDate,LateMinute,EarlyMinute,LargestDistance,
			CASE WHEN NCheckInIsMust=''''YES'''' THEN 1 ELSE 0 END NCheckInIsMust,CASE WHEN NCheckOutIsMust=''''YES'''' THEN 1 ELSE 0 END NCheckOutIsMust,
			CASE WHEN MCheckInIsMust=''''YES'''' THEN MCheckIn
			WHEN NCheckInIsMust=''''YES'''' THEN NCheckIn
			ELSE NULL END CheckIn,
			CASE WHEN ACheckOutIsMust=''''YES'''' THEN ACheckOut
			WHEN NCheckOutIsMust=''''YES'''' THEN NCheckOut
			ELSE NULL END CheckOut,
			CASE WHEN MCheckInIsMust=''''YES'''' THEN COALESCE(MCheckInAddress,'''''''')
			WHEN NCheckInIsMust=''''YES'''' THEN COALESCE(NCheckInAddress,'''''''')
			ELSE NULL END CheckInAddress,
			CASE WHEN MCheckInIsMust=''''YES'''' THEN COALESCE(char_length(MCheckInAddress),0)
			WHEN NCheckInIsMust=''''YES'''' THEN COALESCE(char_length(NCheckInAddress),0)
			ELSE 0 END CheckInAddressLen,
			CASE WHEN ACheckOutIsMust=''''YES'''' THEN COALESCE(ACheckOutAddress,'''''''')
			WHEN NCheckOutIsMust=''''YES'''' THEN COALESCE(NCheckOutAddress,'''''''')
			ELSE NULL END CheckOutAddress,
			CASE WHEN ACheckOutIsMust=''''YES'''' THEN COALESCE(char_length(ACheckOutAddress),0)
			WHEN NCheckOutIsMust=''''YES'''' THEN COALESCE(char_length(NCheckOutAddress),0)
			ELSE 0 END CheckOutAddressLen,
			CASE WHEN MCheckInIsMust=''''YES'''' THEN MCheckInDistance
			WHEN NCheckInIsMust=''''YES'''' THEN NCheckInDistance
			ELSE NULL END CheckInDistance,
			CASE WHEN ACheckOutIsMust=''''YES'''' THEN ACheckOutDistance
			WHEN NCheckOutIsMust=''''YES'''' THEN NCheckOutDistance
			ELSE NULL END CheckOutDistance
			FROM T_UserAttendanceRecord
			where AttendanceDate &gt;= '''''||StartDate||''''' AND  AttendanceDate&lt; to_date('''''||EndDate||''''',''''YYYY-MM-DD'''')+INTERVAL ''''1 day''''  ) b
			ON a.UserCode=b.UserCode AND b.AttendanceDate=a.AttendanceDate'',''select * from ( SELECT EXTRACT(DAY FROM(generate_series('''''||StartDate||'''''::date,'''''||EndDate||'''''::date, ''''1 day''''::interval)::date)) as ex) a order by a.ex''
			) AS  t(usercode varchar(20),{0})' into SqlDetail;

			select replace( SqlDetail , '{0}' , SqlCol) into SqlDetail;

			SELECT array_to_string(ARRAY(SELECT Type || ' int' FROM T_OvertimeType),',') into OvertimeSql;

			--按分钟计算实际Overtime时间 误差多加1分钟  因为午夜打卡时间分别为23:59和00:01
			SELECT ') c ON a.EmployeeID=c.UserCode
			LEFT JOIN (select * from crosstab(
			''SELECT a.UserCode EmployeeID2,c.Type OvertimeType,FLOOR(COALESCE(DATEDIFF(''''mi'''',
			CASE WHEN b.OverTimeCheckInTime::timestamp without time zone&lt;b.StartTime THEN b.StartTime ELSE b.OverTimeCheckInTime::timestamp without time zone END,
			CASE WHEN b.OverTimeCheckOutTime::timestamp without time zone&gt;b.EndTime THEN b.EndTime ELSE b.OverTimeCheckOutTime::timestamp without time zone END)+1,0)*1.0/60) HourNum
			FROM T_ProjectMember a
			CROSS JOIN T_OvertimeType c
			LEFT JOIN (select a.* from T_OvertimeApplyForm a inner join T_WorkFlow b on a.ID=b.RelatedID
			where b.Status in (''''Passed'''',''''CaseClosed'''') and b.WLType = ''''AttendanceManagement'''' and  b.RelatedType = ''''Overtime'''') b ON a.UserCode=b.Creator AND '''''||StartDate||'''''&lt;b.EndTime AND '''''||EndDate||'''''&gt;=b.StartTime
			WHERE a.DepartCode = '''''||DepartCode||''''' AND a.UserName = '''''||UserName||''''' ''
			,''SELECT distinct c.Type from T_OvertimeType c order by 1 '')
			as t(EmployeeID2 varchar(20),WeekdayOvertime int,HolidayOvertime int,WeekendOvertime int)
			) d ON a.EmployeeID=d.EmployeeID2
			LEFT JOIN (		select a.Creator,SUM(COALESCE(a.HourNum,0)) HourNum from T_LeaveApplyForm a inner join T_WorkFlow b on a.ID=b.RelatedID
			where b.Status in (''Passed'',''CaseClosed'') and b.WLType = ''AttendanceManagement'' and  b.RelatedType = ''LeaveOfAbsence'' AND '''||StartDate||'''::timestamp without time zone&lt;a.EndTime AND '''||EndDate||'''::timestamp without time zone&gt;=a.StartTime
			GROUP BY a.Creator) f ON a.EmployeeID=f.Creator
			order by a.Department,a.UserName' into Sql4;

			SELECT REPLACE(Sql4,'{0}',OvertimeSql) into Sql4;

			select Sql1||Sql2||Sql3||SqlDetail||Sql4 into sqltotal;
			execute sqltotal into recreport;
			SELECT json_agg(row_to_json(recreport)) into jsonreport;

			RETURN jsonreport;

			END;
			$BODY$;

			ALTER FUNCTION public.f_userattendancereport(text, text, text, text)
			OWNER TO postgres;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3681</ID>
    <SQLText>
			-- View: public.v_projectmember_workload

			-- DROP VIEW public.v_projectmember_workload;

			CREATE OR REPLACE VIEW public.v_projectmember_workload
			AS
			SELECT 'Project'::text AS type,
			t_project.pmcode AS usercode,
			t_project.pmname AS username,
			t_project.projectid::character varying(30) AS projectid,
			t_project.projectname,
			t_project.begindate,
			t_project.enddate,
			t_project.status
			FROM t_project
			WHERE t_project.status::bpchar &lt;&gt; ALL (ARRAY['Closed'::bpchar, 'Completed'::bpchar, 'CaseClosed'::bpchar, 'Cancel'::bpchar, 'Deleted'::bpchar, 'Archived'::bpchar, 'Rejected'::bpchar, 'Suspended'::bpchar])
			UNION
			SELECT 'Project'::text AS type,
			a.usercode,
			a.username,
			a.projectid::character varying(30) AS projectid,
			a.projectname,
			b.begindate,
			b.enddate,
			b.status
			FROM t_relateduser a,
			t_project b
			WHERE a.projectid = b.projectid AND (a.projectid IN ( SELECT t_project.projectid
			FROM t_project
			WHERE t_project.status::bpchar &lt;&gt; ALL (ARRAY['Closed'::bpchar, 'Completed'::bpchar, 'CaseClosed'::bpchar, 'Cancel'::bpchar, 'Deleted'::bpchar, 'Archived'::bpchar, 'Rejected'::bpchar, 'Suspended'::bpchar]))) AND (a.projectname::bpchar IN ( SELECT t_project.projectname
			FROM t_project
			WHERE t_project.status::bpchar &lt;&gt; ALL (ARRAY['Closed'::bpchar, 'Completed'::bpchar, 'CaseClosed'::bpchar, 'Cancel'::bpchar, 'Deleted'::bpchar, 'Archived'::bpchar, 'Rejected'::bpchar, 'Suspended'::bpchar])))
			UNION
			SELECT 'Plan'::text AS type,
			a.usercode,
			a.username,
			(('Project:'::text || b.projectid::character varying(30)::text) || ' Plan:'::text) || b.id::character varying(30)::text AS projectid,
			b.name AS projectname,
			b.start_date AS begindate,
			b.end_date AS enddate,
			b.status
			FROM t_planmember a,
			t_impleplan b
			WHERE a.planid = b.id AND b.type::bpchar = 'InUse'::bpchar
			UNION
			SELECT 'Plan'::text AS type,
			t_plan.usercode,
			t_plan.username,
			t_plan.planid::character varying(30) AS projectid,
			t_plan.planname AS projectname,
			t_plan.starttime AS begindate,
			t_plan.endtime AS enddate,
			t_plan.status
			FROM t_plan
			UNION
			SELECT 'Task'::text AS type,
			a.operatorcode AS usercode,
			a.operatorname AS username,
			(('Project:'::text || b.projectid::character varying(30)::text) || ' Task:'::text) || a.taskid::character varying(30)::text AS projectid,
			a.task AS projectname,
			a.begindate,
			a.enddate,
			b.status
			FROM t_taskassignrecord a,
			t_projecttask b
			WHERE a.taskid = b.taskid
			UNION
			SELECT 'Requirement'::text AS type,
			t_reqassignrecord.operatorcode AS usercode,
			t_reqassignrecord.operatorname AS username,
			t_reqassignrecord.reqid::character varying(30) AS projectid,
			t_reqassignrecord.reqname AS projectname,
			t_reqassignrecord.begindate,
			t_reqassignrecord.enddate,
			t_reqassignrecord.status
			FROM t_reqassignrecord
			UNION
			SELECT 'Meeting'::text AS type,
			a.usercode,
			a.username,
			a.meetingid::character varying(30) AS projectid,
			b.name AS projectname,
			b.begintime AS begindate,
			b.endtime AS enddate,
			b.status
			FROM t_meetingattendant a,
			t_meeting b
			WHERE a.meetingid = b.id;

			ALTER TABLE public.v_projectmember_workload
			OWNER TO postgres;

			GRANT ALL ON TABLE public.v_projectmember_workload TO postgres;
			GRANT SELECT ON TABLE public.v_projectmember_workload TO taketoppgdbreadonlyuser;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3682</ID>
    <SQLText>
			Update T_ProModuleLevel Set IsDeleted = 'YES'
			Where PageName In ('TTProjectManHourIncomeAndExpenseReport.aspx','TTProjectManHourAndExpenseReport','TTProjectImplementTotalFinanceReport.aspx','TTProjectIncomeExpenseMain.aspx')
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3683</ID>
    <SQLText>
			Update T_ProModuleLevel Set IsDeleted = 'YES'
			Where PageName In ('TTProjectManHourAndExpenseReport.aspx','TTProjectManHourIncomeAndExpenseReport.aspx','TTProjectManHourAndExpenseReport','TTProjectImplementTotalFinanceReport.aspx','TTProjectIncomeExpenseMain.aspx')
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3684</ID>
    <SQLText>
			Update T_ProModuleLevel Set IsDeleted = 'YES'
			Where PageName In ('TTProjectManHourAndExpenseReport.aspx','TTProjectManHourIncomeAndExpenseReport.aspx','TTGoodsCheckInOutInventoryReport.aspx','TTProjectImplementTotalFinanceReport.aspx','TTProjectIncomeExpenseMain.aspx')
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3685</ID>
    <SQLText>
			-- View: public.v_projectconstractamountincome

			-- DROP VIEW public.v_projectconstractamountincome;

			CREATE OR REPLACE VIEW public.v_projectconstractamountincome
			AS
			SELECT a.relatedid AS projectid,
			COALESCE(a.constractcode, ''::character varying) AS constractcode,
			COALESCE(a.totalreceivablesamount, 0::numeric) AS totalreceivablesamount,
			COALESCE(a.totalincome, 0::numeric) AS totalincome,
			COALESCE(b.amount * c.exchangerate, 0::numeric) AS constractamount
			FROM v_projectincomesum a
			FULL JOIN t_constract b ON a.constractcode::text = b.constractcode::text
			FULL JOIN t_currencytype c ON b.currency::text = c.type::text
			WHERE COALESCE(a.relatedid, 0::bigint) &lt;&gt; 0;

			ALTER TABLE public.v_projectconstractamountincome
			OWNER TO postgres;

			GRANT ALL ON TABLE public.v_projectconstractamountincome TO postgres;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3686</ID>
    <SQLText>
			-- View: public.v_projectincomeexpensesum

			-- DROP VIEW public.v_projectincomeexpensesum;

			CREATE OR REPLACE VIEW public.v_projectincomeexpensesum
			AS
			SELECT a.projectid,
			COALESCE(a.constractamount, 0::numeric) AS constractamount,
			COALESCE(a.totalreceivablesamount, 0::numeric) AS totalreceivablesamount,
			COALESCE(a.totalincome, 0::numeric) AS totalincome,
			COALESCE(b.totalexpense, 0::numeric) AS totalexpense,
			COALESCE(a.totalincome, 0::numeric) - COALESCE(b.totalexpense, 0::numeric) AS incomeexpensebalance,
			COALESCE(a.constractamount, 0::numeric) - COALESCE(a.totalincome, 0::numeric) AS contractreceiverbalance,
			COALESCE(a.totalreceivablesamount, 0::numeric) - COALESCE(a.totalincome, 0::numeric) AS receivablereceiverbalance
			FROM v_projectconstractamountincome a
			FULL JOIN v_projectexpensesum b ON a.projectid = b.projectid
			WHERE COALESCE(a.projectid, 0::bigint) &lt;&gt; 0;

			ALTER TABLE public.v_projectincomeexpensesum
			OWNER TO postgres;

			GRANT ALL ON TABLE public.v_projectincomeexpensesum TO postgres;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3687</ID>
    <SQLText>
			-- T_ProjectCostManage 表
			CREATE INDEX idx_t_projectcostmanage_projectid_type ON T_ProjectCostManage(ProjectID, Type);

			-- T_Project 表
			CREATE INDEX idx_t_project_pmcode ON T_Project(PMCode);
			CREATE INDEX idx_t_project_startup_confirm ON T_Project(ProjectStartupNeedSupperConfirm, ConfirmedBySupper);
			CREATE INDEX idx_t_project_status ON T_Project(Status);
			CREATE INDEX idx_t_project_projectid ON T_Project(ProjectID);

			-- 组合索引（可选）
			CREATE INDEX idx_t_project_filter ON T_Project(PMCode, ProjectStartupNeedSupperConfirm, ConfirmedBySupper, Status);
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3688</ID>
    <SQLText>
			-- T_WorkFlowStepDetail 表
			CREATE INDEX idx_t_workflowstepdetail_wlid ON T_WorkFlowStepDetail(WLID);
			CREATE INDEX idx_t_workflowstepdetail_status ON T_WorkFlowStepDetail(Status);
			CREATE INDEX idx_t_workflowstepdetail_operatorcode ON T_WorkFlowStepDetail(OperatorCode);
			CREATE INDEX idx_t_workflowstepdetail_isoperator ON T_WorkFlowStepDetail(IsOperator);
			CREATE INDEX idx_t_workflowstepdetail_stepid ON T_WorkFlowStepDetail(StepID);

			-- 组合索引（可选）
			CREATE INDEX idx_t_workflowstepdetail_status_operatorcode ON T_WorkFlowStepDetail(Status, OperatorCode);
			CREATE INDEX idx_t_workflowstepdetail_wlid_status ON T_WorkFlowStepDetail(WLID, Status);

			-- T_WorkFlow 表
			CREATE INDEX idx_t_workflow_wlid ON T_WorkFlow(WLID);
			CREATE INDEX idx_t_workflow_status ON T_WorkFlow(Status);
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3689</ID>
    <SQLText>
			-- 常用查询字段索引
			CREATE INDEX idx_t_impleplan_projectid ON public.t_impleplan(projectid);
			CREATE INDEX idx_t_impleplan_workid ON public.t_impleplan(workid);
			CREATE INDEX idx_t_impleplan_parentid ON public.t_impleplan(parentid);
			CREATE INDEX idx_t_impleplan_priorid ON public.t_impleplan(priorid);
			CREATE INDEX idx_t_impleplan_verid ON public.t_impleplan(verid);

			-- 状态字段索引
			CREATE INDEX idx_t_impleplan_status ON public.t_impleplan(status);

			-- 时间字段索引
			CREATE INDEX idx_t_impleplan_start_date ON public.t_impleplan(start_date);
			CREATE INDEX idx_t_impleplan_end_date ON public.t_impleplan(end_date);
			CREATE INDEX idx_t_impleplan_updatetime ON public.t_impleplan(updatetime);

			-- 创建者和更新者字段索引
			CREATE INDEX idx_t_impleplan_creatorcode ON public.t_impleplan(creatorcode);
			CREATE INDEX idx_t_impleplan_updatemancode ON public.t_impleplan(updatemancode);
			CREATE INDEX idx_t_impleplan_leadercode ON public.t_impleplan(leadercode);

			-- 组合索引
			CREATE INDEX idx_t_impleplan_projectid_status ON public.t_impleplan(projectid, status);
			CREATE INDEX idx_t_impleplan_start_end_date ON public.t_impleplan(start_date, end_date);

			-- 排序字段索引
			CREATE INDEX idx_t_impleplan_sortnumber ON public.t_impleplan(sortnumber);
			CREATE INDEX idx_t_impleplan_priority ON public.t_impleplan(priority);

			-- 文本字段索引
			CREATE INDEX idx_t_impleplan_name ON public.t_impleplan(name);
			CREATE INDEX idx_t_impleplan_remark ON public.t_impleplan(remark);

			-- 部分索引
			CREATE INDEX idx_t_impleplan_status_active ON public.t_impleplan(status) WHERE status = 'Active';

			-- 其他常用字段索引
			CREATE INDEX idx_t_impleplan_lockstatus ON public.t_impleplan(lockstatus);
			CREATE INDEX idx_t_impleplan_type ON public.t_impleplan(type);
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3690</ID>
    <SQLText>
			-- T_TaskAssignRecord 表
			CREATE INDEX idx_t_taskassignrecord_operatorcode ON public.t_taskassignrecord(operatorcode);
			CREATE INDEX idx_t_taskassignrecord_status ON public.t_taskassignrecord(status);
			CREATE INDEX idx_t_taskassignrecord_taskid ON public.t_taskassignrecord(taskid);
			CREATE INDEX idx_t_taskassignrecord_movetime ON public.t_taskassignrecord(movetime);

			-- 组合索引（可选）
			CREATE INDEX idx_t_taskassignrecord_operatorcode_status ON public.t_taskassignrecord(operatorcode, status);

			-- T_ProjectTask 表
			CREATE INDEX idx_t_projecttask_taskid ON public.t_projecttask(taskid);
			CREATE INDEX idx_t_projecttask_status ON public.t_projecttask(status);
			CREATE INDEX idx_t_projecttask_projectid ON public.t_projecttask(projectid);
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3691</ID>
    <SQLText>
			-- 1. 主键索引（已存在，无需额外创建）
			-- CONSTRAINT t_approveflow_pkey PRIMARY KEY (id)

			-- 2. 单列索引（针对常用于 WHERE 条件的列）
			CREATE INDEX idx_approveflow_relatedid ON public.t_approveflow (relatedid);
			CREATE INDEX idx_approveflow_stepid ON public.t_approveflow (stepid);
			CREATE INDEX idx_approveflow_usercode ON public.t_approveflow (usercode);
			CREATE INDEX idx_approveflow_receivercode ON public.t_approveflow (receivercode);
			CREATE INDEX idx_approveflow_priorid ON public.t_approveflow (priorid);
			CREATE INDEX idx_approveflow_routenumber ON public.t_approveflow (routenumber);

			-- 3. 复合索引（针对多列组合查询）
			CREATE INDEX idx_approveflow_relatedid_stepid ON public.t_approveflow (relatedid, stepid);
			CREATE INDEX idx_approveflow_usercode_operation ON public.t_approveflow (usercode, operation);
			CREATE INDEX idx_approveflow_receivercode_approvetime ON public.t_approveflow (receivercode, approvetime);

			-- 4. 时间范围索引（针对时间范围查询）
			CREATE INDEX idx_approveflow_assigntime ON public.t_approveflow (assigntime);
			CREATE INDEX idx_approveflow_approvetime ON public.t_approveflow (approvetime);

			-- 5. 覆盖索引（针对只查询索引列的查询）
			CREATE INDEX idx_approveflow_covering ON public.t_approveflow (relatedid, stepid) INCLUDE (usercode, operation);
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3692</ID>
    <SQLText>
			-- 1. 主键索引（已存在，无需额外创建）
			-- CONSTRAINT t_workflowtemplate_pkey PRIMARY KEY (temname)

			-- 2. 单列索引（针对常用于 WHERE 条件的列）
			CREATE INDEX idx_workflowtemplate_type ON public.t_workflowtemplate (type);
			CREATE INDEX idx_workflowtemplate_creatorcode ON public.t_workflowtemplate (creatorcode);
			CREATE INDEX idx_workflowtemplate_status ON public.t_workflowtemplate (status);
			CREATE INDEX idx_workflowtemplate_identifystring ON public.t_workflowtemplate (identifystring);
			CREATE INDEX idx_workflowtemplate_belongdepartcode ON public.t_workflowtemplate (belongdepartcode);
			CREATE INDEX idx_workflowtemplate_visible ON public.t_workflowtemplate (visible);
			CREATE INDEX idx_workflowtemplate_autoactive ON public.t_workflowtemplate (autoactive);
			CREATE INDEX idx_workflowtemplate_overtimeautoagree ON public.t_workflowtemplate (overtimeautoagree);

			-- 3. 复合索引（针对多列组合查询）
			CREATE INDEX idx_workflowtemplate_type_status ON public.t_workflowtemplate (type, status);
			CREATE INDEX idx_workflowtemplate_creatorcode_createtime ON public.t_workflowtemplate (creatorcode, createtime);
			CREATE INDEX idx_workflowtemplate_belongdepartcode_visible ON public.t_workflowtemplate (belongdepartcode, visible);

			-- 4. 时间范围索引（针对时间范围查询）
			CREATE INDEX idx_workflowtemplate_createtime ON public.t_workflowtemplate (createtime);

			-- 5. 覆盖索引（针对只查询索引列的查询）
			CREATE INDEX idx_workflowtemplate_covering ON public.t_workflowtemplate (type, status) INCLUDE (temname, createtime);
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3693</ID>
    <SQLText>
			-- 1. 主键索引（已存在，无需额外创建）
			-- CONSTRAINT t_workflowtstep_pkey PRIMARY KEY (stepid)

			-- 2. 单列索引（针对常用于 WHERE 条件的列）
			CREATE INDEX idx_workflowtstep_temname ON public.t_workflowtstep (temname);
			CREATE INDEX idx_workflowtstep_stepname ON public.t_workflowtstep (stepname);
			CREATE INDEX idx_workflowtstep_sortnumber ON public.t_workflowtstep (sortnumber);
			CREATE INDEX idx_workflowtstep_nextsortnumber ON public.t_workflowtstep (nextsortnumber);
			CREATE INDEX idx_workflowtstep_departrelated ON public.t_workflowtstep (departrelated);
			CREATE INDEX idx_workflowtstep_operatorselect ON public.t_workflowtstep (operatorselect);
			CREATE INDEX idx_workflowtstep_projectrelated ON public.t_workflowtstep (projectrelated);
			CREATE INDEX idx_workflowtstep_selfreview ON public.t_workflowtstep (selfreview);
			CREATE INDEX idx_workflowtstep_allowselfpass ON public.t_workflowtstep (allowselfpass);
			CREATE INDEX idx_workflowtstep_overtimeautoagree ON public.t_workflowtstep (overtimeautoagree);

			-- 3. 复合索引（针对多列组合查询）
			CREATE INDEX idx_workflowtstep_temname_sortnumber ON public.t_workflowtstep (temname, sortnumber);
			CREATE INDEX idx_workflowtstep_temname_nextsortnumber ON public.t_workflowtstep (temname, nextsortnumber);
			CREATE INDEX idx_workflowtstep_temname_departrelated ON public.t_workflowtstep (temname, departrelated);
			CREATE INDEX idx_workflowtstep_temname_projectrelated ON public.t_workflowtstep (temname, projectrelated);

			-- 4. 覆盖索引（针对只查询索引列的查询）
			CREATE INDEX idx_workflowtstep_covering ON public.t_workflowtstep (temname, sortnumber) INCLUDE (stepname, nextsortnumber);
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3694</ID>
    <SQLText>
			-- 1. 主键索引（已存在，无需额外创建）
			-- CONSTRAINT t_workflowtstepoperator_pkey PRIMARY KEY (id)

			-- 2. 单列索引（针对常用于 WHERE 条件的列）
			CREATE INDEX idx_workflowtstepoperator_stepid ON public.t_workflowtstepoperator (stepid);
			CREATE INDEX idx_workflowtstepoperator_actorgroup ON public.t_workflowtstepoperator (actorgroup);
			CREATE INDEX idx_workflowtstepoperator_actor ON public.t_workflowtstepoperator (actor);
			CREATE INDEX idx_workflowtstepoperator_temname ON public.t_workflowtstepoperator (temname);
			CREATE INDEX idx_workflowtstepoperator_identifystring ON public.t_workflowtstepoperator (identifystring);
			CREATE INDEX idx_workflowtstepoperator_requisite ON public.t_workflowtstepoperator (requisite);

			-- 3. 复合索引（针对多列组合查询）
			CREATE INDEX idx_workflowtstepoperator_stepid_actor ON public.t_workflowtstepoperator (stepid, actor);
			CREATE INDEX idx_workflowtstepoperator_temname_actorgroup ON public.t_workflowtstepoperator (temname, actorgroup);
			CREATE INDEX idx_workflowtstepoperator_temname_actor ON public.t_workflowtstepoperator (temname, actor);

			-- 4. 覆盖索引（针对只查询索引列的查询）
			CREATE INDEX idx_workflowtstepoperator_covering ON public.t_workflowtstepoperator (stepid, actor) INCLUDE (actorgroup, workdetail);
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3695</ID>
    <SQLText>
			-- 1. 主键索引（已存在，无需额外创建）
			-- CONSTRAINT t_workflowstep_pkey PRIMARY KEY (stepid)

			-- 2. 单列索引（针对常用于 WHERE 条件的列）
			CREATE INDEX idx_workflowstep_wlid ON public.t_workflowstep (wlid);
			CREATE INDEX idx_workflowstep_sortnumber ON public.t_workflowstep (sortnumber);
			CREATE INDEX idx_workflowstep_stepname ON public.t_workflowstep (stepname);
			CREATE INDEX idx_workflowstep_departrelated ON public.t_workflowstep (departrelated);
			CREATE INDEX idx_workflowstep_status ON public.t_workflowstep (status);

			-- 3. 复合索引（针对多列组合查询）
			CREATE INDEX idx_workflowstep_wlid_sortnumber ON public.t_workflowstep (wlid, sortnumber);
			CREATE INDEX idx_workflowstep_wlid_status ON public.t_workflowstep (wlid, status);
			CREATE INDEX idx_workflowstep_wlid_departrelated ON public.t_workflowstep (wlid, departrelated);

			-- 4. 时间范围索引（针对时间范围查询）
			CREATE INDEX idx_workflowstep_activetime ON public.t_workflowstep (activetime);

			-- 5. 覆盖索引（针对只查询索引列的查询）
			CREATE INDEX idx_workflowstep_covering ON public.t_workflowstep (wlid, sortnumber) INCLUDE (stepname, status);
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3696</ID>
    <SQLText>
			-- 1. 主键索引（已存在，无需额外创建）
			-- CONSTRAINT t_constract_pkey PRIMARY KEY (constractid)

			-- 2. 单列索引（针对常用于 WHERE 条件的列）
			CREATE INDEX idx_constract_constractcode ON public.t_constract (constractcode);
			CREATE INDEX idx_constract_type ON public.t_constract (type);
			CREATE INDEX idx_constract_signdate ON public.t_constract (signdate);
			CREATE INDEX idx_constract_departcode ON public.t_constract (departcode);
			CREATE INDEX idx_constract_status ON public.t_constract (status);
			CREATE INDEX idx_constract_partb ON public.t_constract (partb);
			CREATE INDEX idx_constract_recordtime ON public.t_constract (recordtime);
			CREATE INDEX idx_constract_relatedcustomercode ON public.t_constract (relatedcustomercode);
			CREATE INDEX idx_constract_relatedvendorcode ON public.t_constract (relatedvendorcode);
			CREATE INDEX idx_constract_parentcode ON public.t_constract (parentcode);
			CREATE INDEX idx_constract_warrantydate ON public.t_constract (warrantydate);
			CREATE INDEX idx_constract_biddingdate ON public.t_constract (biddingdate);

			-- 3. 复合索引（针对多列组合查询）
			CREATE INDEX idx_constract_type_status ON public.t_constract (type, status);
			CREATE INDEX idx_constract_departcode_status ON public.t_constract (departcode, status);
			CREATE INDEX idx_constract_signdate_status ON public.t_constract (signdate, status);
			CREATE INDEX idx_constract_partb_status ON public.t_constract (partb, status);
			CREATE INDEX idx_constract_relatedcustomercode_status ON public.t_constract (relatedcustomercode, status);
			CREATE INDEX idx_constract_relatedvendorcode_status ON public.t_constract (relatedvendorcode, status);

			-- 4. 时间范围索引（针对时间范围查询）
			CREATE INDEX idx_constract_startdate_enddate ON public.t_constract (startdate, enddate);

			-- 5. 覆盖索引（针对只查询索引列的查询）
			CREATE INDEX idx_constract_covering ON public.t_constract (constractcode, type) INCLUDE (constractname, signdate, status);
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3697</ID>
    <SQLText>
			-- 1. 主键索引（已存在，无需额外创建）
			-- CONSTRAINT t_constractreceivables_pkey PRIMARY KEY (id)

			-- 2. 单列索引（针对常用于 WHERE 条件的列）
			CREATE INDEX idx_constractreceivables_constractcode ON public.t_constractreceivables (constractcode);
			CREATE INDEX idx_constractreceivables_billcode ON public.t_constractreceivables (billcode);
			CREATE INDEX idx_constractreceivables_receivablestime ON public.t_constractreceivables (receivablestime);
			CREATE INDEX idx_constractreceivables_receivertime ON public.t_constractreceivables (receivertime);
			CREATE INDEX idx_constractreceivables_operatorcode ON public.t_constractreceivables (operatorcode);
			CREATE INDEX idx_constractreceivables_status ON public.t_constractreceivables (status);
			CREATE INDEX idx_constractreceivables_payer ON public.t_constractreceivables (payer);
			CREATE INDEX idx_constractreceivables_relatedsaleorderid ON public.t_constractreceivables (relatedsaleorderid);
			CREATE INDEX idx_constractreceivables_relatedid ON public.t_constractreceivables (relatedid);
			CREATE INDEX idx_constractreceivables_accountid ON public.t_constractreceivables (accountid);
			CREATE INDEX idx_constractreceivables_accountcode ON public.t_constractreceivables (accountcode);
			CREATE INDEX idx_constractreceivables_relatedprojectid ON public.t_constractreceivables (relatedprojectid);
			CREATE INDEX idx_constractreceivables_relatedplanid ON public.t_constractreceivables (relatedplanid);

			-- 3. 复合索引（针对多列组合查询）
			CREATE INDEX idx_constractreceivables_constractcode_status ON public.t_constractreceivables (constractcode, status);
			CREATE INDEX idx_constractreceivables_receivablestime_status ON public.t_constractreceivables (receivablestime, status);
			CREATE INDEX idx_constractreceivables_receivertime_status ON public.t_constractreceivables (receivertime, status);
			CREATE INDEX idx_constractreceivables_operatorcode_status ON public.t_constractreceivables (operatorcode, status);
			CREATE INDEX idx_constractreceivables_relatedid_status ON public.t_constractreceivables (relatedid, status);

			-- 4. 时间范围索引（针对时间范围查询）
			CREATE INDEX idx_constractreceivables_receivablestime_range ON public.t_constractreceivables (receivablestime);
			CREATE INDEX idx_constractreceivables_receivertime_range ON public.t_constractreceivables (receivertime);

			-- 5. 覆盖索引（针对只查询索引列的查询）
			CREATE INDEX idx_constractreceivables_covering ON public.t_constractreceivables (constractcode, status) INCLUDE (billcode, receivablesaccount, receivablestime);
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3698</ID>
    <SQLText>
			-- 1. 主键索引（已存在，无需额外创建）
			-- CONSTRAINT t_constractreceivablesrecord_pkey PRIMARY KEY (id)

			-- 2. 单列索引（针对常用于 WHERE 条件的列）
			CREATE INDEX idx_constractreceivablesrecord_receivablesid ON public.t_constractreceivablesrecord (receivablesid);
			CREATE INDEX idx_constractreceivablesrecord_constractcode ON public.t_constractreceivablesrecord (constractcode);
			CREATE INDEX idx_constractreceivablesrecord_receivertime ON public.t_constractreceivablesrecord (receivertime);
			CREATE INDEX idx_constractreceivablesrecord_operatorcode ON public.t_constractreceivablesrecord (operatorcode);
			CREATE INDEX idx_constractreceivablesrecord_payer ON public.t_constractreceivablesrecord (payer);
			CREATE INDEX idx_constractreceivablesrecord_relatedprojectid ON public.t_constractreceivablesrecord (relatedprojectid);

			-- 3. 复合索引（针对多列组合查询）
			CREATE INDEX idx_constractreceivablesrecord_receivablesid_receivertime ON public.t_constractreceivablesrecord (receivablesid, receivertime);
			CREATE INDEX idx_constractreceivablesrecord_constractcode_receivertime ON public.t_constractreceivablesrecord (constractcode, receivertime);
			CREATE INDEX idx_constractreceivablesrecord_operatorcode_receivertime ON public.t_constractreceivablesrecord (operatorcode, receivertime);
			CREATE INDEX idx_constractreceivablesrecord_payer_receivertime ON public.t_constractreceivablesrecord (payer, receivertime);

			-- 4. 时间范围索引（针对时间范围查询）
			CREATE INDEX idx_constractreceivablesrecord_receivertime_range ON public.t_constractreceivablesrecord (receivertime);

			-- 5. 覆盖索引（针对只查询索引列的查询）
			CREATE INDEX idx_constractreceivablesrecord_covering ON public.t_constractreceivablesrecord (receivablesid, constractcode) INCLUDE (receiveraccount, receivertime, operatorcode);
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3699</ID>
    <SQLText>
			-- 1. 主键索引（已存在，无需额外创建）
			-- CONSTRAINT t_constractpayable_pkey PRIMARY KEY (id)

			-- 2. 单列索引（针对常用于 WHERE 条件的列）
			CREATE INDEX idx_constractpayable_constractcode ON public.t_constractpayable (constractcode);
			CREATE INDEX idx_constractpayable_billcode ON public.t_constractpayable (billcode);
			CREATE INDEX idx_constractpayable_payabletime ON public.t_constractpayable (payabletime);
			CREATE INDEX idx_constractpayable_outofpockettime ON public.t_constractpayable (outofpockettime);
			CREATE INDEX idx_constractpayable_operatorcode ON public.t_constractpayable (operatorcode);
			CREATE INDEX idx_constractpayable_status ON public.t_constractpayable (status);
			CREATE INDEX idx_constractpayable_receiver ON public.t_constractpayable (receiver);
			CREATE INDEX idx_constractpayable_relatedsaleorderid ON public.t_constractpayable (relatedsaleorderid);
			CREATE INDEX idx_constractpayable_relatedid ON public.t_constractpayable (relatedid);
			CREATE INDEX idx_constractpayable_accountid ON public.t_constractpayable (accountid);
			CREATE INDEX idx_constractpayable_accountcode ON public.t_constractpayable (accountcode);
			CREATE INDEX idx_constractpayable_relatedprojectid ON public.t_constractpayable (relatedprojectid);
			CREATE INDEX idx_constractpayable_relatedplanid ON public.t_constractpayable (relatedplanid);

			-- 3. 复合索引（针对多列组合查询）
			CREATE INDEX idx_constractpayable_constractcode_status ON public.t_constractpayable (constractcode, status);
			CREATE INDEX idx_constractpayable_payabletime_status ON public.t_constractpayable (payabletime, status);
			CREATE INDEX idx_constractpayable_operatorcode_status ON public.t_constractpayable (operatorcode, status);
			CREATE INDEX idx_constractpayable_receiver_status ON public.t_constractpayable (receiver, status);
			CREATE INDEX idx_constractpayable_relatedid_status ON public.t_constractpayable (relatedid, status);

			-- 4. 时间范围索引（针对时间范围查询）
			CREATE INDEX idx_constractpayable_payabletime_range ON public.t_constractpayable (payabletime);
			CREATE INDEX idx_constractpayable_outofpockettime_range ON public.t_constractpayable (outofpockettime);

			-- 5. 覆盖索引（针对只查询索引列的查询）
			CREATE INDEX idx_constractpayable_covering ON public.t_constractpayable (constractcode, status) INCLUDE (billcode, payableaccount, payabletime);
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3700</ID>
    <SQLText>
			-- 1. 主键索引（已存在，无需额外创建）
			-- CONSTRAINT t_constractpayablerecord_pkey PRIMARY KEY (id)

			-- 2. 单列索引（针对常用于 WHERE 条件的列）
			CREATE INDEX idx_constractpayablerecord_payableid ON public.t_constractpayablerecord (payableid);
			CREATE INDEX idx_constractpayablerecord_constractcode ON public.t_constractpayablerecord (constractcode);
			CREATE INDEX idx_constractpayablerecord_outofpockettime ON public.t_constractpayablerecord (outofpockettime);
			CREATE INDEX idx_constractpayablerecord_operatorcode ON public.t_constractpayablerecord (operatorcode);
			CREATE INDEX idx_constractpayablerecord_receiver ON public.t_constractpayablerecord (receiver);
			CREATE INDEX idx_constractpayablerecord_relatedprojectid ON public.t_constractpayablerecord (relatedprojectid);

			-- 3. 复合索引（针对多列组合查询）
			CREATE INDEX idx_constractpayablerecord_payableid_outofpockettime ON public.t_constractpayablerecord (payableid, outofpockettime);
			CREATE INDEX idx_constractpayablerecord_constractcode_outofpockettime ON public.t_constractpayablerecord (constractcode, outofpockettime);
			CREATE INDEX idx_constractpayablerecord_operatorcode_outofpockettime ON public.t_constractpayablerecord (operatorcode, outofpockettime);
			CREATE INDEX idx_constractpayablerecord_receiver_outofpockettime ON public.t_constractpayablerecord (receiver, outofpockettime);

			-- 4. 时间范围索引（针对时间范围查询）
			CREATE INDEX idx_constractpayablerecord_outofpockettime_range ON public.t_constractpayablerecord (outofpockettime);

			-- 5. 覆盖索引（针对只查询索引列的查询）
			CREATE INDEX idx_constractpayablerecord_covering ON public.t_constractpayablerecord (payableid, constractcode) INCLUDE (outofpocketaccount, outofpockettime, operatorcode);
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3701</ID>
    <SQLText>
			-- 1. 单列索引（针对常用于 WHERE 条件的列）
			CREATE INDEX idx_projectmember_usercode ON public.t_projectmember (usercode);
			CREATE INDEX idx_projectmember_departcode ON public.t_projectmember (departcode);
			CREATE INDEX idx_projectmember_status ON public.t_projectmember (status);
			CREATE INDEX idx_projectmember_joindate ON public.t_projectmember (joindate);
			CREATE INDEX idx_projectmember_creatorcode ON public.t_projectmember (creatorcode);
			CREATE INDEX idx_projectmember_email ON public.t_projectmember (email);
			CREATE INDEX idx_projectmember_mobilephone ON public.t_projectmember (mobilephone);
			CREATE INDEX idx_projectmember_idcard ON public.t_projectmember (idcard);
			CREATE INDEX idx_projectmember_wechatopenid ON public.t_projectmember (wechatopenid);
			CREATE INDEX idx_projectmember_thirdpartloginid ON public.t_projectmember (thirdpartloginid);
			CREATE INDEX idx_projectmember_wechatuserid ON public.t_projectmember (wechatuserid);

			-- 2. 复合索引（针对多列组合查询）
			CREATE INDEX idx_projectmember_usercode_status ON public.t_projectmember (usercode, status);
			CREATE INDEX idx_projectmember_departcode_status ON public.t_projectmember (departcode, status);
			CREATE INDEX idx_projectmember_joindate_status ON public.t_projectmember (joindate, status);
			CREATE INDEX idx_projectmember_creatorcode_status ON public.t_projectmember (creatorcode, status);

			-- 3. 时间范围索引（针对时间范围查询）
			CREATE INDEX idx_projectmember_joindate_range ON public.t_projectmember (joindate);
			CREATE INDEX idx_projectmember_birthday_range ON public.t_projectmember (birthday);

			-- 4. 覆盖索引（针对只查询索引列的查询）
			CREATE INDEX idx_projectmember_covering ON public.t_projectmember (usercode, status) INCLUDE (username, departcode, email);
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3702</ID>
    <SQLText>
			-- 1. 主键索引（已存在，无需额外创建）
			-- CONSTRAINT t_project_pkey PRIMARY KEY (projectid)

			-- 2. 单列索引（针对常用于 WHERE 条件的列）
			CREATE INDEX idx_project_usercode ON public.t_project (usercode);
			CREATE INDEX idx_project_projectname ON public.t_project (projectname);
			CREATE INDEX idx_project_begindate ON public.t_project (begindate);
			CREATE INDEX idx_project_enddate ON public.t_project (enddate);
			CREATE INDEX idx_project_pmcode ON public.t_project (pmcode);
			CREATE INDEX idx_project_status ON public.t_project (status);
			CREATE INDEX idx_project_parentid ON public.t_project (parentid);
			CREATE INDEX idx_project_projecttype ON public.t_project (projecttype);
			CREATE INDEX idx_project_projectcode ON public.t_project (projectcode);
			CREATE INDEX idx_project_belongdepartcode ON public.t_project (belongdepartcode);
			CREATE INDEX idx_project_customername ON public.t_project (customername);
			CREATE INDEX idx_project_customerprojectcode ON public.t_project (customerprojectcode);

			-- 3. 复合索引（针对多列组合查询）
			CREATE INDEX idx_project_usercode_status ON public.t_project (usercode, status);
			CREATE INDEX idx_project_begindate_enddate ON public.t_project (begindate, enddate);
			CREATE INDEX idx_project_pmcode_status ON public.t_project (pmcode, status);
			CREATE INDEX idx_project_parentid_status ON public.t_project (parentid, status);
			CREATE INDEX idx_project_projecttype_status ON public.t_project (projecttype, status);

			-- 4. 时间范围索引（针对时间范围查询）
			CREATE INDEX idx_project_begindate_range ON public.t_project (begindate);
			CREATE INDEX idx_project_enddate_range ON public.t_project (enddate);

			-- 5. 覆盖索引（针对只查询索引列的查询）
			CREATE INDEX idx_project_covering ON public.t_project (projectid, projectname) INCLUDE (usercode, begindate, enddate, status);
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3703</ID>
    <SQLText>
			-- 1. 主键索引（已存在，无需额外创建）
			-- CONSTRAINT t_workflow_pkey PRIMARY KEY (wlid)

			-- 2. 单列索引（针对常用于 WHERE 条件的列）
			CREATE INDEX idx_workflow_wlname ON public.t_workflow (wlname);
			CREATE INDEX idx_workflow_wltype ON public.t_workflow (wltype);
			CREATE INDEX idx_workflow_relatedtype ON public.t_workflow (relatedtype);
			CREATE INDEX idx_workflow_relatedid ON public.t_workflow (relatedid);
			CREATE INDEX idx_workflow_temname ON public.t_workflow (temname);
			CREATE INDEX idx_workflow_creatorcode ON public.t_workflow (creatorcode);
			CREATE INDEX idx_workflow_createtime ON public.t_workflow (createtime);
			CREATE INDEX idx_workflow_status ON public.t_workflow (status);
			CREATE INDEX idx_workflow_businesstype ON public.t_workflow (businesstype);
			CREATE INDEX idx_workflow_businesscode ON public.t_workflow (businesscode);

			-- 3. 复合索引（针对多列组合查询）
			CREATE INDEX idx_workflow_wltype_status ON public.t_workflow (wltype, status);
			CREATE INDEX idx_workflow_relatedtype_relatedid ON public.t_workflow (relatedtype, relatedid);
			CREATE INDEX idx_workflow_creatorcode_createtime ON public.t_workflow (creatorcode, createtime);
			CREATE INDEX idx_workflow_temname_status ON public.t_workflow (temname, status);

			-- 4. 时间范围索引（针对时间范围查询）
			CREATE INDEX idx_workflow_createtime_range ON public.t_workflow (createtime);

			-- 5. 覆盖索引（针对只查询索引列的查询）
			CREATE INDEX idx_workflow_covering ON public.t_workflow (wlid, wlname) INCLUDE (wltype, relatedtype, relatedid, status);
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3704</ID>
    <SQLText>
			-- 1. 主键索引（已存在，无需额外创建）
			-- CONSTRAINT t_workflowstepdetail_pkey PRIMARY KEY (id)

			-- 2. 单列索引（针对常用于 WHERE 条件的列）
			CREATE INDEX idx_workflowstepdetail_stepid ON public.t_workflowstepdetail (stepid);
			CREATE INDEX idx_workflowstepdetail_wlid ON public.t_workflowstepdetail (wlid);
			CREATE INDEX idx_workflowstepdetail_operatorcode ON public.t_workflowstepdetail (operatorcode);
			CREATE INDEX idx_workflowstepdetail_status ON public.t_workflowstepdetail (status);
			CREATE INDEX idx_workflowstepdetail_checkingtime ON public.t_workflowstepdetail (checkingtime);
			CREATE INDEX idx_workflowstepdetail_actor ON public.t_workflowstepdetail (actor);
			CREATE INDEX idx_workflowstepdetail_creatorcode ON public.t_workflowstepdetail (creatorcode);

			-- 3. 复合索引（针对多列组合查询）
			CREATE INDEX idx_workflowstepdetail_stepid_status ON public.t_workflowstepdetail (stepid, status);
			CREATE INDEX idx_workflowstepdetail_wlid_status ON public.t_workflowstepdetail (wlid, status);
			CREATE INDEX idx_workflowstepdetail_operatorcode_status ON public.t_workflowstepdetail (operatorcode, status);
			CREATE INDEX idx_workflowstepdetail_actor_status ON public.t_workflowstepdetail (actor, status);

			-- 4. 时间范围索引（针对时间范围查询）
			CREATE INDEX idx_workflowstepdetail_checkingtime_range ON public.t_workflowstepdetail (checkingtime);

			-- 5. 覆盖索引（针对只查询索引列的查询）
			CREATE INDEX idx_workflowstepdetail_covering ON public.t_workflowstepdetail (stepid, wlid) INCLUDE (operatorcode, status, checkingtime);
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3705</ID>
    <SQLText>Update T_ProjectMember Set Status = 'Employed' Where Status = 'InPosition';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3706</ID>
    <SQLText>Update T_ProjectMember Set Status = 'Resign' Where Status = 'Depart';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3707</ID>
    <SQLText>Delete From  public.t_funinfordialbox Where InforName = '待处理的缺陷';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3708</ID>
    <SQLText>Update public.t_systemanalystchartrelateduser Set SortNumber = 0  Where ChartName = '在执行项目状态';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3709</ID>
    <SQLText>Update public.t_wltype Set HomeName = Type Where LangCode &lt;&gt; 'zh-CN';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3710</ID>
    <SQLText>
			CREATE TABLE IF NOT EXISTS public.t_constractradio
			(
			radio character varying(200) COLLATE pg_catalog."default" NOT NULL,
			CONSTRAINT t_contractradio_pkey PRIMARY KEY (radio)
			)
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3711</ID>
    <SQLText>
			Insert Into public.t_constractradio(Radio) values('ContractAgreedAdvancePaymentRatio');
			Insert Into public.t_constractradio(Radio) values('ContractAgreedMonthlyProgressPaymentRatio');
			Insert Into public.t_constractradio(Radio) values('ContractAgreedCompletionPaymentRatio');
			Insert Into public.t_constractradio(Radio) values('ContractAgreedSettlementPaymentRatio');
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3712</ID>
    <SQLText>Delete From public.t_constractradio;</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3713</ID>
    <SQLText>
			Insert Into public.t_constractradio(Radio) values('合同约定预付款比例');
			Insert Into public.t_constractradio(Radio) values('合同约定月进度支付比例');
			Insert Into public.t_constractradio(Radio) values('合同约定竣工支付比例');
			Insert Into public.t_constractradio(Radio) values('合同约定结算支付比例');
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3714</ID>
    <SQLText>
			SELECT setval(pg_get_serial_sequence('T_ExpenseClaim', 'ecid'), COALESCE((SELECT MAX(ecid) FROM T_ExpenseClaim), 0) + 1);
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3715</ID>
    <SQLText>
			UPdate T_ProModuleLevel Set ParentModule = 'TenderAndBiddingManagement' Where ParentModule = 'BiddingManagement';
			UPdate T_ProModuleLevel Set ModuleName = 'TenderAndBiddingManagement' Where ModuleName = 'BiddingManagement';
			UPdate T_ProModule Set ModuleName = 'TenderAndBiddingManagement' Where ModuleName = 'BiddingManagement';

			UPdate T_ProModuleLevel Set HomeModuleName = '招投标管理' Where ModuleName = 'TenderAndBiddingManagement' and LangCode = 'zh-CN';
			UPdate T_ProModuleLevel Set HomeModuleName = '招投標管理' Where ModuleName = 'TenderAndBiddingManagement' and LangCode = 'zh-tw';
			UPdate T_ProModuleLevel Set HomeModuleName = 'Bieterverfahrensmanagement' Where ModuleName = 'TenderAndBiddingManagement' and LangCode = 'de';
			UPdate T_ProModuleLevel Set HomeModuleName = 'GestiónDeLicitaciones' Where ModuleName = 'TenderAndBiddingManagement' and LangCode = 'es';
			UPdate T_ProModuleLevel Set HomeModuleName = 'GestionDesAppelsD’Offres' Where ModuleName = 'TenderAndBiddingManagement' and LangCode = 'fr';
			UPdate T_ProModuleLevel Set HomeModuleName = 'GestioneDelleGareD’Appalto' Where ModuleName = 'TenderAndBiddingManagement' and LangCode = 'it';
			UPdate T_ProModuleLevel Set HomeModuleName = 'にゅうさつ・ちょうたつかん' Where ModuleName = 'TenderAndBiddingManagement' and LangCode = 'ja';
			UPdate T_ProModuleLevel Set HomeModuleName = 'GestãoDeLicitaçõesEConcursos' Where ModuleName = 'TenderAndBiddingManagement' and LangCode = 'pt';

			UPdate T_ProModuleLevel Set HomeModuleName = 'Управлениетендерами' Where ModuleName = 'TenderAndBiddingManagement' and LangCode = 'ru';
			UPdate T_ProModuleLevel Set HomeModuleName = '입찰및계약관리' Where ModuleName = 'TenderAndBiddingManagement' and LangCode = 'ko';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3716</ID>
    <SQLText>UPdate T_ProModuleLevel Set HomeModuleName = 'TenderAndBiddingManagement' Where ModuleName = 'TenderAndBiddingManagement' and LangCode = 'en';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3717</ID>
    <SQLText>
			UPdate T_ProModuleLevel Set SortNumber = 100 Where ModuleName = 'BidRegistration';
			UPdate T_ProModuleLevel Set SortNumber = 101 Where ModuleName = 'BidConfirmation';
			UPdate T_ProModuleLevel Set SortNumber = 102 Where ModuleName = 'BidWarning';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3718</ID>
    <SQLText>SELECT setval(pg_get_serial_sequence('t_actorgroupdetail', 'groupid'), COALESCE((SELECT MAX(groupid) FROM t_actorgroupdetail), 0) + 1);</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3719</ID>
    <SQLText>
			DO $$
			DECLARE
			rec RECORD;
			seq_name TEXT;
			max_id BIGINT;
			sql_stmt TEXT;
			error_msg TEXT;
			BEGIN
			-- 查询所有包含序列列的表
			FOR rec IN
			SELECT
			n.nspname AS schema_name,
			c.relname AS table_name,
			a.attname AS column_name
			FROM pg_class c
			JOIN pg_attribute a ON a.attrelid = c.oid
			JOIN pg_namespace n ON n.oid = c.relnamespace
			WHERE c.relkind = 'r'
			AND n.nspname NOT IN ('pg_catalog', 'information_schema')
			AND a.attnum &gt; 0
			AND NOT a.attisdropped
			AND pg_get_serial_sequence(n.nspname || '.' || c.relname, a.attname) IS NOT NULL
			LOOP
			BEGIN
			-- 获取关联的序列名称
			seq_name := pg_get_serial_sequence(rec.schema_name || '.' || rec.table_name, rec.column_name);

			-- 查询表中该列的最大值
			EXECUTE 'SELECT COALESCE(MAX(' || quote_ident(rec.column_name) || '), 0) FROM ' ||
			quote_ident(rec.schema_name) || '.' || quote_ident(rec.table_name) INTO max_id;

			-- 生成并执行setval语句
			sql_stmt := 'SELECT setval(' || quote_literal(seq_name) || ', ' || (max_id + 1) || ', false);';
			EXECUTE sql_stmt;
			EXCEPTION WHEN OTHERS THEN
			GET STACKED DIAGNOSTICS error_msg = MESSAGE_TEXT;
			RAISE WARNING '处理表 %.% 的列 % 时出错: %',
			rec.schema_name, rec.table_name, rec.column_name, error_msg;
			END;
			END LOOP;

			RAISE NOTICE '序列重置操作完成';
			END $$;
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3720</ID>
    <SQLText>Update T_WorkFlow Set DiyNextStep = 'YES' Where DiyNextStep = 'Yes';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3721</ID>
    <SQLText>Update T_WorkFlow Set DiyNextStep = 'NO' Where DiyNextStep = 'No';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3722</ID>
    <SQLText>
			UPdate T_ProModuleLevel Set ParentModule = 'TenderAndBiddingManagement' Where ParentModule = 'BiddingManagement';
			UPdate T_ProModuleLevel Set ModuleName = 'TenderAndBiddingManagement' Where ModuleName = 'BiddingManagement';
			UPdate T_ProModule Set ModuleName = 'TenderAndBiddingManagement' Where ModuleName = 'BiddingManagement';

			UPdate T_ProModuleLevel Set HomeModuleName = '招投标管理' Where ModuleName = 'TenderAndBiddingManagement' and LangCode = 'zh-CN';
			UPdate T_ProModuleLevel Set HomeModuleName = '招投標管理' Where ModuleName = 'TenderAndBiddingManagement' and LangCode = 'zh-tw';
			UPdate T_ProModuleLevel Set HomeModuleName = 'Bieterverfahrensmanagement' Where ModuleName = 'TenderAndBiddingManagement' and LangCode = 'de';
			UPdate T_ProModuleLevel Set HomeModuleName = 'GestiónDeLicitaciones' Where ModuleName = 'TenderAndBiddingManagement' and LangCode = 'es';
			UPdate T_ProModuleLevel Set HomeModuleName = 'GestionDesAppelsD’Offres' Where ModuleName = 'TenderAndBiddingManagement' and LangCode = 'fr';
			UPdate T_ProModuleLevel Set HomeModuleName = 'GestioneDelleGareD’Appalto' Where ModuleName = 'TenderAndBiddingManagement' and LangCode = 'it';
			UPdate T_ProModuleLevel Set HomeModuleName = 'にゅうさつ・ちょうたつかん' Where ModuleName = 'TenderAndBiddingManagement' and LangCode = 'ja';
			UPdate T_ProModuleLevel Set HomeModuleName = 'GestãoDeLicitaçõesEConcursos' Where ModuleName = 'TenderAndBiddingManagement' and LangCode = 'pt';

			UPdate T_ProModuleLevel Set HomeModuleName = 'Управлениетендерами' Where ModuleName = 'TenderAndBiddingManagement' and LangCode = 'ru';
			UPdate T_ProModuleLevel Set HomeModuleName = '입찰및계약관리' Where ModuleName = 'TenderAndBiddingManagement' and LangCode = 'ko';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3723</ID>
    <SQLText>UPdate T_ProModuleLevel Set HomeModuleName = 'TenderAndBiddingManagement' Where ModuleName = 'TenderAndBiddingManagement' and LangCode = 'en';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3724</ID>
    <SQLText>
			UPdate T_ProModuleLevel Set SortNumber = 100 Where ModuleName = 'BidRegistration';
			UPdate T_ProModuleLevel Set SortNumber = 101 Where ModuleName = 'BidConfirmation';
			UPdate T_ProModuleLevel Set SortNumber = 102 Where ModuleName = 'BidWarning';
		</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3725</ID>
    <SQLText>UPdate T_ProModuleLevel Set ParentModule = 'TenderAndBiddingManagement' Where ParentModule = 'BiddingManagement'; UPdate T_ProModuleLevel Set ModuleName = 'TenderAndBiddingManagement' Where ModuleName = 'BiddingManagement'; UPdate T_ProModule Set ModuleName = 'TenderAndBiddingManagement' Where ModuleName = 'BiddingManagement'; UPdate T_ProModuleLevel Set HomeModuleName = '招投标管理' Where ModuleName = 'TenderAndBiddingManagement' and LangCode = 'zh-CN'; UPdate T_ProModuleLevel Set HomeModuleName = '招投標管理' Where ModuleName = 'TenderAndBiddingManagement' and LangCode = 'zh-tw'; UPdate T_ProModuleLevel Set HomeModuleName = 'Bieterverfahrensmanagement' Where ModuleName = 'TenderAndBiddingManagement' and LangCode = 'de'; UPdate T_ProModuleLevel Set HomeModuleName = 'GestiónDeLicitaciones' Where ModuleName = 'TenderAndBiddingManagement' and LangCode = 'es'; UPdate T_ProModuleLevel Set HomeModuleName = 'GestionDesAppelsD’Offres' Where ModuleName = 'TenderAndBiddingManagement' and LangCode = 'fr'; UPdate T_ProModuleLevel Set HomeModuleName = 'GestioneDelleGareD’Appalto' Where ModuleName = 'TenderAndBiddingManagement' and LangCode = 'it'; UPdate T_ProModuleLevel Set HomeModuleName = 'にゅうさつ・ちょうたつかん' Where ModuleName = 'TenderAndBiddingManagement' and LangCode = 'ja'; UPdate T_ProModuleLevel Set HomeModuleName = 'GestãoDeLicitaçõesEConcursos' Where ModuleName = 'TenderAndBiddingManagement' and LangCode = 'pt'; UPdate T_ProModuleLevel Set HomeModuleName = 'Управлениетендерами' Where ModuleName = 'TenderAndBiddingManagement' and LangCode = 'ru'; UPdate T_ProModuleLevel Set HomeModuleName = '입찰및계약관리' Where ModuleName = 'TenderAndBiddingManagement' and LangCode = 'ko';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3726</ID>
    <SQLText>UPdate T_ProModuleLevel Set SortNumber = 100 Where ModuleName = 'BidRegistration'; UPdate T_ProModuleLevel Set SortNumber = 101 Where ModuleName = 'BidConfirmation'; UPdate T_ProModuleLevel Set SortNumber = 102 Where ModuleName = 'BidWarning';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3727</ID>
    <SQLText>Update public.t_funinfordialbox Set InforName = 'DefectToBeHandled' Where InforName = '待处理的缺陷';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3728</ID>
    <SQLText>Update T_ProModuleLevel Set IsDeleted = 'NO',Visible ='YES' Where ModuleName = '数据库升级维护';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3729</ID>
    <SQLText>Update public.t_wltype Set HomeName = Type Where LangCode = 'en';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3730</ID>
    <SQLText>Update public.T_ProModuleLevel Set HomeModuleName = 'Bedienungsnavigation' Where ModuleName = 'OperateNavigation' and LangCode = 'de';
Update public.T_ProModuleLevel Set HomeModuleName = 'NavegaciónDeOperación' Where ModuleName = 'OperateNavigation' and LangCode = 'es';
Update public.T_ProModuleLevel Set HomeModuleName = 'NavigationOpérationnelle' Where ModuleName = 'OperateNavigation' and LangCode = 'fr';
Update public.T_ProModuleLevel Set HomeModuleName = 'NavigazioneOperativa' Where ModuleName = 'OperateNavigation' and LangCode = 'it';
Update public.T_ProModuleLevel Set HomeModuleName = '操作ナビゲーション' Where ModuleName = 'OperateNavigation' and LangCode = 'ja';
Update public.T_ProModuleLevel Set HomeModuleName = '操作導航' Where ModuleName = 'OperateNavigation' and LangCode = 'zh-tw';
Update public.T_ProModuleLevel Set HomeModuleName = '조작내비게이션' Where ModuleName = 'OperateNavigation' and LangCode = 'ko';
Update public.T_ProModuleLevel Set HomeModuleName = 'NavegaçãoDeOperação' Where ModuleName = 'OperateNavigation' and LangCode = 'pt';
Update public.T_ProModuleLevel Set HomeModuleName = 'ОперационнаяHавигация' Where ModuleName = 'OperateNavigation' and LangCode = 'ru';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3731</ID>
    <SQLText>Update T_ProModuleLevel Set IsDeleted = 'YES' Where ModuleName = 'MaterialManagement';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3732</ID>
    <SQLText>Update T_ProModuleLevel Set ModuleName = 'MaterialProcurementPaymentAccounting' Where ModuleName = '物料采购付款记账';
Update T_ProModule Set ModuleName = 'MaterialProcurementPaymentAccounting' Where ModuleName = '物料采购付款记账';

Update T_ProModuleLevel Set HomeModuleName = '物料採購付款記帳' Where ModuleName = 'MaterialProcurementPaymentAccounting' and langCode = 'zh-tw';
Update T_ProModuleLevel Set ModuleName = 'BuchungDerZahlungFürDieMaterialbeschaffung' Where ModuleName = 'MaterialProcurementPaymentAccounting' and langCode = 'ge';
Update T_ProModuleLevel Set HomeModuleName = 'ContabilidadDePagosDeComprasCeMateriales' Where ModuleName = 'MaterialProcurementPaymentAccounting' and langCode = 'es';
Update T_ProModuleLevel Set HomeModuleName = 'MaterialProcurementPaymentAccounting' Where ModuleName = 'MaterialProcurementPaymentAccounting' and langCode = 'en';
Update T_ProModuleLevel Set HomeModuleName = 'ComptabilitéDesPaiementsAchatDeMatériaux' Where ModuleName = 'MaterialProcurementPaymentAccounting' and langCode = 'fr';
Update T_ProModuleLevel Set HomeModuleName = 'ContabilitàDeiPagamentiPerAcquistoDiMateriali' Where ModuleName = 'MaterialProcurementPaymentAccounting' and langCode = 'it';
Update T_ProModuleLevel Set HomeModuleName = '物料調達の支払い記帳' Where ModuleName = 'MaterialProcurementPaymentAccounting' and langCode = 'ja';
Update T_ProModuleLevel Set HomeModuleName = '물자구매지불회계' Where ModuleName = 'MaterialProcurementPaymentAccounting' and langCode = 'ko';
Update T_ProModuleLevel Set HomeModuleName = 'ContabilidadeDePagamentosDeComprasDeMateriais' Where ModuleName = 'MaterialProcurementPaymentAccounting' and langCode = 'pt';
Update T_ProModuleLevel Set HomeModuleName = 'БухгалтерскийYчетNлатежей3а3акупкуматериалов' Where ModuleName = 'MaterialProcurementPaymentAccounting' and langCode = 'ru';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3733</ID>
    <SQLText>Update public.t_funinfordialbox Set homename = inforname Where LangCode Not In ('zh-CN','zh-tw');</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3734</ID>
    <SQLText>Update T_NewsType Set Type = 'Guide' Where Type = '驾驶舱';
Update T_NewsType Set Type = 'WorkGuide' Where Type = '操作导航';
Update T_NewsType Set Type = 'HeadLine' Where Type = '头条新闻';
Update T_NewsType Set Type = 'News' Where Type = '公司动态';
Update T_NewsType Set Type = 'Message' Where Type = '综合信息';
Update T_NewsType Set Type = 'Notice' Where Type = '公告通知';
Update T_NewsType Set Type = 'ProjectMap' Where Type = '项目地图';


Update t_headline Set Type = 'Guide' Where Type = '驾驶舱';
Update t_headline Set Type = 'WorkGuide' Where Type = '操作导航';
Update t_headline Set Type = 'HeadLine' Where Type = '头条新闻';
Update t_headline Set Type = 'News' Where Type = '公司动态';
Update t_headline Set Type = 'Message' Where Type = '综合信息';
Update t_headline Set Type = 'Notice' Where Type = '公告通知';
Update t_headline Set Type = 'ProjectMap' Where Type = '项目地图';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3735</ID>
    <SQLText>Update T_ProjectMember Set CssDirectory = 'CssGrey';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3736</ID>
    <SQLText>-- View: public.v_goodsmainplanbusinessobjectmaterialdata

-- DROP VIEW public.v_goodsmainplanbusinessobjectmaterialdata;

CREATE OR REPLACE VIEW public.v_goodsmainplanbusinessobjectmaterialdata
 AS
 SELECT t_itemmainplanrelateditempurchaseplan.planverid,
    t_itemmainplanrelateditempurchaseplan.planmrpverid,
    'SaleOrder'::text AS relatedtype,
    ( SELECT t_goodssalerecord.soid
           FROM t_goodssalerecord
          WHERE t_goodssalerecord.id = t_itemmainplanrelateditempurchaseplan.sourcerecordid) AS relatedid,
    t_itemmainplanrelateditempurchaseplan.itemcode,
    t_itemmainplanrelateditempurchaseplan.itemname,
    t_itemmainplanrelateditempurchaseplan.modelnumber,
    t_itemmainplanrelateditempurchaseplan.specification,
    t_itemmainplanrelateditempurchaseplan.brand,
    t_itemmainplanrelateditempurchaseplan.requirenumber,
    0 AS checkoutnumber,
    0 AS checkinnumber,
    0 AS returnnumber,
    t_itemmainplanrelateditempurchaseplan.unit
   FROM t_itemmainplanrelateditempurchaseplan
  WHERE t_itemmainplanrelateditempurchaseplan.sourcetype = 'GoodsSORecord'::bpchar
UNION
 SELECT t_itemmainplanrelateditemproductplan.planverid,
    t_itemmainplanrelateditemproductplan.planmrpverid,
    'SaleOrder'::text AS relatedtype,
    ( SELECT t_goodssalerecord.soid
           FROM t_goodssalerecord
          WHERE t_goodssalerecord.id = t_itemmainplanrelateditemproductplan.sourcerecordid) AS relatedid,
    t_itemmainplanrelateditemproductplan.itemcode,
    t_itemmainplanrelateditemproductplan.itemname,
    t_itemmainplanrelateditemproductplan.modelnumber,
    t_itemmainplanrelateditemproductplan.specification,
    t_itemmainplanrelateditemproductplan.brand,
    t_itemmainplanrelateditemproductplan.requirenumber,
    0 AS checkoutnumber,
    0 AS checkinnumber,
    0 AS returnnumber,
    t_itemmainplanrelateditemproductplan.unit
   FROM t_itemmainplanrelateditemproductplan
  WHERE t_itemmainplanrelateditemproductplan.sourcetype = 'GoodsSORecord'::bpchar
UNION
 SELECT t_itemmainplanrelateditempurchaseplan.planverid,
    t_itemmainplanrelateditempurchaseplan.planmrpverid,
    'Project'::text AS relatedtype,
    ( SELECT t_projectrelateditem.projectid
           FROM t_projectrelateditem
          WHERE t_projectrelateditem.id = t_itemmainplanrelateditempurchaseplan.sourcerecordid) AS relatedid,
    t_itemmainplanrelateditempurchaseplan.itemcode,
    t_itemmainplanrelateditempurchaseplan.itemname,
    t_itemmainplanrelateditempurchaseplan.modelnumber,
    t_itemmainplanrelateditempurchaseplan.specification,
    t_itemmainplanrelateditempurchaseplan.brand,
    t_itemmainplanrelateditempurchaseplan.requirenumber,
    0 AS checkoutnumber,
    0 AS checkinnumber,
    0 AS returnnumber,
    t_itemmainplanrelateditempurchaseplan.unit
   FROM t_itemmainplanrelateditempurchaseplan
  WHERE t_itemmainplanrelateditempurchaseplan.sourcetype = 'GoodsPJRecord'::bpchar
UNION
 SELECT t_itemmainplanrelateditemproductplan.planverid,
    t_itemmainplanrelateditemproductplan.planmrpverid,
    'Project'::text AS relatedtype,
    ( SELECT t_projectrelateditem.projectid
           FROM t_projectrelateditem
          WHERE t_projectrelateditem.id = t_itemmainplanrelateditemproductplan.sourcerecordid) AS relatedid,
    t_itemmainplanrelateditemproductplan.itemcode,
    t_itemmainplanrelateditemproductplan.itemname,
    t_itemmainplanrelateditemproductplan.modelnumber,
    t_itemmainplanrelateditemproductplan.specification,
    t_itemmainplanrelateditemproductplan.brand,
    t_itemmainplanrelateditemproductplan.requirenumber,
    0 AS checkoutnumber,
    0 AS checkinnumber,
    0 AS returnnumber,
    t_itemmainplanrelateditemproductplan.unit
   FROM t_itemmainplanrelateditemproductplan
  WHERE t_itemmainplanrelateditemproductplan.sourcetype = 'GoodsPJRecord'::bpchar
UNION
 SELECT t_itemmainplanrelateditempurchaseplan.planverid,
    t_itemmainplanrelateditempurchaseplan.planmrpverid,
    'Other'::text AS relatedtype,
    0 AS relatedid,
    t_itemmainplanrelateditempurchaseplan.itemcode,
    t_itemmainplanrelateditempurchaseplan.itemname,
    t_itemmainplanrelateditempurchaseplan.modelnumber,
    t_itemmainplanrelateditempurchaseplan.specification,
    t_itemmainplanrelateditempurchaseplan.brand,
    t_itemmainplanrelateditempurchaseplan.requirenumber,
    0 AS checkoutnumber,
    0 AS checkinnumber,
    0 AS returnnumber,
    t_itemmainplanrelateditempurchaseplan.unit
   FROM t_itemmainplanrelateditempurchaseplan
  WHERE t_itemmainplanrelateditempurchaseplan.sourcetype &lt;&gt; 'GoodsSORecord'::bpchar AND t_itemmainplanrelateditempurchaseplan.sourcetype &lt;&gt; 'Project'::bpchar
UNION
 SELECT t_itemmainplanrelateditemproductplan.planverid,
    t_itemmainplanrelateditemproductplan.planmrpverid,
    'Other'::text AS relatedtype,
    0 AS relatedid,
    t_itemmainplanrelateditemproductplan.itemcode,
    t_itemmainplanrelateditemproductplan.itemname,
    t_itemmainplanrelateditemproductplan.modelnumber,
    t_itemmainplanrelateditemproductplan.specification,
    t_itemmainplanrelateditemproductplan.brand,
    t_itemmainplanrelateditemproductplan.requirenumber,
    0 AS checkoutnumber,
    0 AS checkinnumber,
    0 AS returnnumber,
    t_itemmainplanrelateditemproductplan.unit
   FROM t_itemmainplanrelateditemproductplan
  WHERE t_itemmainplanrelateditemproductplan.sourcetype &lt;&gt; 'GoodsSORecord'::bpchar AND t_itemmainplanrelateditemproductplan.sourcetype &lt;&gt; 'Project'::bpchar
UNION
 SELECT 0 AS planverid,
    0 AS planmrpverid,
    b.relatedtype,
    b.relatedid,
    a.goodscode AS itemcode,
    a.goodsname AS itemname,
    a.modelnumber,
    a.spec AS specification,
    a.manufacturer AS brand,
    0 AS requirenumber,
    0 AS checkoutnumber,
    a.number AS checkinnumber,
    0 AS returnnumber,
    a.unitname AS unit
   FROM t_goodscheckinorderdetail a,
    t_goodscheckinorder b
  WHERE a.checkinid = b.checkinid
UNION
 SELECT 0 AS planverid,
    0 AS planmrpverid,
    b.relatedtype,
    b.relatedid,
    a.goodscode AS itemcode,
    a.goodsname AS itemname,
    a.modelnumber,
    a.spec AS specification,
    a.manufacturer AS brand,
    0 AS requirenumber,
    a.number AS checkoutnumber,
    0 AS checkinnumber,
    0 AS returnnumber,
    a.unitname AS unit
   FROM t_goodsshipmentdetail a,
    t_goodsshipmentorder b
  WHERE a.shipmentno = b.shipmentno
UNION
 SELECT 0 AS planverid,
    0 AS planmrpverid,
    b.relatedtype,
    b.relatedid,
    a.goodscode AS itemcode,
    a.goodsname AS itemname,
    a.modelnumber,
    a.spec AS specification,
    a.manufacturer AS brand,
    0 AS requirenumber,
    0 AS checkoutnumber,
    0 AS checkinnumber,
    a.number AS returnnumber,
    a.unitname AS unit
   FROM t_goodscheckinorderdetail a,
    t_goodscheckinorder b,
    t_goodsreturndetail c
  WHERE a.checkinid = b.checkinid AND a.sourceid = c.id;

ALTER TABLE public.v_goodsmainplanbusinessobjectmaterialdata
    OWNER TO postgres;

GRANT ALL ON TABLE public.v_goodsmainplanbusinessobjectmaterialdata TO postgres;
GRANT SELECT ON TABLE public.v_goodsmainplanbusinessobjectmaterialdata TO taketoppgdbreadonlyuser;</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3737</ID>
    <SQLText>-- View: public.v_goodsmainplanbusinessobjectmaterialdatareport

-- DROP VIEW public.v_goodsmainplanbusinessobjectmaterialdatareport;

CREATE OR REPLACE VIEW public.v_goodsmainplanbusinessobjectmaterialdatareport
 AS
 SELECT v_goodsmainplanbusinessobjectmaterialdata.planverid,
    v_goodsmainplanbusinessobjectmaterialdata.planmrpverid,
    v_goodsmainplanbusinessobjectmaterialdata.relatedtype,
    v_goodsmainplanbusinessobjectmaterialdata.relatedid,
    v_goodsmainplanbusinessobjectmaterialdata.itemcode,
    v_goodsmainplanbusinessobjectmaterialdata.itemname,
    v_goodsmainplanbusinessobjectmaterialdata.modelnumber,
    v_goodsmainplanbusinessobjectmaterialdata.specification,
    v_goodsmainplanbusinessobjectmaterialdata.brand,
    v_goodsmainplanbusinessobjectmaterialdata.unit,
    sum(v_goodsmainplanbusinessobjectmaterialdata.requirenumber) AS totalrequirenumber,
    sum(v_goodsmainplanbusinessobjectmaterialdata.checkoutnumber) AS totalcheckoutnumber,
    sum(v_goodsmainplanbusinessobjectmaterialdata.checkinnumber) AS totalcheckinnumber,
    sum(v_goodsmainplanbusinessobjectmaterialdata.returnnumber) AS totalreturnnumber,
    sum(v_goodsmainplanbusinessobjectmaterialdata.checkoutnumber) - sum(v_goodsmainplanbusinessobjectmaterialdata.requirenumber) AS morethancheckoutnumber,
    sum(v_goodsmainplanbusinessobjectmaterialdata.requirenumber) - sum(v_goodsmainplanbusinessobjectmaterialdata.checkinnumber) AS lessthancheckinnumber
   FROM v_goodsmainplanbusinessobjectmaterialdata
  GROUP BY v_goodsmainplanbusinessobjectmaterialdata.planverid, v_goodsmainplanbusinessobjectmaterialdata.planmrpverid, v_goodsmainplanbusinessobjectmaterialdata.relatedtype, v_goodsmainplanbusinessobjectmaterialdata.relatedid, v_goodsmainplanbusinessobjectmaterialdata.itemcode, v_goodsmainplanbusinessobjectmaterialdata.itemname, v_goodsmainplanbusinessobjectmaterialdata.modelnumber, v_goodsmainplanbusinessobjectmaterialdata.specification, v_goodsmainplanbusinessobjectmaterialdata.brand, v_goodsmainplanbusinessobjectmaterialdata.unit;

ALTER TABLE public.v_goodsmainplanbusinessobjectmaterialdatareport
    OWNER TO postgres;

GRANT ALL ON TABLE public.v_goodsmainplanbusinessobjectmaterialdatareport TO postgres;
GRANT SELECT ON TABLE public.v_goodsmainplanbusinessobjectmaterialdatareport TO taketoppgdbreadonlyuser;</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3738</ID>
    <SQLText>-- View: public.v_goodsmainplanbusinessobjectmaterialdatasummaryreport

-- DROP VIEW public.v_goodsmainplanbusinessobjectmaterialdatasummaryreport;

CREATE OR REPLACE VIEW public.v_goodsmainplanbusinessobjectmaterialdatasummaryreport
 AS
 SELECT v_goodsmainplanbusinessobjectmaterialdatareport.planverid,
    v_goodsmainplanbusinessobjectmaterialdatareport.planmrpverid,
    v_goodsmainplanbusinessobjectmaterialdatareport.relatedtype,
    v_goodsmainplanbusinessobjectmaterialdatareport.relatedid,
    v_goodsmainplanbusinessobjectmaterialdatareport.itemcode,
    v_goodsmainplanbusinessobjectmaterialdatareport.itemname,
    v_goodsmainplanbusinessobjectmaterialdatareport.modelnumber,
    v_goodsmainplanbusinessobjectmaterialdatareport.specification,
    v_goodsmainplanbusinessobjectmaterialdatareport.brand,
    v_goodsmainplanbusinessobjectmaterialdatareport.unit,
    v_goodsmainplanbusinessobjectmaterialdatareport.totalrequirenumber,
    v_goodsmainplanbusinessobjectmaterialdatareport.totalcheckoutnumber,
    COALESCE(
        CASE
            WHEN v_goodsmainplanbusinessobjectmaterialdatareport.morethancheckoutnumber &lt; 0::numeric THEN 0
            ELSE NULL::integer
        END, 0) AS morethancheckoutnumber,
    v_goodsmainplanbusinessobjectmaterialdatareport.lessthancheckinnumber,
    v_goodsmainplanbusinessobjectmaterialdatareport.totalreturnnumber,
    v_goodsmainplanbusinessobjectmaterialdatareport.totalcheckinnumber
   FROM v_goodsmainplanbusinessobjectmaterialdatareport;

ALTER TABLE public.v_goodsmainplanbusinessobjectmaterialdatasummaryreport
    OWNER TO postgres;

GRANT ALL ON TABLE public.v_goodsmainplanbusinessobjectmaterialdatasummaryreport TO postgres;
GRANT SELECT ON TABLE public.v_goodsmainplanbusinessobjectmaterialdatasummaryreport TO taketoppgdbreadonlyuser;</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3739</ID>
    <SQLText>-- View: public.v_goodsinventorynumbersummary

-- DROP VIEW public.v_goodsinventorynumbersummary;

CREATE OR REPLACE VIEW public.v_goodsinventorynumbersummary
 AS
 SELECT t_goods.goodscode,
    t_goods.goodsname,
    t_goods.spec,
    t_goods.unitname,
    sum(t_goods.number) AS inventorynumber
   FROM t_goods
  GROUP BY t_goods.goodscode, t_goods.goodsname, t_goods.spec, t_goods.unitname;

ALTER TABLE public.v_goodsinventorynumbersummary
    OWNER TO postgres;

GRANT ALL ON TABLE public.v_goodsinventorynumbersummary TO postgres;
GRANT SELECT ON TABLE public.v_goodsinventorynumbersummary TO taketoppgdbreadonlyuser;</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3740</ID>
    <SQLText>-- View: public.v_goodslistrelatedcustomeraftersale

-- DROP VIEW public.v_goodslistrelatedcustomeraftersale;

CREATE OR REPLACE VIEW public.v_goodslistrelatedcustomeraftersale
 AS
 SELECT DISTINCT a.sn AS goodssn,
    b.shipmentno,
    b.shiptime,
    b.operatorcode,
    b.operatorname,
    b.applicant,
    b.applicationreason,
    (b.shiptime || a.warrantyperiod::character(1)::text) || 'day'::text AS warrantyendtime,
    b.customercode,
    b.customername,
    COALESCE(e.customercode, ''::bpchar) AS finalcustomercode,
    COALESCE(e.customername, ''::bpchar) AS finalcustomername,
    b.relatedtype,
    b.relatedid,
    b.relatedcode,
    a.id,
    a.goodscode,
    a.goodsname,
    a.sn,
    a.modelnumber,
    a.spec,
    a.number,
    a.unitname,
    a.manufacturer,
    a.fromposition,
    a.fromgoodsid,
    a.toposition,
    a.warrantyperiod,
    a.comment,
    a.sourcetype,
    a.sourceid
   FROM t_goodsshipmentdetail a
     JOIN t_goodsshipmentorder b ON a.shipmentno = b.shipmentno
     LEFT JOIN t_customerrelatedgoods c ON a.sn::text = c.goodssn::text
     LEFT JOIN t_customer e ON c.customercode = e.customercode;

ALTER TABLE public.v_goodslistrelatedcustomeraftersale
    OWNER TO postgres;

GRANT ALL ON TABLE public.v_goodslistrelatedcustomeraftersale TO postgres;
GRANT SELECT ON TABLE public.v_goodslistrelatedcustomeraftersale TO taketoppgdbreadonlyuser;</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3741</ID>
    <SQLText>-- View: public.v_goodsmainplanmaterialdata

-- DROP VIEW public.v_goodsmainplanmaterialdata;

CREATE OR REPLACE VIEW public.v_goodsmainplanmaterialdata
 AS
 SELECT t_itemmainplanrelateditempurchaseplan.planverid,
    t_itemmainplanrelateditempurchaseplan.planmrpverid,
    t_itemmainplanrelateditempurchaseplan.itemcode,
    t_itemmainplanrelateditempurchaseplan.itemname,
    t_itemmainplanrelateditempurchaseplan.modelnumber,
    t_itemmainplanrelateditempurchaseplan.specification,
    t_itemmainplanrelateditempurchaseplan.brand,
    t_itemmainplanrelateditempurchaseplan.requirenumber,
    0 AS checkoutnumber,
    0 AS checkinnumber,
    0 AS returnnumber,
    t_itemmainplanrelateditempurchaseplan.unit
   FROM t_itemmainplanrelateditempurchaseplan
UNION
 SELECT t_itemmainplanrelateditemproductplan.planverid,
    t_itemmainplanrelateditemproductplan.planmrpverid,
    t_itemmainplanrelateditemproductplan.itemcode,
    t_itemmainplanrelateditemproductplan.itemname,
    t_itemmainplanrelateditemproductplan.modelnumber,
    t_itemmainplanrelateditemproductplan.specification,
    t_itemmainplanrelateditemproductplan.brand,
    t_itemmainplanrelateditemproductplan.requirenumber,
    0 AS checkoutnumber,
    0 AS checkinnumber,
    0 AS returnnumber,
    t_itemmainplanrelateditemproductplan.unit
   FROM t_itemmainplanrelateditemproductplan
UNION
 SELECT b.relatedid AS planverid,
    0 AS planmrpverid,
    a.goodscode AS itemcode,
    a.goodsname AS itemname,
    a.modelnumber,
    a.spec AS specification,
    a.manufacturer AS brand,
    0 AS requirenumber,
    0 AS checkoutnumber,
    a.number AS checkinnumber,
    0 AS returnnumber,
    a.unitname AS unit
   FROM t_goodscheckinorderdetail a,
    t_goodscheckinorder b
  WHERE a.checkinid = b.checkinid AND b.relatedtype = 'MRPPlan'::bpchar
UNION
 SELECT b.relatedid AS planverid,
    0 AS planmrpverid,
    a.goodscode AS itemcode,
    a.goodsname AS itemname,
    a.modelnumber,
    a.spec AS specification,
    a.manufacturer AS brand,
    0 AS requirenumber,
    a.number AS checkoutnumber,
    0 AS checkinnumber,
    0 AS returnnumber,
    a.unitname AS unit
   FROM t_goodsshipmentdetail a,
    t_goodsshipmentorder b
  WHERE a.shipmentno = b.shipmentno AND b.relatedtype = 'MRPPlan'::bpchar
UNION
 SELECT b.relatedid AS planverid,
    0 AS planmrpverid,
    a.goodscode AS itemcode,
    a.goodsname AS itemname,
    a.modelnumber,
    a.spec AS specification,
    a.manufacturer AS brand,
    0 AS requirenumber,
    0 AS checkoutnumber,
    a.number AS checkinnumber,
    a.number AS returnnumber,
    a.unitname AS unit
   FROM t_goodscheckinorderdetail a,
    t_goodscheckinorder b,
    t_goodsreturndetail c
  WHERE a.checkinid = b.checkinid AND a.sourceid = c.id AND b.relatedtype = 'MRPPlan'::bpchar;

ALTER TABLE public.v_goodsmainplanmaterialdata
    OWNER TO postgres;

GRANT ALL ON TABLE public.v_goodsmainplanmaterialdata TO postgres;
GRANT SELECT ON TABLE public.v_goodsmainplanmaterialdata TO taketoppgdbreadonlyuser;</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3742</ID>
    <SQLText>-- View: public.v_goodsmainplanmaterialdatareport

-- DROP VIEW public.v_goodsmainplanmaterialdatareport;

CREATE OR REPLACE VIEW public.v_goodsmainplanmaterialdatareport
 AS
 SELECT v_goodsmainplanmaterialdata.planverid,
    v_goodsmainplanmaterialdata.planmrpverid,
    v_goodsmainplanmaterialdata.itemcode,
    v_goodsmainplanmaterialdata.itemname,
    v_goodsmainplanmaterialdata.modelnumber,
    v_goodsmainplanmaterialdata.specification,
    v_goodsmainplanmaterialdata.brand,
    v_goodsmainplanmaterialdata.unit,
    sum(v_goodsmainplanmaterialdata.requirenumber) AS totalrequirenumber,
    sum(v_goodsmainplanmaterialdata.checkoutnumber) AS totalcheckoutnumber,
    sum(v_goodsmainplanmaterialdata.checkinnumber) AS totalcheckinnumber,
    sum(v_goodsmainplanmaterialdata.returnnumber) AS totalreturnnumber,
    sum(v_goodsmainplanmaterialdata.checkoutnumber) - sum(v_goodsmainplanmaterialdata.requirenumber) AS morethancheckoutnumber,
    sum(v_goodsmainplanmaterialdata.requirenumber) - sum(v_goodsmainplanmaterialdata.checkinnumber) AS lessthancheckinnumber
   FROM v_goodsmainplanmaterialdata
  GROUP BY v_goodsmainplanmaterialdata.planverid, v_goodsmainplanmaterialdata.planmrpverid, v_goodsmainplanmaterialdata.itemcode, v_goodsmainplanmaterialdata.itemname, v_goodsmainplanmaterialdata.modelnumber, v_goodsmainplanmaterialdata.specification, v_goodsmainplanmaterialdata.brand, v_goodsmainplanmaterialdata.unit;

ALTER TABLE public.v_goodsmainplanmaterialdatareport
    OWNER TO postgres;

GRANT ALL ON TABLE public.v_goodsmainplanmaterialdatareport TO postgres;
GRANT SELECT ON TABLE public.v_goodsmainplanmaterialdatareport TO taketoppgdbreadonlyuser;</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3743</ID>
    <SQLText>-- View: public.v_goodsmainplanmaterialdatasummaryreport

-- DROP VIEW public.v_goodsmainplanmaterialdatasummaryreport;

CREATE OR REPLACE VIEW public.v_goodsmainplanmaterialdatasummaryreport
 AS
 SELECT v_goodsmainplanmaterialdatareport.planverid,
    v_goodsmainplanmaterialdatareport.planmrpverid,
    v_goodsmainplanmaterialdatareport.itemcode,
    v_goodsmainplanmaterialdatareport.itemname,
    v_goodsmainplanmaterialdatareport.modelnumber,
    v_goodsmainplanmaterialdatareport.specification,
    v_goodsmainplanmaterialdatareport.brand,
    v_goodsmainplanmaterialdatareport.unit,
    v_goodsmainplanmaterialdatareport.totalrequirenumber,
    v_goodsmainplanmaterialdatareport.totalcheckoutnumber,
        CASE
            WHEN v_goodsmainplanmaterialdatareport.morethancheckoutnumber &lt; 0::numeric THEN 0
            ELSE NULL::integer
        END AS morethancheckoutnumber,
    v_goodsmainplanmaterialdatareport.lessthancheckinnumber,
    v_goodsmainplanmaterialdatareport.totalreturnnumber,
    v_goodsmainplanmaterialdatareport.totalcheckinnumber
   FROM v_goodsmainplanmaterialdatareport;

ALTER TABLE public.v_goodsmainplanmaterialdatasummaryreport
    OWNER TO postgres;

GRANT ALL ON TABLE public.v_goodsmainplanmaterialdatasummaryreport TO postgres;
GRANT SELECT ON TABLE public.v_goodsmainplanmaterialdatasummaryreport TO taketoppgdbreadonlyuser;</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3744</ID>
    <SQLText>UPdate T_SystemLanguage Set SortNumber = 1 Where LangCode = 'en';
UPdate T_SystemLanguage Set SortNumber = 2 Where LangCode = 'zh-CN';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3745</ID>
    <SQLText>Update T_WZProject Set PowerPurchase = 'NO' Where PowerPurchase = 'No';
Update T_WZProject Set PowerPurchase = 'YES' Where PowerPurchase = 'Yes';</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3746</ID>
    <SQLText>CREATE OR REPLACE VIEW public.v_projectplanlist
 AS
 SELECT a.verid,
    a.planid,
    a.parentidgantt,
    a.workid,
    a.plandetail,
    a.type,
    a.begintime,
    a.endtime,
    a.expireday,
    a.leadercode,
    a.leader,
    a.resource,
    a.budget,
    a.makedate,
    a.parentid,
    a.priorid,
    a.defaultschedule,
    a.defaultcost,
    a.percent_done,
    a.expense,
    a.status,
    b.projectid,
    b.projectname,
    b.pmcode,
    b.pmname
   FROM v_projectplanforwanring a,
    t_project b
  WHERE a.projectid = b.projectid AND (a.status::bpchar &lt;&gt; ALL (ARRAY['Completed'::bpchar, 'Cance'::bpchar])) AND b.projectid &gt; 1 AND b.projectclass &lt;&gt; 'TemplateProject'::bpchar AND (b.status::bpchar &lt;&gt; ALL (ARRAY['Acceptance'::bpchar, 'CaseClosed'::bpchar, 'Archived'::bpchar, 'Deleted'::bpchar, 'Suspended'::bpchar, 'Cance'::bpchar]));

ALTER TABLE public.v_projectplanlist
    OWNER TO postgres;</SQLText>
  </DataBaseUpgradeFile>
  <DataBaseUpgradeFile>
    <ID>3747</ID>
    <SQLText>CREATE OR REPLACE VIEW public.v_projectplansummaryreport
 AS
 SELECT a.projectid,
    a.id AS planid,
    a.name AS plandetail,
    a.start_date AS begintime,
    a.end_date AS endtime,
    b.taskid,
    sum(a.workhour) AS manhourbudget,
    sum(c.manhour) AS manhourtrue
   FROM t_impleplan a
     JOIN t_projectplanversion d ON a.projectid = d.projectid AND a.verid = d.verid AND d.type::bpchar = 'InUse'::bpchar
     LEFT JOIN t_projecttask b ON a.id = b.planid
     LEFT JOIN t_taskassignrecord c ON b.taskid = c.taskid
  GROUP BY a.projectid, a.id, a.name, a.start_date, a.end_date, b.taskid;</SQLText>
  </DataBaseUpgradeFile>
</DataBaseUpgradeFiles>